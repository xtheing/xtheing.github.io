<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>istio</title>
      <link href="/2023/05/04/istio/"/>
      <url>/2023/05/04/istio/</url>
      
        <content type="html"><![CDATA[<p>听说过 istio 但是一直没有怎么使用过。</p><span id="more"></span><p>Istio 的核心理念是提供一个服务网格平台，用于连接、保护、控制和观测微服务应用程序。通过在现有的分布式微服务架构上增加一个透明层，Istio 旨在实现以下目标：</p><ol><li>连接：简化服务之间的网络通信，同时提供负载均衡、故障恢复和端到端身份验证功能。</li><li>保护：提供安全通信，可以自动为服务间通信提供双向 TLS 加密认证，确保数据在传输过程中的安全性。</li><li>控制：通过强大的流量管理，实现灵活的路由规则、重试、故障注入以及故障切换功能，便于应对各种运维场景。</li><li>观测：提供有关服务间通信的详细指标、日志和追踪数据，帮助监控和诊断分布式系统的问题。</li></ol><p>这些核心理念使得 Istio 成为一个可扩展且易于集成的服务网格解决方案，帮助开发者和运维人员更好地管理和维护复杂的微服务应用。</p><h2 id="注入-Envoy-代理"><a href="#注入-Envoy-代理" class="headerlink" title="注入 Envoy 代理"></a>注入 Envoy 代理</h2><p>为 Pod 注入 Istio Sidecar，您需要遵循以下步骤：</p><ol><li><p>安装并部署 Istio：首先，请确保您已在 Kubernetes 集群中安装和部署了 Istio。您可以参照 Istio 的官方文档来完成这个过程：<a href="https://istio.io/latest/docs/setup/install/">https://istio.io/latest/docs/setup/install/</a></p></li><li><p>打开自动 Sidecar 注入：为特定的命名空间启用自动 Sidecar 注入。运行以下命令将为您的命名空间添加 <code>istio-injection=enabled</code> 标签（将 <code>&lt;NAMESPACE&gt;</code> 替换为目标命名空间）：</p><pre class="line-numbers language-none"><code class="language-none">kubectl label namespace &lt;NAMESPACE&gt; istio-injection&#x3D;enabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>部署应用：现在，在启用 Sidecar 注入的命名空间中部署您的 Kubernetes 应用。Istio 会在每个 Pod 中自动注入一个 Sidecar 代理（Envoy 容器）。 例如，使用以下命令部署示例应用：</p><pre class="line-numbers language-none"><code class="language-none">kubectl apply -f &lt;YOUR_APPLICATION_YAML&gt; -n &lt;NAMESPACE&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证 Sidecar 注入：检查已部署的 Pod，以确认 Sidecar 已成功注入。运行以下命令（将 <code>&lt;NAMESPACE&gt;</code> 替换为目标命名空间）：</p><pre class="line-numbers language-none"><code class="language-none">kubectl get pods -n &lt;NAMESPACE&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果中，如果每个 Pod 后面的数字为 “2/2” 或其他大于 1 的数字，表明 Sidecar 已成功注入。</p></li></ol><p>注意：如果您需要手动注入 Sidecar，可以使用 <code>istioctl kube-inject</code> 命令。在部署应用之前，请运行以下命令（将 <code>&lt;YOUR_APPLICATION_YAML&gt;</code> 替换为您的应用 YAML 文件；<code>&lt;OUTPUT_YAML&gt;</code> 替换为带有注入 Sidecar 的输出 YAML 文件）：</p><pre class="line-numbers language-none"><code class="language-none">istioctl kube-inject -f &lt;YOUR_APPLICATION_YAML&gt; &gt; &lt;OUTPUT_YAML&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，使用 <code>kubectl apply</code> 部署输出 YAML 文件：</p><pre class="line-numbers language-none"><code class="language-none">kubectl apply -f &lt;OUTPUT_YAML&gt; -n &lt;NAMESPACE&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="istio-的几种资源类型"><a href="#istio-的几种资源类型" class="headerlink" title="istio 的几种资源类型"></a>istio 的几种资源类型</h2><p>Istio 提供了多种自定义资源类型 (Custom Resource Definitions, CRDs) 以实现其功能。这些资源类型分为以下几类：流量管理、安全性、策略、遥测等。下面列举了一些主要的 Istio 资源类型以及相应示例：</p><ol><li><p>VirtualService（虚拟服务）：用于配置流量路由规则，可以将流量导向不同的服务或子集。</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>virtual<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"example.com"</span>  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>service        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DestinationRule（目标规则）：定义访问某服务时应用的负载均衡策略、连接池设置和异常检测。</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>destination<span class="token punctuation">-</span>rule<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>service  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>    <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span> LEAST_CONN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Gateway（网关）：配置 Ingress 和 Egress 流量的入口点，开放特定的端口、协议和主机名。</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> Gateway<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>gateway<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">istio</span><span class="token punctuation">:</span> ingressgateway  <span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span>      <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP    <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>PeerAuthentication（对等认证）：配置服务间通信的双向 TLS 认证设置。</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> security.istio.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PeerAuthentication<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">mtls</span><span class="token punctuation">:</span>     <span class="token key atrule">mode</span><span class="token punctuation">:</span> STRICT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AuthorizationPolicy（授权策略）：定义基于特定条件的访问授权策略。</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> security.istio.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> AuthorizationPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>authz<span class="token punctuation">-</span>policy<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>service  <span class="token key atrule">action</span><span class="token punctuation">:</span> ALLOW  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">source</span><span class="token punctuation">:</span>        <span class="token key atrule">namespaces</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"trusted-namespace"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>以上仅为 Istio 资源类型的几个示例，您可以通过查阅官方文档了解更多资源类型及用途：<a href="https://istio.io/latest/docs/reference/config/">https://istio.io/latest/docs/reference/config/</a></p><h2 id="流量走向"><a href="#流量走向" class="headerlink" title="流量走向"></a>流量走向</h2><ol><li>客户端发起请求，将流量导向到某个服务。</li><li>流量首先会被 Istio Gateway 捕获（如果请求来自外部）。Gateway 作为 Ingress 控制点，根据配置的规则，允许或拒绝特定的主机、端口和协议。</li><li>通过 Gateway 后，流量进入到 Ingress Envoy Sidecar。Envoy Sidecar 是一个轻量级代理，负责处理所有进出服务的流量。</li><li>根据 VirtualService 规则，流量将被路由至相应的目标服务。VirtualService 可以指定多种复杂的路由策略，如权重分配、版本控制等。</li><li>根据 DestinationRule，流量将被发送到相应的 Pod 和服务实例。DestinationRule 可以定义负载均衡策略、连接池设置和异常检测。</li><li>请求到达目标服务的 Envoy Sidecar。Sidecar 在转发请求给服务前，会根据 PeerAuthentication 和 AuthorizationPolicy 等安全策略执行身份验证和访问授权操作。</li><li>最后，请求到达目标服务，并得到响应。响应再按照类似的路径返回给客户端。</li></ol><p>注意，以上流程描述了 Ingress 流量。Egress 流量（从集群向外部服务的请求）也遵循类似的逻辑，但是需要配置 Egress Gateway。在整个过程中，Istio 还会收集遥测数据、度量指标和日志信息，有助于监控和排查问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed工具 常用命令</title>
      <link href="/2023/05/04/yun-wei/sed-gong-ju-chang-yong-ming-ling/"/>
      <url>/2023/05/04/yun-wei/sed-gong-ju-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>当使用sed工具时，可以通过传递一些命令来指定文本编辑操作</p><span id="more"></span><p>以下是一些常见的sed命令：</p><ul><li>s: 替换命令，用于替换文本中匹配的字符串。</li><li>g: 全局标志，用于进行全局替换（默认情况下只会替换第一个匹配项）。</li><li>i: 原地修改标志，用于直接在文件中进行修改而不是在终端中输出结果。</li><li>^: 匹配行首。</li><li>$: 匹配行尾。</li><li>/regexp/: 正则表达式模式匹配。</li></ul><p>以上命令都可以与sed的s命令结合使用来实现各种文本编辑任务。比如，在上面的命令中，使用了s命令进行字符串替换，并加上了全局标志g，以便将每个匹配项都替换掉；并且指定了-i标志，以便在原始文件中直接进行修改，而不是输出到终端。</p><p>在sed中，s命令是用于字符串替换的命令。一般情况下，它使用斜杠（/）来分隔正则表达式和要替换的文本。但是，如果正则表达式本身包含斜杠，则需要使用其他字符作为分隔符。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">sudo sed -i &quot;s@http:&#x2F;&#x2F;.*archive.ubuntu.com@http:&#x2F;&#x2F;repo.huaweicloud.com@g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.listsudo sed -i &quot;s@http:&#x2F;&#x2F;.*security.ubuntu.com@http:&#x2F;&#x2F;repo.huaweicloud.com@g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两条命令使用sed工具来替换Ubuntu系统软件源列表(/etc/apt/sources.list)中的URL地址。其中，”http://.*archive.ubuntu.com”和”http://.*security.ubuntu.com”是正则表达式，匹配原先软件源列表中以”<a href="http://archive.ubuntu.com&quot;和&quot;http//security.ubuntu.com&quot;%E5%BC%80%E5%A4%B4%E7%9A%84URL%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%B9%B6%E7%94%A8&quot;http://repo.huaweicloud.com&quot;%E4%BB%A3%E6%9B%BF%E5%AE%83%E4%BB%AC%E3%80%82%E4%BD%BF%E7%94%A8sudo%E5%91%BD%E4%BB%A4%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9%E3%80%82">http://archive.ubuntu.com&quot;和&quot;http://security.ubuntu.com&quot;开头的URL地址，并用&quot;http://repo.huaweicloud.com&quot;代替它们。使用sudo命令可以获取管理员权限进行修改。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入golang</title>
      <link href="/2022/02/23/golang/shen-ru-golang/"/>
      <url>/2022/02/23/golang/shen-ru-golang/</url>
      
        <content type="html"><![CDATA[<h1 id="深入golnag"><a href="#深入golnag" class="headerlink" title="深入golnag"></a>深入golnag</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>一个比特可以是0也可以是1，8个比特组成一个字节，可以是0~255，组合起来就可以表示更大的数字。</p><p>字符集用来表示字符，历史有ASCII(1967),GB2312(1980),BIG5(1984), </p><p>在表示存储字符的时候发生一个问题，就是表示的字符不能简单的拼接起来，计算机不知道如何划分边界，从而不知道需要表示的字符，如下图。</p><p><img src="https://s2.loli.net/2022/02/09/cAzkRerYpUqLV5g.png" alt="image-20220209150249826"></p><p>定长编码</p><p><img src="https://s2.loli.net/2022/02/09/2PrGy5jKp493Bn7.png" alt="image-20220209150925889"></p><p>变长编码</p><p>开头表示需要占用几个字节，比如1110开头需要占用三个字节，后面的10开头表示一个字节，后面紧跟的是编码内容。也就是utf-8的编码模式。</p><p><img src="https://s2.loli.net/2022/02/09/8NXLqr3GFWjUB6m.png" alt="image-20220209151249671"></p><p>golang中的string。</p><p>在c语言中内容的末尾会有一个标识符，<code>\0</code>，但是也限制了内容中不可以出现这个标识符，所以go语言中没有采用这样的标识符。而是在起始位置的后面多存一个字节长度个数，所以能找到存储内容的开头和结尾。</p><p><img src="https://s2.loli.net/2022/02/09/RrEnMe8jID9tTm4.png" alt="image-20220209151907094"></p><p>在go语言中可以读取字符串的内容，但是无法修改字符串的内容，这一点和python有很大的区别。</p><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice有三个部分组成，</p><ul><li>第一部分元素存哪里</li><li>第二部分存了多少个元素</li><li>第三部分可以存多少个元素</li></ul><h3 id="make声明"><a href="#make声明" class="headerlink" title="make声明"></a>make声明</h3><p>如果声明一个数组使用make </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>ints <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ints<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>ints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">// 这里的ints中的data没有起始位置所以为nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/09/mgh6R31kyAwT9OH.png" alt="image-20220209154939572"></p><h3 id="new声明"><a href="#new声明" class="headerlink" title="new声明"></a>new声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">ps <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不负责底层数组的分配，这里的ps就是data的地址。</p><p>没有分配地址可以通过append函数添加元素分配地址。</p><p><img src="https://s2.loli.net/2022/02/09/KG3SXrfUEqaObMh.png" alt="image-20220209155706768"></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组就是同种类型的元素一个挨一个的存储，int型的slice底层就是int数组，string型的slice 底层就是 string的数组。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span> <span class="token comment">// 数组容量声明了就不能变了</span><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment">// slice 可以共用同一个底层数组</span><span class="token keyword">var</span> s2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">//[1 2 3]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//[7 8 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="slice扩容规则"><a href="#slice扩容规则" class="headerlink" title="slice扩容规则"></a>slice扩容规则</h4><p>第一步，预告扩容后的容量newCap，</p><p><img src="https://s2.loli.net/2022/02/09/7SwoHUh2P4XqmNx.png" alt="image-20220209160755024"></p><p>第二步，newCap个元素需要多大内存</p><p>在很多的编程语言中，申请分配内存并不是直接和操作系统交涉，而是和语言自身实现的内存管理模块，他会提前向操作系统申请一批内存，分成常用的规格管理起来。</p><p><img src="https://s2.loli.net/2022/02/09/mT5vzojpfgx6wQL.png" alt="image-20220209161147137"></p><p>第三步，将预估申请的内存匹配到合适的内存规格</p><p>例子</p><p><img src="https://s2.loli.net/2022/02/09/CSGM7Xb84kwYLZt.png" alt="image-20220209161617019"></p><p>第一步预估，添加一个元素至少需要到4，翻倍容量大于4，小于1024，所以预估容量为6。</p><p>第二步，预估容量乘以元素大小，为96字节、</p><p>第三步，匹配到的内存规格为96字节，所以最终扩容后容量为6</p><h2 id="结构体和内存对齐"><a href="#结构体和内存对齐" class="headerlink" title="结构体和内存对齐"></a>结构体和内存对齐</h2><p>如果cpu需要读取内存数据，需要通过地址总线把地址传输给内存，内存准备好数据输出到数据总线交给cpu。</p><p>如果地址总线只有8根，那这个地址只能表示0~255的地址，所以256就是8根地址总线最大的寻址空间，如果要使用更大的内存就需要更宽的地址总线，例如32位的地址总线就可以寻址4G的内存。所以如果想每次操作4字节就需要32位的数据总线，如果是8字节就需要64位的地址总线。这里每次操作的字节数就是所谓的机器字长。</p><p><img src="https://s2.loli.net/2022/02/09/wiKzaTMZI3otJVQ.png" alt="image-20220209162550859"></p><p>一个内存条一面是一个rank，一面有很多的颗粒为chip，一个颗粒里面有8个banks，在bank中就可以通过选择行列来定位地址。这样可以组成逻辑上的8个字节。</p><p><img src="https://s2.loli.net/2022/02/09/wTCnUfOkShq3ZjG.png" alt="image-20220209162813789"></p><p>每个bank上表示的字节不同，组成我们逻辑上的8个字节。</p><p><img src="https://s2.loli.net/2022/02/09/wZAyTt7eC6mWYNK.png" alt="image-20220209163126433"></p><p>为了保证程序的高效运行，编译器会把各种类型的数据安排到合适的地址，并占用合适的长度，也就是内存对齐，每种类型的对齐值就是它的对齐边界。内存对齐要求数据存储地址，以及占用的字节数都要是它对齐边界的倍数， 这里int32只能从4开始，不能从2开始。</p><p><img src="https://s2.loli.net/2022/02/09/xd6BGkZW3zlnhFL.png" alt="image-20220209163556324"></p><p>！！！未完全理解</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map的常规理解</p><p><img src="https://s2.loli.net/2022/02/09/gIJ3Rk962pbiF1h.png" alt="image-20220209172334700"></p><p>go语言中</p><p>map类型的变量本质上是一个指针指向hmap结构体 </p><p><img src="https://s2.loli.net/2022/02/09/tDyjwgqxKm2W1So.png" alt="image-20220209173305708"></p><h3 id="bmap的结构"><a href="#bmap的结构" class="headerlink" title="bmap的结构"></a>bmap的结构</h3><p>一个桶里可以放8个键值对，为了让内存更加紧凑8个key放一起，8个value放一起，8个key的前面是8个tophash，每个tophash都是对应哈希值的高8位。最后是一个bmap类型的指针，指向一个溢出桶，溢出桶的内存布局和常规桶是相同的， 是为了减少扩容次数而引入的，如果一个通存满了，就会往溢出桶里面存。</p><p><img src="https://s2.loli.net/2022/02/09/IWD1iqacfs49G6z.png" alt="image-20220209173827731"></p><p>hmap结构体的最后有一个extra的字段，指向一个mapextra结构体，里面记录的都是溢出桶相关的信息。</p><p>nextoverflow指向下一个空闲溢出桶的位置overflow是一个slice记录已经使用的溢出桶的地址。noverflow记录溢出桶的数量。</p><p><img src="https://s2.loli.net/2022/02/09/zEGgkaMldbBhsUc.png" alt="image-20220209174312089"></p><p>例子：</p><p>没有太听懂</p><p><img src="https://s2.loli.net/2022/02/09/sZWtrPfIXyg8a3k.png" alt="image-20220209174935575"></p><h2 id="函数调用栈（一）"><a href="#函数调用栈（一）" class="headerlink" title="函数调用栈（一）"></a>函数调用栈（一）</h2><p>我们根据编程语法定义的函数，会被编译为一堆机器指令，写入到可执行文件，程序执行的时候可执行文件加载到内存中。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>这些机器指令对应到虚拟地址空间中，位于代码段，如果在函数中调用另一个函数，编译器就会对应生成一条call指令，程序执行到这条指令时，就会跳转到被调用函数入口处开始执行，而每个函数的最后都有一条ret指令，负责在函数结束后条回到调用处继续执行。</p><p><img src="https://s2.loli.net/2022/02/10/uzJdXiTs4DKayc2.png" alt="image-20220210100718094"></p><p>函数执行的时候需要有足够的内存空间，用于存放局部变量，参数等数据，这段空间对应到虚拟地址空间的栈。栈只有一个口进出，先入栈的在底，后入栈的在顶，是一个后进先出的原则。</p><p>运行时栈上面的时高地址，向下增长，分配给函数的栈空间被称为函数栈帧，栈底通常称为栈基，栈顶又称为栈指针。在go语言中函数栈帧布局中，先是调用者栈基地址，然后是局部变量，然后是调用函数的返回值，最后是参数。</p><p>call指令只做两件事，第一将下一条指令的地址入栈，这就是返回地址，被调用函数执行结束后会跳回到这里，第二，跳转到被调用函数入口处执行，这后面就是被调用函数的栈帧了，所有函数栈帧布局都遵循统一的约定。所以被调用者是通过栈指针加上相应的偏移来定位到每个参数和返回值的。</p><p><img src="https://s2.loli.net/2022/02/10/nQeDIU9gLGuRwr4.png" alt="image-20220210110226909"></p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>程序执行的时候cpu用特殊的寄存器来存储运行时栈基和栈指针，同时也有指令指针寄存器用于存储下一条要执行的指令地址。</p><p>一般程序在编译的时候都会根据编写的代码把所有的程序按照代码编译进行入栈。但是在go语言中函数的栈帧不是这样逐步扩张的，而是一次性分配。</p><p><img src="https://s2.loli.net/2022/02/10/jKvPH1ERZgp48Cd.png" alt="image-20220210113049182"></p><h3 id="go语言的栈指针"><a href="#go语言的栈指针" class="headerlink" title="go语言的栈指针"></a>go语言的栈指针</h3><p>go语言在分配栈指针的时候，直接将栈指针移动到所需最大栈空间的位置，然后通过栈指针加上偏移值这种相对寻址方式使用函数栈帧，例如这里sp+16字节处存储3，sp+8字节处存储4.</p><p><img src="https://s2.loli.net/2022/02/10/BGOTw874diWlak2.png" alt="image-20220210113549934"></p><h3 id="go栈空间"><a href="#go栈空间" class="headerlink" title="go栈空间"></a>go栈空间</h3><p>一次分配主要是为了避免栈访问越界，如果初始分配的栈空间就这么大，如果函数栈是逐步扩张的，执行期间就可能发生栈的访问越界。函数的栈帧的大小在编译的时候是可以确定的，所以go语言的编译器会在函数的头部插入检测代码，如果发现需要进行“栈增长”，就会另外分配一段足够大的栈空间，并把原来的数据拷过来，原来的栈空间就释放了。</p><p><img src="https://s2.loli.net/2022/02/10/z4k5aAGmLrESjMg.png" alt="image-20220210114157631"></p><h3 id="go函数的call指令和ret指令"><a href="#go函数的call指令和ret指令" class="headerlink" title="go函数的call指令和ret指令"></a>go函数的call指令和ret指令</h3><p>一个函数A在a1处调用b1处的函数B，在跳转前，到了call指令这里作用有两点，第一把返回地址a2入栈保存起来，第二跳转到指令地址b1处，call指令就结束了，函数B就开始执行，这里是一个相对寻址。</p><p><img src="https://s2.loli.net/2022/02/10/tQnWD2LipbI3fyJ.png" alt="image-20220210114800037"></p><p>b1先分配足够大栈帧，所以栈指针挪到s7这里，b2这条指令要把调用者栈基s1存到sp+16字节的地方，接下来是b3，sp+16字节处，也就是函数B的栈基，把他存入bp寄存器，接下来就是执行函数B剩下的指令了。</p><p><img src="https://s2.loli.net/2022/02/10/FUnySiwYtjomWLJ.png" alt="image-20220210115300283"></p><p>在执行ret指令前编译器还会插入两条指令，</p><p>第一条，指令恢复调用者A的栈基地址，之前被存储在sp+16字节这里，第二条，释放自己的栈帧空间，分配时向下移动了多少，释放时就向上移动多少。</p><p>然后就到了ret指令了。作用也是两点，第一，弹出call执行压栈的返回地址，第二，跳转到这个返回地址，这个时候就可以从a2这个地方继续执行了。</p><p><img src="https://s2.loli.net/2022/02/10/cPU6QBkiwAnrXth.png" alt="image-20220210115753984"></p><p>简单来说，函数通过call指令来实现跳转，而每个函数开始时会分配栈帧，结束前又会释放自己的栈帧，ret指令又会吧栈恢复到calll之前的样子。 </p><p><img src="https://s2.loli.net/2022/02/10/hFLgZz2B3YKe8PR.png" alt="image-20220210135258972"></p><p>通过这些指令的配合能够实现函数的层层嵌套，，函数A调用函数B，B有调用C ，C又调用D 形成下图的栈</p><p><img src="https://s2.loli.net/2022/02/10/pLFRdnucg1Wr6GJ.png" alt="image-20220210135440658"></p><p>如果每次调用的都是A那就形成了递归的调用栈。</p><p><img src="https://s2.loli.net/2022/02/10/A7bNuYTLOiFhosc.png" alt="image-20220210135614786"></p><h2 id="函数调用栈（二）：传参和返回值"><a href="#函数调用栈（二）：传参和返回值" class="headerlink" title="函数调用栈（二）：传参和返回值"></a>函数调用栈（二）：传参和返回值</h2><h3 id="有参数的情况"><a href="#有参数的情况" class="headerlink" title="有参数的情况"></a>有参数的情况</h3><p>现在写一个方法去交换传入的两个值：（失败案例）</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 交换值的方法</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment">// 问题是这里传入的是拷贝值</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 输出的还是1，2，交换的是拷贝值。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过函数调用栈看看问题出在哪里，</p><p>先看看main函数，先分配局部变量存储空间，a=1,b=2，局部变量的后面就是给被调用函数传入的参数，需要传入两个整形参数。传参就是值的拷贝，参数的入栈顺序由右至左，先入栈第二个参数，在入栈第一个参数，返回值也是一样。调用者栈帧后面是call指令存入的返回地址，再下面分配的就是swap函数栈帧了。</p><p><img src="https://s2.loli.net/2022/02/10/BOIZzExcWqgUd2f.png" alt="image-20220210141434587"></p><p>当swap执行到这里的时候，需要交换两个参数的值，他的参数是拷贝的a,b值，也就是参数，交换的也是拷贝的值参数，但是返回打印的是局部变量的值。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>还是刚刚的例子，通过指针指向局部变量的值，修改的也是局部变量的值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 输出2，1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次通过函数调用栈理解一下</p><p>指针拷贝的是值地址，存储的也是值的地址。</p><p><img src="https://s2.loli.net/2022/02/10/cbyQiMvNU7Z3qj2.png" alt="image-20220210141806561"></p><p> 当函数执行到swap函数的时候传入值的地址，修改指向地址的参数，这一次就可以交换成功。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>通常我们认为返回值是通过寄存器传递，但是go语言支持多返回值，所以在栈上分配返回值空间更合适，看一个例子</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">incr</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token builtin">int</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// defer函数是在整个函数执行结束之前执行。</span>a<span class="token operator">++</span>b<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token operator">++</span>b <span class="token operator">=</span> a<span class="token keyword">return</span> b<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span>b <span class="token operator">=</span> <span class="token function">incr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 匿名返回值的情况</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//输出 0,1；这里的a,b按照道理来说应该是输出 2,2才是</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/10/g7nqHAs61QN39Jm.png" alt="image-20220210143435194"></p><p>注意：程序在执行defer函数之前会先进行赋值，当执行到return的时候局部变量b的值拷贝到返回值空间，然后执行defer函数，执行结束后把返回空间的值赋值给b,所以这里输出的为0，1</p><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>我们把这里返回值改成命名返回值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">incr</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 修改的是这里</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// defer函数是在整个函数执行结束之前执行。</span>a<span class="token operator">++</span>b<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token operator">++</span>b <span class="token operator">=</span> a<span class="token keyword">return</span> b<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span>b <span class="token operator">=</span> <span class="token function">incr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 输出 0,2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数栈的理解下是怎样运行的呢？</p><p>main函数的栈帧和上一个例子完全相同，但是到incr函数栈帧这里，没有局部变量，b就是返回空间的值。这里最终输出 0,2</p><p><img src="https://s2.loli.net/2022/02/10/Zixzo4hnFGpuTWL.png" alt="image-20220210145105314"></p><h3 id="调用多个函数的问题"><a href="#调用多个函数的问题" class="headerlink" title="调用多个函数的问题"></a>调用多个函数的问题</h3><p>如果一个函数调用了多个函数，我们知道不同的函数占用的栈空间是不同的，go语言中函数栈帧是一次性分配的，如果局部变量占一点，后面需要以最大的参数返回值空间为标准来分配空间，才能满足所有被调用函数的需求，所有如果遇到占用空间少的函数时，是通过栈指针相对寻址自己的参数和返回值 。</p><p><img src="https://s2.loli.net/2022/02/10/AqWkuCTFPjKgclb.png" alt="image-20220210145624786"></p><h2 id="go闭包"><a href="#go闭包" class="headerlink" title="go闭包"></a>go闭包</h2><p>在go语言中函数就是头等对象，可以作为参数传递，可以做函数的返回值，也可以绑定到变量。go语言称这样的参数、返回值或变量为<code>function value</code> 。</p><p>函数的指令在编译期间生成，而function value 本质上是一个指针，但是并不直接指向函数指令入口，而是指向一个<code>runtime.funcval</code>结构体，这个结构体里只有一个地址，就是这个函数指令的入口地址。</p><p><img src="https://s2.loli.net/2022/02/10/km2zHYyudw6C4nV.png" alt="image-20220210150241085"></p><p>例子：</p><p>函数A赋值给f1和f2，这个时候编译器会做出优化，让f1和f2共用一个<code>funcval</code>结构体。f1和f2本身存储的是addr2执行起始地址，找到addr1为<code>funcval</code>结构体，拿到函数入口地址然后跳转执行，这里是一个二级指针来进行的调用。</p><p><img src="https://s2.loli.net/2022/02/10/PxRWsGtd9DKMkLH.png" alt="image-20220210151425488"></p><p>使用二级指针主要是为了处理闭包的情况。</p><h2 id="go方法"><a href="#go方法" class="headerlink" title="go方法"></a>go方法</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 定义类型A</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 关联一个方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Hi "</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name<span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> A<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//就可以通过这个类型A的变量来调用这个方法，实际上和下面的调用方法是一样的。</span><span class="token comment">// 输出 Hi eggo</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里是方法的接受者，</span>    <span class="token comment">// 输出 Hi eggo</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/21/CqfOd6rBYGytLc9.png" alt="image-20220221151051072"></p><p>go语言中函数类型只和参数与返回值相关</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NameOfA</span><span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Hi!"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name<span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t1 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>t2 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>NameOfA<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span> <span class="token comment">// true，证明了方法本质上就是普通的函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义类型A</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 关联一个方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pa <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>pa<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Hi "</span> <span class="token operator">+</span> pa<span class="token punctuation">.</span>name<span class="token keyword">return</span> pa<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> A<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>pa <span class="token operator">:=</span> <span class="token operator">&amp;</span>afmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 输出 Hi eggo 因为是打印的局部变量的存储的值。局部变量存储的值</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 Hi Hi eggo  这里打印的是局部变量地址指向的内容。局部变量存储的地址。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/21/MHcDQpNvizYXbUl.png" alt="image-20220221151157157"></p><p>如果在编译期间不能拿到地址的字面量，不能通过语法糖来进行转换了。所以不能通过编译。</p><p><img src="https://s2.loli.net/2022/02/21/g4r2YpNyc1eD8xb.png" alt="image-20220221151238102"></p><h3 id="方法赋给变量"><a href="#方法赋给变量" class="headerlink" title="方法赋给变量"></a>方法赋给变量</h3><p>go语言中函数作为变量、参数、返回值时都是以<code>Function Value</code>的形式存在的。</p><p>闭包也只是通过捕获列表的<code>Function Value</code>而已</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义类型A</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 关联一个方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> A<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>f1 <span class="token operator">:=</span> A<span class="token punctuation">.</span>GetName <span class="token comment">//f1就是一个方法表达式实际上和其他的代码</span><span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>f2 <span class="token operator">:=</span> a<span class="token punctuation">.</span>GetName <span class="token comment">// 方法变量，</span>    <span class="token comment">// 这里就相当于形成了双指针，形成了闭包。</span>    <span class="token comment">// 这里的f2只是一个局部变量，但是和f1的生命周期是一致的，所以编译器会做出优化，把它转化为类型A的方法调用并传入a作为参数</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>f1实际上和这段代码相同</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetName</span><span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> A<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>f1 <span class="token operator">:=</span> GetName<span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以f1本质上其实也是一个 <code>Function Value</code> 也就是一个<code>funcval</code>结构体的指针</p><p>f2是是一个方法变量</p><h3 id="再举一个例子"><a href="#再举一个例子" class="headerlink" title="再举一个例子"></a>再举一个例子</h3><p><img src="https://s2.loli.net/2022/02/21/iYnckVw4gUj9aNT.png" alt="image-20220221152700476"></p><p>这里的f3是一个闭包结构</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义类型A</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 关联一个方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">GetFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> A<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo in GetFunc"</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>GetName <span class="token comment">// 这里返回的其实就是A.GetName(a)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> A<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo in main"</span><span class="token punctuation">&#125;</span>f2 <span class="token operator">:=</span> a<span class="token punctuation">.</span>GetName   <span class="token comment">// 可以看到和GetFunc是一致的</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// eggo in main</span>f3 <span class="token operator">:=</span> <span class="token function">GetFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// eggo in GetFunc</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：从本质上来讲，方法表达式和方法变量都是Function Value</p><h2 id="脱胎换股的defer"><a href="#脱胎换股的defer" class="headerlink" title="脱胎换股的defer"></a>脱胎换股的defer</h2><p>defer会在函数返回之前倒叙执行</p><p>defer执行对应两部分内容，<code>deferproc</code>负责把要执行的函数信息保存起来，我们称之为 <code>defer</code>注册，<code>deferproc</code>函数会返回0。</p><p><code>defer</code>注册后程序会继续执行后面的逻辑，直到返回之前通过<code>deferreturn</code>执行注册的<code>defer</code>函数。正式因为先注册，后调用，才实现了defer延迟执行的效果。（可能是编译器，编译的结果）</p><p><img src="https://s2.loli.net/2022/02/21/RFW8tqZ6mVMLpxY.png" alt="image-20220221154357006"></p><p><code>defer</code>信息会注册到一个链表，而当前执行的 <code>goroutine</code>持有这个链表的头指针，每个goroutine在运行时都有一个对应的结构体 <code>g</code>其中有一个字段指向<code>defer</code>链表头，而 <code>defer</code>链表连起来的是一个一个 <code>_defer结构体</code>，新注册的<code>defer</code>会添加到链表的头，执行的时候也是从头开始，所以 <code>defer</code>才会表现为倒序执行。</p><p><img src="https://s2.loli.net/2022/02/21/fYE5djKQe93IDk6.png" alt="image-20220221155542711"></p><h3 id="defer结构体"><a href="#defer结构体" class="headerlink" title="defer结构体"></a>defer结构体</h3><p><img src="https://s2.loli.net/2022/02/21/FS4dEwZGzmtBjHW.png" alt="image-20220221160338130"></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>siz     <span class="token builtin">int32</span>    <span class="token comment">// 参数和返回值共占用多少字节</span>started <span class="token builtin">bool</span>     <span class="token comment">// 是否已经执行</span>sp      <span class="token builtin">uintptr</span>  <span class="token comment">// 注册这个defer的函数栈指针</span>pc      <span class="token builtin">uintptr</span>  <span class="token comment">// deferproc的返回地址</span>fn      <span class="token operator">*</span>funcval <span class="token comment">// 是要注册的function value</span>_panic  <span class="token operator">*</span>_paniclink    <span class="token operator">*</span>_defer <span class="token comment">//连接到前一个注册的_defer结构体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先注册，后执行"><a href="#先注册，后执行" class="headerlink" title="先注册，后执行"></a>先注册，后执行</h3><p>例子：<code>deferproc</code>函数执行时，需要堆分配一段空间，用于存放defer结构体，添加完成后这个 <code>_defer</code>结构体就被添加到 <code>defer</code>链表头，<code>deferproc</code>注册结束。</p><p><img src="https://s2.loli.net/2022/02/21/zRCoIBPNML6UKpi.png" alt="image-20220221160931262"></p><p>实际上go语言会预分配不同规格的<code>defer</code>池，执行的时候会从空闲的 <code>_defer</code>中取出一个来用。没有合适的就重新分配。</p><p><img src="https://s2.loli.net/2022/02/21/mShlyuLrgvQCO3o.png" alt="image-20220221161010642"></p><h3 id="defer执行例子："><a href="#defer执行例子：" class="headerlink" title="defer执行例子："></a>defer执行例子：</h3><p>defer注册函数是A，defer链表存储的也是A的funcval指针，因为注册的时候需要保存A的参数，就必须拿到B的返回值，所以这里的B是顺序执行。B返回2</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>a<span class="token operator">++</span><span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">defer</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//defer注册函数是A，defer链表存储的也是A的funcval指针，因为注册的时候需要保存A的参数，就必须拿到B的返回值，所以这里的B是顺序执行。B返回2</span>a<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/21/8qzcgSvwxNosIpm.png" alt="image-20220221163805527"></p><p>这里大致讲解了go 1.12 版本的 <code>defer</code>基本的设计思路，存在比较明显的问题，就是慢。</p><p>第一个原因是defer结构体的堆分配，即使有预分配的<code>deferpool</code>，也需要去堆上获取与释放，而且参数还要在堆上来回拷贝。</p><p>第二个原因是使用链表注册<code>defer</code>信息，而链表本身的操作就比较慢，所以在1.13和1.14中进行了优化。</p><h2 id="脱胎换股的defer（二）"><a href="#脱胎换股的defer（二）" class="headerlink" title="脱胎换股的defer（二）"></a>脱胎换股的defer（二）</h2><p>这里可以进阶看</p><p>1.13版本的defer性能提升了30%</p><p>1.14版本提升了一个数量级，代价就是，<code>panic</code>变得更慢了，但是 <code>panic</code>发生的几率要比 <code>defer</code>低。</p><p><img src="https://s2.loli.net/2022/02/21/LQMRUx6GNS2JCBd.png" alt="image-20220221164944559"></p><h2 id="panic和recover"><a href="#panic和recover" class="headerlink" title="panic和recover"></a>panic和recover</h2><p>经过上面的学习已经知道，在当前执行的<code>goroutine</code>中有一个 <code>defer</code>链表的头指针，其实它也有一个<code>panic</code>链表头指针。基本和<code>defer</code>一样</p><p><img src="https://s2.loli.net/2022/02/21/bxLAvFkCwsVDWaq.png" alt="image-20220221170805088"></p><p>例子：</p><p>执行到箭头这里时发生了<code>panic</code>后面的代码就不会执行了，而是进入<code>panic</code>处理逻辑，</p><p><img src="https://s2.loli.net/2022/02/21/u72obcT6mwPWVHa.png" alt="image-20220221170941435"></p><p>这里会在panic链表中增加一项，这里记为panicA就是当前执行的<code>panic</code>，然后执行<code>defer</code>链表。</p><p><img src="https://s2.loli.net/2022/02/21/2EhmRL6xMd3WSvO.png" alt="image-20220221171135760"></p><p><code>panic</code>执行<code>defer</code>时会把<code>started</code>置为<code>true</code>，并把<code>_panic</code>字段指向当前执行的<code>panic</code></p><p><img src="https://s2.loli.net/2022/02/21/T37kq6dvPYOUhDV.png" alt="image-20220221171408586"></p><p>如果函数A2能正常结束，就继续执行下一个<code>defer</code>，如果再次发生<code>panic</code>，后面的代码也不会执行，然后再<code>panic</code>链表头插入一个新的<code>panic</code></p><p><img src="https://s2.loli.net/2022/02/21/qSV6YIoxDlujPkm.png" alt="image-20220221171441504"></p><p><img src="https://s2.loli.net/2022/02/21/qMhtkW45njSGac1.png" alt="image-20220221171747445"></p><p>这个时候<code>panicA</code>被终止，A1这一项也要被移除，<code>defer</code>链表为空。接下来就该打印<code>panic</code>异常信息了。打印信息时是从<code>panic</code>发生的顺序逐个输出。</p><p>关注点：</p><ul><li>第一个是panic执行defer函数的方式，是先标记，后释放，目的是为了终止之前发生的panic</li><li>第二个是异常信息的输出方式，所有还在panic链表上的项都会被输出，顺序与panic发生的顺序一致。</li></ul><h3 id="panic结构体"><a href="#panic结构体" class="headerlink" title="_panic结构体"></a>_panic结构体</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> _panic <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>argp      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 存储当前要执行的defer的函数参数地址</span>arg       <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// panic函数自己的参数</span>link      <span class="token operator">*</span>_panic        <span class="token comment">// 链接到之前发生的panic</span>recovered <span class="token builtin">bool</span>           <span class="token comment">// 表示panic是否被恢复</span>aborted   <span class="token builtin">bool</span>           <span class="token comment">// 标识panic是否被终止</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>panic打印信息时会从链表尾部开始，也就是按照<code>panic</code>发生的顺序逐个输出。</p><h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><p>recover函数逻辑很简单，它只做一件事，就是把当前执行的<code>panic</code>置为已恢复，也就是把它的<code>recovered</code>字段置换为<code>true</code>其他的都不管。</p><p>这里还是需要多听听。 </p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t T<span class="token punctuation">)</span> <span class="token function">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t <span class="token operator">:=</span> T<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>t<span class="token punctuation">.</span><span class="token function">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 方法本质上就是函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法本质上就是函数，只不过在调用时接受者会作为第一个参数传入，在编译的时候没有问题，但是在执行的时候反射、接口动态派发、类型断言，这些语言特性或者机制如何动态的获取数据类型信息呢？</p><p>我们定义的类型一般都是自定义类型，都需要定义元素信息，成为类型元数据，每种类型的元数据都是全局唯一的，一起构成了go语言的“类型系统”。</p><p>每个类型元数据都需要记录类型名称、大小、对其边界、是否是自定义类型等，是每个元数据都需要记录的信息，所以都放到了<code>runtime._type</code>结构体中作为每个类型元数据的<code>Header</code>, 在<code>_type</code>之后存储的才是额外需要描述的信息，使用<code>*_type</code>可以指向其存储的元素的类型元数据如果是<code>string</code>就指向<code>string</code>类型的元数据。</p><p>如果是自定义类型，后面还会有一个<code>uncommontype</code>结构体</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> _type <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>size       <span class="token builtin">uintptr</span>ptrdata    <span class="token builtin">uintptr</span>hash       <span class="token builtin">uint32</span>tflag      tflagalign      <span class="token builtin">uint8</span>fieldalign <span class="token builtin">uint8</span>kind       <span class="token builtin">uint8</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> slicetype <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>typ  _typeelem <span class="token operator">*</span>_type <span class="token comment">// 指向上面的类型</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义类型</span><span class="token keyword">type</span> uncommontype <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>pkgpath nameOff <span class="token comment">// 记录类型所在的包路径</span>mocount <span class="token builtin">uint16</span>  <span class="token comment">//记录了类型关联到多少个方法</span>moff    <span class="token builtin">uint32</span>  <span class="token comment">// 记录了这些方法元数据组成的数组的偏移值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义类型例子："><a href="#自定义类型例子：" class="headerlink" title="自定义类型例子："></a>自定义类型例子：</h3><p>我们给 <code>myslice</code>自定义了<code>Len</code>和<code>Cap</code>两个方法 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> myslice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ms myslice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ms myslice<span class="token punctuation">)</span> <span class="token function">Cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>uncommontype</code>我们可以通过<code>moff</code>找到方法元数据在哪里，比如方法<code>Len</code>地址是<code>addrA</code>那地址加上<code>moff</code>偏移值就可以找到<code>myslice</code>关联的方法元数据数组。</p><p><img src="https://s2.loli.net/2022/02/22/LQeG7IO8SoNpctY.png" alt="image-20220222103018273"></p><p>使用类型元数据，看看其他的写法，</p><p>例子：</p><p><code>MyType1</code> 这种写法叫做给<code>int32</code>类型起个别名，实际上<code>MyType1</code>和<code>int32</code>会关联到同一个类型元数据。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MyType1 <span class="token operator">=</span> <span class="token builtin">int32</span> <span class="token comment">//这种写法叫做给int32类型起个别名</span><span class="token keyword">type</span> MyType2 <span class="token builtin">int32</span> <span class="token comment">//这种写法是基于已有类型创建一个新类型，相当于自立门户。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/22/O1GxbWS4atA5sQB.png" alt="image-20220222103655321"></p><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>先看看空接口，空接口类型可以接受任意类型的数据，只要记录这个数据在哪里，是什么类型的就足够了。</p><p><code>_type</code>指向接口的动态类型元数据，<code>data</code>指向接口的动态值</p><p>空接口在赋值以前<code>_type</code>和<code>data</code>都是<code>nil</code></p><p><img src="https://s2.loli.net/2022/02/22/mrxDfRC2agUcWsi.png" alt="image-20220222105043601"></p><p><img src="https://s2.loli.net/2022/02/22/ZUOyLKp4A7lanHV.png" alt="image-20220222105531060"></p><h3 id="非空接口"><a href="#非空接口" class="headerlink" title="非空接口"></a>非空接口</h3><p>非空接口就是有方法列表的接口类型，一个变量想要赋值给一个非空接口类型，必须要实现该接口要求的所有方法才行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>tab  <span class="token operator">*</span>itab <span class="token comment">// 指向 itab 结构体</span>data unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">&#125;</span><span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>inter <span class="token operator">*</span>interfacetype <span class="token comment">// 指向 interface 接口元数据</span>_type <span class="token operator">*</span>_type         <span class="token comment">// 指向接口的动态类型元数据</span>hash  <span class="token builtin">uint32</span>         <span class="token comment">// 从动态类型元数据中拷贝来的类型哈希值，用于快速判断类型是否相等时使用</span><span class="token boolean">_</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>fun   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span> <span class="token comment">// 方法地址数组</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> interfacetype <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>typ     _typepkgpath namemhdr    <span class="token punctuation">[</span><span class="token punctuation">]</span>imethod <span class="token comment">// 接口要求的方法列表就记录在这里</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/22/nm6BpsWg9PNxAwj.png" alt="image-20220222110525975"></p><p>例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> rw io<span class="token punctuation">.</span>ReadWriterf<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"eggo.txt"</span><span class="token punctuation">)</span>rw <span class="token operator">=</span> f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在赋值以前<code>data</code>为<code>nil</code>，<code>tab</code>也为<code>nil</code>。如果把<code>f</code>赋值给<code>rw</code>此时<code>rw</code>的动态值就是<code>f</code>而<code>tab</code>也会指向一个<code>itab</code>的结构体。</p><p><img src="https://s2.loli.net/2022/02/22/J2ab8YIzQe7mOyE.png" alt="image-20220222115613837"></p><h3 id="itab其他点"><a href="#itab其他点" class="headerlink" title="itab其他点"></a>itab其他点</h3><p>一点接口类型确定，动态类型确定了，那<code>itab</code>的内容就不会改变了，所以<code>itab</code>结构体一般是可复用的，go语言会把用到的<code>itab</code>结构体缓存起来，并以接口类型和动态类型的组合为<code>key</code>，以<code>itab</code>结构体指针为<code>value</code>，构造一个<code>hash</code>表用于存储<code>itab</code>表的缓存信息。</p><p><img src="https://s2.loli.net/2022/02/22/yf7vpblszrDWKc3.png" alt="image-20220222142951680"></p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>接口可以分为空接口和非空接口，类型断言作用在接口值之上，可以是空接口或非空接口，而断言的目标类型可以是具体类型或非空接口类型。所以可以组合出四种断言类型。</p><h3 id="第一种：空接口-具体类型"><a href="#第一种：空接口-具体类型" class="headerlink" title="第一种：空接口.(具体类型)"></a>第一种：空接口.(具体类型)</h3><p>空接口.(具体类型)</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> e <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>r<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">)</span>  <span class="token comment">// e.(*os.File)是要判断e的动态类型是否是*os.File </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实只要确定<code>e</code>的<code>_type</code>是否指向<code>*os.File</code>的类型元数据就好了，go语言中每一种类型的元数据都是全局唯一的。</p><p><img src="https://s2.loli.net/2022/02/22/LqmnosHVw9Aax2i.png" alt="image-20220222144018088"></p><p>如果是</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> e <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>f<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token operator">:=</span>os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.go"</span><span class="token punctuation">)</span>e <span class="token operator">=</span> fr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/22/XyEPzBMvmNLu2kw.png" alt="image-20220222144543750"></p><p><img src="https://s2.loli.net/2022/02/22/vrDjcKUgha1J4Pz.png" alt="image-20220222144514694"></p><h3 id="第二种-：非空接口-具体类型"><a href="#第二种-：非空接口-具体类型" class="headerlink" title="第二种 ：非空接口.(具体类型)"></a>第二种 ：非空接口.(具体类型)</h3><p>例子</p><p><code>rw.(*os.File)</code>是要判断rw的动态类型是否为<code>*os.File</code>.</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> rw io<span class="token punctuation">.</span>ReadWriterf<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"eggo.txt"</span><span class="token punctuation">)</span>rw <span class="token operator">=</span> fr<span class="token punctuation">,</span>ok <span class="token operator">:=</span> rw<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">)</span> <span class="token comment">// rw.(*os.File)是要判断rw的动态类型是否为*os.File</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/22/NZ91MGlLeXzqhRS.png" alt="image-20220222145242148"></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> rw io<span class="token punctuation">.</span>ReadWriterf <span class="token operator">:=</span> eggo<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span><span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>rw <span class="token operator">=</span> fr<span class="token punctuation">,</span>ok <span class="token operator">:=</span> rw<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">)</span> <span class="token comment">// rw.(*os.File)是要判断rw的动态类型是否为*os.File</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/22/nx8sUQf5k9JAlvC.png" alt="image-20220222145441827"></p><h3 id="第三种：空接口-非空接口"><a href="#第三种：空接口-非空接口" class="headerlink" title="第三种：空接口.(非空接口)"></a>第三种：空接口.(非空接口)</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> e <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>rw<span class="token punctuation">,</span>ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>ReadWriter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>e.(io.ReadWriter)</code>是要判断<code>e</code>的动态类型是否实现了<code>io.ReadWriter</code>接口</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> e <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>f<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span>e <span class="token operator">=</span> frw<span class="token punctuation">,</span>ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>ReadWriter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/22/AuznsJ1or9lfbj2.png" alt="image-20220222165114770"></p><p>这里可以用<code>itab</code>缓存，可以先在<code>itab</code>中查找一下，如果没有<code>io.ReadWriter</code>和<code>*os.File</code>对应的<code>itab</code>结构体，再去检查<code>*os.File</code>的方法列表。如果查找到了对应的<code>itab</code>指针，也需要判断<code>itab.fun[0]</code>是否等于0，因为断言失败的类型组合其对应的<code>itab</code>结构体也会被缓存起来，只是会把<code>itab.fun[0]</code>置为0，用以标识这里的动态类型并没有实现对应的接口。</p><p><img src="https://s2.loli.net/2022/02/23/UVQNcvljSRe8K7w.png" alt="image-20220223105050527"></p><p>如果类型为<code>string</code>:</p><p><img src="https://s2.loli.net/2022/02/23/7RNDmIbpr6OiwuH.png" alt="image-20220223105315947"></p><h3 id="第四种：非空接口-非空接口"><a href="#第四种：非空接口-非空接口" class="headerlink" title="第四种：非空接口.(非空接口)"></a>第四种：非空接口.(非空接口)</h3><p>！未完需要再次听。</p><h2 id="reflect反射"><a href="#reflect反射" class="headerlink" title="reflect反射"></a>reflect反射</h2><p>反射的作用就是把类型元数据暴露给用户使用</p><p>介绍了<code>runtime</code>包中类型接口的结构，但是这些类型都是未导出的，所以<code>reflect</code>包中自己又定义了一套，这些类型的定义在两个包中是保持一致的。</p><p><code>reflect</code>包中提供一个<code>TypeOf</code>函数用于获取一个变量的类型信息，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TypeOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> Type <span class="token punctuation">&#123;</span> <span class="token comment">// 这里接受一个空接口类型的参数，返回一个reflect.Type类型的值</span>eface <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>emptyInterface<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> toType<span class="token punctuation">&#123;</span>eface<span class="token punctuation">.</span>typ<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><p>在<code>eggo</code>包中定义一个类型，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> eggo<span class="token keyword">type</span> Eggo <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Eggo<span class="token punctuation">)</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Eggo<span class="token punctuation">)</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>main</code>包中使用这个类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"reflect"</span><span class="token string">"./eggo"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> eggo<span class="token punctuation">.</span>Eggo<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"eggo"</span><span class="token punctuation">&#125;</span>t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//Eggo 2</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过反射看看这个类型有多少个可以导出的方法</p><p>！！！也没有看完呢</p><h2 id="GPM（一）goroutine的执行过程"><a href="#GPM（一）goroutine的执行过程" class="headerlink" title="GPM（一）goroutine的执行过程"></a>GPM（一）goroutine的执行过程</h2><p>在不同平台下，程序执行的入口是不同的，在进行检查和初始化等工作后，会以<code>runtime.main</code>为执行入口创建<code>main goroutine</code>，<code>main goroutine</code>执行起来后才会调用<code>main.main</code></p><p><img src="https://s2.loli.net/2022/02/23/iPIWfV6k1ZmoCLM.png" alt="image-20220223112840147"></p><p>在go语言中协程对应的数据结构是<code>runtime.g</code>，工作线程对应的数据结构是<code>runtime.m</code></p><p><img src="https://s2.loli.net/2022/02/23/TP2b91EuiAUqFh8.png" alt="image-20220223113104895"></p><p>全局变量g0就是主协程对应的g，和其他的协程不同它的协程栈实际上是在主协程栈上分配的。全局变量m0就是主线程对应的m。g0持有m0的指针，m0里也记录着g0的指针。一开始m0上执行的协程正是g0，m0和g0就联系起来了。</p><p><img src="https://s2.loli.net/2022/02/23/lcjzNKo6QO8egpW.png" alt="image-20220223113940082"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>golang实战 对树形结构的数据进行遍历</title>
      <link href="/2021/11/10/golang/golang-dui-shu-xing-jie-gou-de-shu-ju-jin-xing-bian-li/"/>
      <url>/2021/11/10/golang/golang-dui-shu-xing-jie-gou-de-shu-ju-jin-xing-bian-li/</url>
      
        <content type="html"><![CDATA[<h2 id="golang-实战-对树形结构的数据进行遍历"><a href="#golang-实战-对树形结构的数据进行遍历" class="headerlink" title="golang 实战  对树形结构的数据进行遍历"></a>golang 实战  对树形结构的数据进行遍历</h2><p>刚刚学习了一门新的语言，网络参考了一篇对树形结构的数据进行遍历，准备自己动手操作一下。</p><h3 id="生成示例文件"><a href="#生成示例文件" class="headerlink" title="生成示例文件"></a>生成示例文件</h3><p>因为都python 比较熟悉还是使用python 进行示例文件的生成，生成1000个文件夹，每个文件夹里面有1000个空文件。准备运用 <code>golang</code> 数出文件的个数。</p><p>建立一个python文件 <code>files.py</code> 代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">mkfiles</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">dir</span><span class="token punctuation">&#125;</span></span><span class="token string">/test</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token operator">+</span> <span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>dirs<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> maindir<span class="token operator">=</span><span class="token string">"files/"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    mkdir<span class="token punctuation">(</span>maindir<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token punctuation">:</span>        mkdir<span class="token punctuation">(</span>maindir <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">:</span>            mkfiles<span class="token punctuation">(</span>maindir <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python files.py<span class="token number">0</span>:00:44.356719<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行代码，使用python 生成1000个文件夹，每个文件夹里面有1000个空文件，</p><h3 id="使用单线程读取文件数目"><a href="#使用单线程读取文件数目" class="headerlink" title="使用单线程读取文件数目"></a>使用单线程读取文件数目</h3><p>定义go执行文件 <code>main.go</code>，编写golang 代码读取特定文件夹的文件数目。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> matches <span class="token builtin">int</span> <span class="token comment">// 文件的个数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"/home/theing/go/go_study/study/"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>matches<span class="token punctuation">,</span> <span class="token string">"matches"</span><span class="token punctuation">)</span> <span class="token comment">//打印找到的文件个数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">search</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>files<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果没有错误</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> file <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">&#123;</span> <span class="token comment">//遍历这些文件</span>name <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> file<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果是文件夹就递归调用打开</span><span class="token function">search</span><span class="token punctuation">(</span>path <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>matches<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">pwd</span> /home/theing/go/go_study/study$ go run main.go $ <span class="token comment"># 或者 go build main.go &amp;&amp; ./main</span><span class="token number">1000001</span> matches<span class="token number">3</span>.082080437s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三秒就完成了？？？</p><h3 id="golang-使用-多线程读取文件"><a href="#golang-使用-多线程读取文件" class="headerlink" title="golang 使用 多线程读取文件"></a>golang 使用 多线程读取文件</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> matches <span class="token builtin">int</span> <span class="token comment">// 文件的个数</span><span class="token keyword">var</span> workerCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">//用于定义当前工人的数量</span><span class="token keyword">var</span> maxWorkerCount <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment">//最大的工人数量</span><span class="token keyword">var</span> searchRequest <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// 定义一个channel用来包工头指派活</span><span class="token keyword">var</span> workerDone <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>      <span class="token comment">// 用户工人之间的交流，自己是否干完活了</span><span class="token keyword">var</span> foundMatch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>      <span class="token comment">// 用来传输工人找到了多少结果的消息</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>workerCount <span class="token operator">=</span> <span class="token number">1</span>                             <span class="token comment">//初始化当前的工人数 至少都是一个</span><span class="token keyword">go</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"/home/theing/go/go_study/study/"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//因为需要等待所有的工人把活干完主函数才能结束，所有加一个bool值</span><span class="token function">waitForWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//等待这些工人干活</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>matches<span class="token punctuation">,</span> <span class="token string">"matches"</span><span class="token punctuation">)</span> <span class="token comment">//打印找到的文件个数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">waitForWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span> <span class="token comment">//写一个无线循环，不停的接收</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> path <span class="token operator">:=</span> <span class="token operator">&lt;-</span>searchRequest<span class="token punctuation">:</span> <span class="token comment">// 指派一个工人去这里</span>workerCount<span class="token operator">++</span>         <span class="token comment">// 当前工人数量加1</span><span class="token keyword">go</span> <span class="token function">search</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true 表示正在干活</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>workerDone<span class="token punctuation">:</span> <span class="token comment">//如果有工人做完了</span>workerCount<span class="token operator">--</span>         <span class="token comment">//工人数量减一</span><span class="token keyword">if</span> workerCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果工人数量减为零了就结束</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>foundMatch<span class="token punctuation">:</span> <span class="token comment">//找到了结果就加一</span>matches<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">search</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> master <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>files<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果没有错误</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> file <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">&#123;</span> <span class="token comment">//遍历这些文件</span>name <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> file<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果是文件夹就递归调用打开</span><span class="token keyword">if</span> workerCount <span class="token operator">&lt;</span> maxWorkerCount <span class="token punctuation">&#123;</span> <span class="token comment">// 看看当前剩余的工人</span>searchRequest <span class="token operator">&lt;-</span> path <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token comment">//如果有的话就叫包工头给这里指派一个工人</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">search</span><span class="token punctuation">(</span>path<span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 当没有工人的时候就传 false 。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>foundMatch <span class="token operator">&lt;-</span> <span class="token boolean">true</span> <span class="token comment">// 工人喊话，我找到了</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> master <span class="token punctuation">&#123;</span>workerDone <span class="token operator">&lt;-</span> <span class="token boolean">true</span> <span class="token comment">// 如果是在gorount中运行的函数，for循环完毕了就告诉包工头干完了。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go run main.go<span class="token number">1000001</span> matches<span class="token number">1</span>.63184361s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.6秒，，，爽歪歪</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>golang 基础语法的使用</title>
      <link href="/2021/11/08/golang/golang-ji-chu-yu-fa-de-shi-yong/"/>
      <url>/2021/11/08/golang/golang-ji-chu-yu-fa-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="golang数组"><a href="#golang数组" class="headerlink" title="golang数组"></a>golang数组</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token comment">//定义一个大小为3的元组</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>  <span class="token comment">//设定初始值</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 一般的写法，可以设定初始值，让go 自己判定元素多少。</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>  <span class="token comment">//更改值</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">//末尾添加值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang映射（词典）"><a href="#golang映射（词典）" class="headerlink" title="golang映射（词典）"></a>golang映射（词典）</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">numbers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//关键词的数据类型和对应的数据类型。</span>numbers<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>numbers<span class="token punctuation">[</span><span class="token string">"two"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token function">delete</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span> <span class="token comment">// 通过delete关键词删除一个映射</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token keyword">map</span><span class="token punctuation">[</span>two<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang-for循环"><a href="#golang-for循环" class="headerlink" title="golang for循环"></a>golang for循环</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> <span class="token comment">//三部分，第一个部分是整个循环开始之前需要执行的代码，第二部分是程序执行的判断条件，决定是否执行下去，第三部分是循环结束后执行的代码。</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// for循环中的任意一个循环都可以被忽略。</span><span class="token punctuation">&#125;</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="golang-利用for遍历数组"><a href="#golang-利用for遍历数组" class="headerlink" title="golang 利用for遍历数组"></a>golang 利用for遍历数组</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">4</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="golang-利用for遍历词典"><a href="#golang-利用for遍历词典" class="headerlink" title="golang 利用for遍历词典"></a>golang 利用for遍历词典</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>numbers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//关键词的数据类型和对应的数据类型。</span>numbers<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>numbers<span class="token punctuation">[</span><span class="token string">"two"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> numbers <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>one <span class="token number">1</span>two <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="go-函数"><a href="#go-函数" class="headerlink" title="go 函数"></a>go 函数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"># 例<span class="token number">1</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span># 例<span class="token number">2</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// fmt.Println(add(1, 3))</span>sum<span class="token punctuation">,</span> product <span class="token operator">:=</span> <span class="token function">do_math</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">do_math</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//可以接收两个值，返回两个值</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang-闭包"><a href="#golang-闭包" class="headerlink" title="golang 闭包"></a>golang 闭包</h2><pre class="line-numbers language-none"><code class="language-none">pass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="golang-指针"><a href="#golang-指针" class="headerlink" title="golang 指针"></a>golang 指针</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> <span class="token number">0</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token comment">// 传入的是这个参数的地址</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>n <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这个'*'表示接收一个指向这个整数的指针，也就是地址</span><span class="token operator">*</span>n <span class="token operator">=</span> <span class="token operator">*</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//通过这个地址的值进行更改数据</span><span class="token punctuation">&#125;</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang-自定义数据类型"><a href="#golang-自定义数据类型" class="headerlink" title="golang 自定义数据类型"></a>golang 自定义数据类型</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">//定义自己的数据类型</span>name <span class="token builtin">string</span>age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newCat <span class="token operator">:=</span> cat<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Kitty"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>newCat<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">//重新定义</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>newCat<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Kitty <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang-给自己的类型定义方法"><a href="#golang-给自己的类型定义方法" class="headerlink" title="golang 给自己的类型定义方法"></a>golang 给自己的类型定义方法</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MyFloat <span class="token builtin">float64</span>  <span class="token comment">//定义自己的方法类型</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>MyFloat<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//也可以运用指针传参</span><span class="token operator">*</span>n <span class="token operator">=</span> <span class="token operator">*</span>n <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n MyFloat<span class="token punctuation">)</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">show</span><span class="token punctuation">(</span>n MyFloat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a MyFloat <span class="token operator">=</span> <span class="token number">1.5</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 方法类型传参</span><span class="token function">show</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="golang-实例"><a href="#golang-实例" class="headerlink" title="golang 实例"></a>golang 实例</h1><h2 id="普通的函数功能，问题是如何同时进行呢？"><a href="#普通的函数功能，问题是如何同时进行呢？" class="headerlink" title="普通的函数功能，问题是如何同时进行呢？"></a>普通的函数功能，问题是如何同时进行呢？</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">count</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> animal <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> animal<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 睡眠5秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"羊"</span><span class="token punctuation">)</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"牛"</span><span class="token punctuation">)</span>  <span class="token comment">//这里是按照顺序执行的。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="goroutine，问题是不知道还有多少goroutine没有执行完成"><a href="#goroutine，问题是不知道还有多少goroutine没有执行完成" class="headerlink" title="goroutine，问题是不知道还有多少goroutine没有执行完成"></a>goroutine，问题是不知道还有多少goroutine没有执行完成</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">count</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> animal <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> animal<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 睡眠5秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"🚗"</span><span class="token punctuation">)</span> <span class="token comment">//可以创建一个goroutine，其实本质就是协程。</span><span class="token keyword">go</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"🛹"</span><span class="token punctuation">)</span> <span class="token comment">//当这里创建两个goroutine的时候，main函数会直接执行完毕，期间创建的所有的goroutine都会被销毁。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="waitGroup，问题是两个程序是各干各的"><a href="#waitGroup，问题是两个程序是各干各的" class="headerlink" title="waitGroup，问题是两个程序是各干各的"></a>waitGroup，问题是两个程序是各干各的</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">count</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> animal <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> animal<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 睡眠5秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroupwg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//这个waitgroup其实就是一个计数器</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"🚗"</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果这个协程完成了计数器就减一</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"🛹"</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//等计数器的值等于0的时候就继续执行，也就是完成计算</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang-channel-信道"><a href="#golang-channel-信道" class="headerlink" title="golang channel 信道"></a>golang channel 信道</h2><p>如果需要进行交流，可以加一个全局变量，但是问题是每一个goroutine可能是不同cpu的，可能存在同时更改同一块内存的情况。</p><p>通常其他的语言比如python就是全局锁，同一时间，只能是一个线程操作一块内存地址。</p><p>但是golang 做法是不同的，它的设计者采用了communicating Sequential Processes的一种方法，（我们不通过共享内存来交流，我们要通过交流来共享内存）</p><p>注意的是：往channel里发送一条消息，和从channel里面收听一条消息，都会阻塞代码的运行。当我要发送一条消息的时候，我会一直在这里等着，直到这条消息在channel的另一边被接收了。相反如果我想从channel里面接收一条消息，如果有人发送消息，我就会接收到，但是如果没有人发送消息，我就会在这里一直等着。就可以利用这种阻塞代码的特性，来同步我们的代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">count</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> animal <span class="token builtin">string</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 让count函数多接收一个参数channel</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>c <span class="token operator">&lt;-</span> animaltime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 睡眠5秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>channel <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"🚗"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 因为只能接收一条消息，所以写一个for循环让他不停的接收消息</span>message <span class="token operator">:=</span> <span class="token operator">&lt;-</span>channelfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>🚗🚗🚗🚗🚗fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>goroutine <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">chan</span> receive<span class="token punctuation">]</span><span class="token punctuation">:</span>main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">/</span>home<span class="token operator">/</span>theing<span class="token operator">/</span>study<span class="token operator">/</span>go_study<span class="token operator">/</span>hello<span class="token operator">/</span>test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">18</span> <span class="token operator">+</span><span class="token number">0xba</span>exit status <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述出现了错误，因为count函数不会有新的值传进去，但是main函数里面一个channel一直等着那边的消息。所以给出了报错。方法就是关闭channel。</p><h2 id="通过-channel传过来是否可以通讯的布尔值是否关闭channel"><a href="#通过-channel传过来是否可以通讯的布尔值是否关闭channel" class="headerlink" title="通过 channel传过来是否可以通讯的布尔值是否关闭channel"></a>通过 channel传过来是否可以通讯的布尔值是否关闭channel</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">count</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> animal <span class="token builtin">string</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 让count函数多接收一个参数channel</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>c <span class="token operator">&lt;-</span> animaltime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 睡眠5秒</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//for循环完毕了就关闭这个channel</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>channel <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"🚗"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 因为只能接收一条消息，所以写一个for循环让他不停的接收消息</span>message<span class="token punctuation">,</span> open <span class="token operator">:=</span> <span class="token operator">&lt;-</span>channel <span class="token comment">//每个channel都有一个布尔值，判断这个channel是否还可以通讯。</span><span class="token keyword">if</span> <span class="token operator">!</span>open <span class="token punctuation">&#123;</span>                 <span class="token comment">//通过这个布尔值判断是否接收消息。</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过for循环判断channel"><a href="#通过for循环判断channel" class="headerlink" title="通过for循环判断channel"></a>通过for循环判断channel</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">count</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> animal <span class="token builtin">string</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 让count函数多接收一个参数channel</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>c <span class="token operator">&lt;-</span> animaltime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 睡眠5秒</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//for循环完毕了就关闭这个channel</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>channel <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"🚗"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token keyword">for</span> message <span class="token operator">:=</span> <span class="token keyword">range</span> channel <span class="token punctuation">&#123;</span> <span class="token comment">//也可以用for循环进行判断，如果channel关闭了for循环就退出了。</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过channel交流"><a href="#通过channel交流" class="headerlink" title="通过channel交流"></a>通过channel交流</h2><p>问题是阻塞代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">//创建两个channel</span>c2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>c1 <span class="token operator">&lt;-</span> <span class="token string">"🚗"</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//每次发送数据间隔半秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>c2 <span class="token operator">&lt;-</span> <span class="token string">"🚍"</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">//每次发送数据间隔2秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c1<span class="token punctuation">)</span> <span class="token comment">//发送数据和接收数据都会阻塞代码的运行</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">//创建两个channel</span>c2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>c1 <span class="token operator">&lt;-</span> <span class="token string">"🚗"</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//每次发送数据间隔半秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>c2 <span class="token operator">&lt;-</span> <span class="token string">"🚍"</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">//每次发送数据间隔2秒</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span> <span class="token comment">//运用select 看那个channel不是阻塞的就运行那个。</span><span class="token keyword">case</span> msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c1<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">case</span> msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c2<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实践，对树形结构的数据进行遍历，搜索文件"><a href="#实践，对树形结构的数据进行遍历，搜索文件" class="headerlink" title="实践，对树形结构的数据进行遍历，搜索文件"></a>实践，对树形结构的数据进行遍历，搜索文件</h2><pre class="line-numbers language-none"><code class="language-none">pass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>buffer带有缓存的channel</p><p>contast包裹，可以很好的管理goroutine</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go mod 模块管理</title>
      <link href="/2021/11/08/golang/go-mod-mo-kuai-guan-li/"/>
      <url>/2021/11/08/golang/go-mod-mo-kuai-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="go-mod-模块管理"><a href="#go-mod-模块管理" class="headerlink" title="go mod 模块管理"></a>go mod 模块管理</h2><p>mod 是go语言的项目开发模块管理方法</p><h3 id="安装golang"><a href="#安装golang" class="headerlink" title="安装golang"></a>安装golang</h3><p>go 依赖管理的步骤命令</p><p>开启go model</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go <span class="token function">env</span> -w <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on  <span class="token comment">#开启model功能</span>$ go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct  <span class="token comment"># 开启代理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重要命令：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go mod init 初始化项目目录$ go build 编译项目，依赖库的安装$ go list -m list 查看当前项目依赖库$ go get 安装项目的依赖库$ go mod tidy 删除不需要的依赖库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> go_study$ <span class="token builtin class-name">cd</span> go_study$ go mod init theing/go_study <span class="token comment"># 相当于初始化项目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在创建的main文件中，引入包，如果mod文件中没有</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go get rsc.io/quote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简历一个main文件。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"rsc.io/quote"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> quote<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译项目文件"><a href="#编译项目文件" class="headerlink" title="编译项目文件"></a>编译项目文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go build$ ./go_studyAhoy, world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看项目依赖"><a href="#查看项目依赖" class="headerlink" title="查看项目依赖"></a>查看项目依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go list -m alltheing/go_studygolang.org/x/text v0.0.0-20170915032832-14c0d48ead0crsc.io/quote v1.5.2rsc.io/sampler v1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go get github.com/golang/glog  <span class="token comment"># 没有使用也是可以的</span>$ go list -m alltheing/go_studygithub.com/golang/glog v1.0.0golang.org/x/text v0.0.0-20170915032832-14c0d48ead0crsc.io/quote v1.5.2rsc.io/sampler v1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除项目不使用的依赖库"><a href="#删除项目不使用的依赖库" class="headerlink" title="删除项目不使用的依赖库"></a>删除项目不使用的依赖库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go mod tidy$ go list -m alltheing/go_studygolang.org/x/text v0.0.0-20170915032832-14c0d48ead0crsc.io/quote v1.5.2rsc.io/sampler v1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mod </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang开发环境和proxy代理</title>
      <link href="/2021/11/01/golang/golang-kai-fa-huan-jing-he-proxy-dai-li/"/>
      <url>/2021/11/01/golang/golang-kai-fa-huan-jing-he-proxy-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="golang开发环境和-proxy代理"><a href="#golang开发环境和-proxy代理" class="headerlink" title="golang开发环境和 proxy代理"></a>golang开发环境和 proxy代理</h2><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p><a href="https://goproxy.io/zh/">https://goproxy.io/zh/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置 GOPROXY 环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span class="token comment"># 还可以设置不走 proxy 的私有仓库或组，多个用逗号相隔（可选）</span><span class="token comment"># export GOPRIVATE=git.mycompany.com,github.com/my/private</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如果您使用的 Go 版本是 <span class="token number">1.13</span> 及以上 （推荐）-w 为设置命令-u 为一个还原命令go <span class="token function">env</span> -w <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on  go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去环境变量中配置代理</p><p>如果您使用的是 MAC/Linux,在<code>.bashrc</code>添加如下环境变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://proxy.golang.com.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您使用的是 Windows 系统, 终端中执行如下 Go 命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://proxy.golang.com.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置完在cmd中go env 能看到是否配置GOPROXY成功</p><h4 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h4><p>ctrl + shift + p   </p><p>输入 go    选中install/update Tools 选中所有 点击确认</p><p>注意：可能会出现没有gcc g++等编译器安装就可以了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc g++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是使用 GOPROXY=<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a>  成功案例</p><p><img src="https://i.loli.net/2021/11/08/qkbnCUPAeulDJfM.png" alt="image-20211108093637111"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>创建一个go.mod 项目说明文件，命令行 <code>go mod init 项目名</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go mod init theing/go_study<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建helloworld.go 文件，敲入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>go run ./helloworld.go</code> 输出测试</p></li></ol><h2 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go <span class="token function">env</span>  <span class="token comment"># 可以查看env 信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较重要的有：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token string">"/home/theing/go"</span><span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span><span class="token string">"https://goproxy.cn,direct"</span><span class="token assign-left variable">GOROOT</span><span class="token operator">=</span><span class="token string">"/usr/local/go"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql 案例分享</title>
      <link href="/2021/10/11/shu-ju-ku/postgresql-an-li-fen-xiang/"/>
      <url>/2021/10/11/shu-ju-ku/postgresql-an-li-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="postgresql-sql处理时间-timestamp-to-string"><a href="#postgresql-sql处理时间-timestamp-to-string" class="headerlink" title="postgresql sql处理时间 timestamp to string"></a>postgresql sql处理时间 timestamp to string</h2><p><a href="https://www.postgresql.org/docs/9.1/functions-formatting.html">参考文档</a>  timestame to string 的特定格式</p><p>在碰到时间需要处理成字符串的时候可以用这个去解决不能转换成json文档的问题。可以直接在sql层面改成sql 去解决问题。</p><p>格式</p><pre class="line-numbers language-none"><code class="language-none">to_char(&#96;timestamp&#96;, &#96;text&#96;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>uuid <span class="token keyword">AS</span> mes_uuid<span class="token punctuation">,</span>title<span class="token punctuation">,</span>message<span class="token punctuation">,</span>target_users<span class="token punctuation">,</span>ms_type<span class="token punctuation">,</span>to_char<span class="token punctuation">(</span>build_time<span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH12:MI:SS'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> build_time<span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">FROM</span>messages <span class="token keyword">WHERE</span>ms_type <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token string">'sys_bc'</span><span class="token punctuation">,</span> <span class="token string">'sys_trg'</span> <span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token keyword">status</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> build_time <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="postgresql-Left-join-联表查询"><a href="#postgresql-Left-join-联表查询" class="headerlink" title="postgresql Left join 联表查询"></a>postgresql Left join 联表查询</h2><p>问题，当时遇到了一个问题：</p><p>我想在这里直接查出学校的名称，但是如果联表用inner join 的话 只能匹配到so_uuid存在的学校内容了</p><p><img src="https://i.loli.net/2021/10/11/AuBwv75VoHxhc3s.png" alt="image-20211011170830442"></p><p><img src="https://i.loli.net/2021/10/11/aTvb7zKSrJX5xun.png" alt="image-20211011170840597"></p><h3 id="解决方法使用-left-join"><a href="#解决方法使用-left-join" class="headerlink" title="解决方法使用 left join"></a>解决方法使用 left join</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>ms<span class="token punctuation">.</span>uuid <span class="token keyword">AS</span> mes_uuid<span class="token punctuation">,</span>ms<span class="token punctuation">.</span>so_uuid<span class="token punctuation">,</span>ms<span class="token punctuation">.</span>build_time<span class="token punctuation">,</span>so<span class="token punctuation">.</span>name <span class="token keyword">AS</span> school_name<span class="token punctuation">,</span>so<span class="token punctuation">.</span>logo_uuid<span class="token punctuation">,</span>ms<span class="token punctuation">.</span>title<span class="token punctuation">,</span>ms<span class="token punctuation">.</span>message<span class="token punctuation">,</span>ms<span class="token punctuation">.</span>target_users<span class="token punctuation">,</span>ms<span class="token punctuation">.</span>ms_type<span class="token punctuation">,</span>ms<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token keyword">FROM</span>messages <span class="token keyword">AS</span> ms    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> school_org <span class="token keyword">AS</span> so <span class="token keyword">ON</span> <span class="token punctuation">(</span> so<span class="token punctuation">.</span>uuid <span class="token operator">=</span> ms<span class="token punctuation">.</span>so_uuid <span class="token punctuation">)</span><span class="token keyword">WHERE</span><span class="token punctuation">(</span> ms<span class="token punctuation">.</span>ms_type <span class="token operator">=</span> <span class="token string">'sys_bc'</span> <span class="token operator">AND</span> ms<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'normal'</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span> ms<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'normal'</span> <span class="token operator">AND</span> ms<span class="token punctuation">.</span>ms_type <span class="token operator">=</span> <span class="token string">'sch_bc'</span> <span class="token operator">AND</span> ms<span class="token punctuation">.</span>so_uuid <span class="token operator">=</span> <span class="token string">'SLOIQLMFX0ECI9R1GJRZCDCA1SW6BFFH'</span> <span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span> ms<span class="token punctuation">.</span>ms_type <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'sch_trg'</span><span class="token punctuation">,</span><span class="token string">'sys_trg'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> ms<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'normal'</span> <span class="token operator">AND</span> ms<span class="token punctuation">.</span>target_users ? <span class="token string">'大王'</span> <span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ms<span class="token punctuation">.</span>build_time <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="postgresql-匹配列表中的内容"><a href="#postgresql-匹配列表中的内容" class="headerlink" title="postgresql 匹配列表中的内容"></a>postgresql 匹配列表中的内容</h2><p>数据结构为：</p><p><img src="https://i.loli.net/2021/10/11/Ci734tuzOwJ5Lfj.png" alt="image-20211011171500757"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- create table rabbits (rabbit_id bigserial primary key, info jsonb not null);</span><span class="token comment">-- insert into rabbits (info) values</span><span class="token comment">--   ('&#123;"name":"Henry", "food":["lettuce","carrots"]&#125;'),</span><span class="token comment">--   ('&#123;"name":"Herald","food":["carrots","zucchini"]&#125;'),</span><span class="token comment">--   ('&#123;"name":"Helen", "food":["lettuce","cheese"]&#125;');</span><span class="token comment">-- select info->>'name' AS name from rabbits where (info->'food')::jsonb ? 'carrots';</span><span class="token comment">-- </span><span class="token comment">-- -- 自己写的示例 </span><span class="token comment">-- -- where target_users ? '小王'</span><span class="token comment">-- alter table rabbits alter info type jsonb using info::jsonb;</span><span class="token comment">-- create index on rabbits using gin ((info->'food'));</span><span class="token comment">-- select info->>'name' from rabbits where info->'food' ? 'carrots';</span><span class="token comment">-- 直接就是</span><span class="token keyword">where</span> target_users ? <span class="token string">'小王'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jsonb格式-通过-gt-gt-gt-获取需要的值"><a href="#jsonb格式-通过-gt-gt-gt-获取需要的值" class="headerlink" title="jsonb格式 通过-&gt;&gt;, -&gt;获取需要的值"></a>jsonb格式 通过<code>-&gt;&gt;, -&gt;</code>获取需要的值</h2><p>一般使用-&gt;&gt;来获取数据，没有<code>&quot;&quot;</code>双引号。</p><p>查询jsonb中的值：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>users<span class="token punctuation">.</span>username<span class="token punctuation">,</span>users<span class="token punctuation">.</span>real_name<span class="token punctuation">,</span>users<span class="token punctuation">.</span>ext_info <span class="token operator">-</span><span class="token operator">>></span> <span class="token string">'base_infor'</span> <span class="token keyword">as</span> base_info<span class="token keyword">FROM</span>users<span class="token keyword">WHERE</span>users<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'normal'</span> <span class="token operator">AND</span> users<span class="token punctuation">.</span>ext_info <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'ischeck'</span> @<span class="token operator">></span> <span class="token string">'"1"'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/11/4SC95yeYPMQ7LJV.png" alt="image-20211011172801493"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>supervisor 多进程守护的使用和配置</title>
      <link href="/2021/08/03/yun-wei/supervisor-duo-jin-cheng-shou-hu-de-shi-yong-he-pei-zhi/"/>
      <url>/2021/08/03/yun-wei/supervisor-duo-jin-cheng-shou-hu-de-shi-yong-he-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="supervisor-多进程守护的使用和配置"><a href="#supervisor-多进程守护的使用和配置" class="headerlink" title="supervisor 多进程守护的使用和配置"></a>supervisor 多进程守护的使用和配置</h1><h2 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pip <span class="token function">install</span> supervisor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="apt-安装"><a href="#apt-安装" class="headerlink" title="apt 安装"></a>apt 安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> supervisor$ <span class="token function">whereis</span> supervisor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建参考配置文件"><a href="#创建参考配置文件" class="headerlink" title="创建参考配置文件"></a>创建参考配置文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> echo_supervisord_conf <span class="token operator">></span> default.conf  <span class="token comment"># 指定到当前目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="supervisord-使用自己的配置文件"><a href="#supervisord-使用自己的配置文件" class="headerlink" title="supervisord 使用自己的配置文件"></a>supervisord 使用自己的配置文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/theing/supervisor_conf.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisord -c supervisor.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生效的主要是配置文件里面的这一段，可以根据自己的需求进行更改。</span><span class="token punctuation">[</span>supervisord<span class="token punctuation">]</span><span class="token assign-left variable">logfile</span><span class="token operator">=</span>/home/ubuntu/workspace/supervisor/supervisord.log <span class="token punctuation">;</span> main log <span class="token function">file</span><span class="token punctuation">;</span> default <span class="token variable">$CWD</span>/supervisord.log<span class="token assign-left variable">logfile_maxbytes</span><span class="token operator">=</span>50MB        <span class="token punctuation">;</span> max main logfile bytes b4 rotation<span class="token punctuation">;</span> default 50MB<span class="token assign-left variable">logfile_backups</span><span class="token operator">=</span><span class="token number">10</span>           <span class="token punctuation">;</span> <span class="token comment"># of main logfile backups; 0 means none, default 10</span><span class="token assign-left variable">loglevel</span><span class="token operator">=</span>info                <span class="token punctuation">;</span> log level<span class="token punctuation">;</span> default info<span class="token punctuation">;</span> others: debug,warn,trace<span class="token assign-left variable">pidfile</span><span class="token operator">=</span>/home/ubuntu/workspace/supervisor/supervisord.pid <span class="token punctuation">;</span> supervisord pidfile<span class="token punctuation">;</span> default supervisord.pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重新加载-supervisorctl-配置文件"><a href="#重新加载-supervisorctl-配置文件" class="headerlink" title="重新加载 supervisorctl 配置文件"></a>重新加载 supervisorctl 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisorctl reload<span class="token function">sudo</span> supervisorctl restart all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="supervisorctl主要命令"><a href="#supervisorctl主要命令" class="headerlink" title="supervisorctl主要命令"></a>supervisorctl主要命令</h2><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">supervisorctl start program_name</td><td align="center">启动某个进程</td></tr><tr><td align="center">supervisorctl stop program_name</td><td align="center">停止某个进程</td></tr><tr><td align="center">supervisorctl restart program_name</td><td align="center">重启某个进程</td></tr><tr><td align="center">supervisorctl status program_name</td><td align="center">查看某个进程的状态</td></tr><tr><td align="center">supervisorctl stop all</td><td align="center">停止全部进程</td></tr><tr><td align="center">supervisorctl reload</td><td align="center">载入最新的配置文件，重启所有进程</td></tr><tr><td align="center">supervisorctl update</td><td align="center">根据最新的配置，重启配置更改过的进程，未更新的进程不受影响</td></tr><tr><td align="center">supervisorctl stop all</td><td align="center">停止所有进程</td></tr><tr><td align="center">supervisorctl start all</td><td align="center">启动所有进程</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生效的主要是着两段</span><span class="token punctuation">[</span>supervisorctl<span class="token punctuation">]</span><span class="token assign-left variable">serverurl</span><span class="token operator">=</span>unix:///home/ubuntu/workspace/supervisor/supervisor.sock <span class="token punctuation">;</span> use a unix:// URL  <span class="token keyword">for</span> a unix socket<span class="token punctuation">[</span>program:zcj_tornado<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token assign-left variable">command</span><span class="token operator">=</span>python main.py --port<span class="token operator">=</span><span class="token number">80</span>%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>02d    <span class="token punctuation">;</span> the program <span class="token punctuation">(</span>relative uses <span class="token environment constant">PATH</span>, can take args<span class="token punctuation">)</span><span class="token assign-left variable">command</span><span class="token operator">=</span>bash -c <span class="token string">"source /home/ubuntu/miniconda3/bin/activate &amp;&amp; conda activate tornado &amp;&amp; python /home/ubuntu/workspace/tornado/main.py"</span> --port<span class="token operator">=</span><span class="token number">80</span>%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>02d    <span class="token punctuation">;</span> the program <span class="token punctuation">(</span>relative uses <span class="token environment constant">PATH</span>, can take args<span class="token punctuation">)</span><span class="token assign-left variable">process_name</span><span class="token operator">=</span>%<span class="token punctuation">(</span>program_name<span class="token punctuation">)</span>s-80%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>02d <span class="token punctuation">;</span> process_name <span class="token function">expr</span> <span class="token punctuation">(</span>default %<span class="token punctuation">(</span>program_name<span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token assign-left variable">numprocs</span><span class="token operator">=</span><span class="token number">2</span>                    <span class="token punctuation">;</span> number of processes copies to start <span class="token punctuation">(</span>def <span class="token number">1</span><span class="token punctuation">)</span><span class="token assign-left variable">directory</span><span class="token operator">=</span>/home/ubuntu/workspace/cop_main/                <span class="token punctuation">;</span> directory to cwd to before <span class="token builtin class-name">exec</span> <span class="token punctuation">(</span>def no cwd<span class="token punctuation">)</span><span class="token assign-left variable">autostart</span><span class="token operator">=</span>false                <span class="token punctuation">;</span> supervisord守护程序启动时自动启动子进程<span class="token assign-left variable">autorestart</span><span class="token operator">=</span>false              <span class="token punctuation">;</span> supervisord守护程序重启时自动重启子进程<span class="token assign-left variable">user</span><span class="token operator">=</span>ubuntu                 <span class="token punctuation">;</span> setuid to this UNIX account to run the program<span class="token assign-left variable">redirect_stderr</span><span class="token operator">=</span>true          <span class="token punctuation">;</span> redirect proc stderr to stdout <span class="token punctuation">(</span>default <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/home/ubuntu/workspace/supervisor/runtime-output/%<span class="token punctuation">(</span>program_name<span class="token punctuation">)</span>s-80%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>02d.log        <span class="token punctuation">;</span> stdout log path, NONE <span class="token keyword">for</span> none<span class="token punctuation">;</span> default AUTO<span class="token assign-left variable">stdout_logfile_maxbytes</span><span class="token operator">=</span>100MB   <span class="token punctuation">;</span> max <span class="token comment"># logfile bytes b4 rotation (default 50MB)</span><span class="token assign-left variable">stdout_logfile_backups</span><span class="token operator">=</span><span class="token number">9</span>     <span class="token punctuation">;</span> <span class="token comment"># of stdout logfile backups (0 means none, default 10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="supervisor管理进程的多个实例"><a href="#supervisor管理进程的多个实例" class="headerlink" title="supervisor管理进程的多个实例"></a>supervisor管理进程的多个实例</h3><p>在原来配置的基础之上，再加入进程数目以及相应进程的名字，如下</p><pre class="line-numbers language-none"><code class="language-none">process_name&#x3D;%(program_name)s_%(process_num)02dnumprocs&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以文件整个显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/supervisor/conf.d <span class="token comment"># cat far.conf </span><span class="token punctuation">[</span>program:far<span class="token punctuation">]</span><span class="token assign-left variable">process_name</span><span class="token operator">=</span>%<span class="token punctuation">(</span>program_name<span class="token punctuation">)</span>s_%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>02d  <span class="token comment"># 主要增加这两条就可以了</span><span class="token assign-left variable">numprocs</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">command</span><span class="token operator">=</span> <span class="token assign-left variable">directory</span><span class="token operator">=</span>/home/xugaoxiang/www<span class="token assign-left variable">autostart</span><span class="token operator">=</span>true<span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true<span class="token assign-left variable">user</span><span class="token operator">=</span>root<span class="token assign-left variable">redirect_stderr</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="supervisor的web化"><a href="#supervisor的web化" class="headerlink" title="supervisor的web化"></a>supervisor的web化</h3><p>首先需要编辑<code>/etc/supervisor/supervisor.conf</code>, 添加语句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>inet_http_server<span class="token punctuation">]</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:9001<span class="token punctuation">;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>theing<span class="token punctuation">;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>theing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序通过ip进行访问进程状态</p><p>问题：</p><pre class="line-numbers language-none"><code class="language-none">PermissionError: [Errno 13] Permission denied: &#39;&#x2F;home&#x2F;ubuntu&#x2F;workspace&#x2F;supervisor&#x2F;supervisord.log&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加<code>sudo</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除<code>supervisor.sock</code>文件</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程守护 </tag>
            
            <tag> supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git出现 LF will be replaced by CRLF的警告</title>
      <link href="/2021/07/27/qi-ta-za-xiang/git-chu-xian-lf-will-be-replaced-by-crlf-de-jing-gao/"/>
      <url>/2021/07/27/qi-ta-za-xiang/git-chu-xian-lf-will-be-replaced-by-crlf-de-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>在一次执行 <code>git add</code> 的时候出现了一个奇怪的警告。</p><pre class="line-numbers language-none"><code class="language-none">warning: LF will be replaced by CRLF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查阅发现是linux和win之间的差异导致的。在Unix系统中，行的末尾用行提要(LF)表示。在Windows中，用回车(CR)和线路馈送(LF)来表示线条(CRLF)。当您从从Unix系统上传的git获得代码时，它们只会有一个LF。</p><p>如果是win10下解决方法就是执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>以下来自<a href="https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important">stackoverflow</a>的一篇回答</p><p>如果您正在Windows上编程，并且与其他人一起工作(反之亦然)，您可能会在某一时刻遇到行结束问题。这是因为Windows对其文件中的新行使用回车字符和行提要字符，而Mac和Linux系统只使用linefeed字符。这是一个微妙但令人难以置信的跨平台工作的事实；Windows上的许多编辑器默默地用crlf替换现有的LF样式行尾，或者在用户点击Enter键时插入两个行尾字符。</p><p>当您将文件添加到索引中时，GIT可以通过将CRLF行尾自动转换为LF来处理这个问题，反之亦然，当它将代码签出到您的文件系统时。可以使用core.autocrlf设置打开此功能。如果您在Windows机器上，将其设置为true–这将在签出代码时将LF结尾转换为CRLF：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global core.autocrlf <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您所在的Linux或Mac系统使用LF行结束，那么您不希望Git在签出文件时自动转换它们；但是，如果有CRLF结束的文件意外地被引入，那么您可能希望Git修复它。您可以告诉Git在提交时将CRLF转换为LF，但通过将core.autocrlf设置为输入而不是相反的方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global core.autocrlf input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此设置应该让您在Windows签出中保留CRLF结束，但在Mac和Linux系统以及存储库中使用LF结束。</p><p>如果您是一个只执行Windows项目的Windows程序员，那么您可以关闭此功能，通过将配置值设置为false来记录存储库中的回车情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRLF </tag>
            
            <tag> LF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy爬取每日必应壁纸</title>
      <link href="/2021/07/24/pa-chong/scrapy-pa-qu-mei-ri-biying-bi-zhi/"/>
      <url>/2021/07/24/pa-chong/scrapy-pa-qu-mei-ri-biying-bi-zhi/</url>
      
        <content type="html"><![CDATA[<p>因为对博客壁纸不太满意，搜寻了大多数壁纸，但都不是很好看，最终锁定了必应的每日壁纸。决定爬取下来用于博客的美化。</p><span id="more"></span><h2 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h2><p>思路：查看<code>url</code>的生成规律，得到页面的<code>rul</code>，通过<code>xpath</code>得到图片的<code>src</code>连接，就能得到单个页面的所有图片的<code>src</code>链接的一个列表。通过循环获得图片。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="需要下载的页"><a href="#需要下载的页" class="headerlink" title="需要下载的页"></a>需要下载的页</h3><p>先写一个方法获得自己需要爬取的页码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_user_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    输入需要下载的页码    返回一个页码的list    '''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入需要下载的页码，像这样"4，6，8"，用逗号分开，或者中间加个减号表示范围，像这样"4-7"'</span><span class="token punctuation">)</span>    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        start_end_ <span class="token operator">=</span> user_input        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需要下载的页码为:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start_end_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'-'</span> <span class="token keyword">in</span> user_input<span class="token punctuation">:</span>            test <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>user_input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            start_end_ <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需要下载的页码为:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start_end_<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            start_end_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> user_input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需要下载的页码为:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start_end_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> start_end_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成需要爬取的url"><a href="#生成需要爬取的url" class="headerlink" title="生成需要爬取的url"></a>生成需要爬取的<code>url</code></h3><p>打开必应壁纸的链接发现每页的链接为：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;bing.ioliu.cn&#x2F;?p&#x3D;1https:&#x2F;&#x2F;bing.ioliu.cn&#x2F;?p&#x3D;2...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动生成<code>url</code>链接方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_page_urls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''返回需要爬取的url'''</span>    all_page_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start_end_ <span class="token operator">=</span> get_user_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> start_end_<span class="token punctuation">:</span>        all_page_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'https://bing.ioliu.cn/?p=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> all_page_urls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取图片和名称"><a href="#获取图片和名称" class="headerlink" title="获取图片和名称"></a>获取图片和名称</h3><p>f12查看图片链接可以看到图片的地址，复制<code>xpath</code>地址</p><p><img src="https://i.loli.net/2021/07/25/1BjQsR9wakrlKnf.png" alt="image-20210725132944701"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 发现图片链接均为以下形式：</span><span class="token comment"># /html/body/div[3]/div[2]/div/img</span><span class="token comment"># /html/body/div[3]/div[5]/div/img</span><span class="token comment"># 图片名称为</span><span class="token comment"># /html/body/div[3]/div[2]/div/div[1]/h3/text()</span><span class="token comment"># /html/body/div[3]/div[5]/div/div[1]/h3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接获得图片的所有链接，得到一个列表，通过循环就可以获得图片了2333.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img_url <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//img/@src'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_imges</span><span class="token punctuation">(</span>img_list<span class="token punctuation">,</span>header<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_list <span class="token operator">=</span> img_list<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'640x480'</span><span class="token punctuation">,</span> <span class="token string">'1920x1080'</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_list<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">return</span> img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是图片名称不好匹配，<code>xpath</code>得到的<code>div</code>中间有个数字，不好把握，写个方法直接循环得了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">imgs_name</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span>img_number<span class="token punctuation">,</span>page_number<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[-,$()#+&amp;*，/：]'</span><span class="token punctuation">)</span>    html_text <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[3]/div["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>img_number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]/div/div[1]/h3/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html_text_format <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>html_text<span class="token punctuation">)</span>    img_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">+</span> img_number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>html_text_format<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载"</span><span class="token punctuation">,</span>img_name<span class="token punctuation">)</span>    <span class="token keyword">return</span> img_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过主方法循环调用方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">&#125;</span>    page_number <span class="token operator">=</span> <span class="token number">0</span>    start_end <span class="token operator">=</span> get_page_urls<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep_time <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> page_url <span class="token keyword">in</span> start_end<span class="token punctuation">:</span>        img_number <span class="token operator">=</span> <span class="token number">1</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>page_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text         html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        img_url <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//img/@src'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./bing_wallpaper2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'./bing_wallpaper2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载第&#123;&#125;页图片'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>start_end<span class="token punctuation">[</span>page_number<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> img_list <span class="token keyword">in</span> img_url<span class="token punctuation">:</span>            img <span class="token operator">=</span> get_imges<span class="token punctuation">(</span>img_list<span class="token punctuation">,</span>header<span class="token punctuation">)</span>            img_name <span class="token operator">=</span> imgs_name<span class="token punctuation">(</span>html<span class="token punctuation">,</span>img_number<span class="token punctuation">,</span>page_number<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./bing_wallpaper2/'</span> <span class="token operator">+</span> img_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> save_img<span class="token punctuation">:</span>                <span class="token comment"># 写入图片数据</span>                save_img<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                img_number <span class="token operator">+=</span> <span class="token number">1</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        page_number <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为必应有自己的反扒机制，如果爬行太快，会被禁用ip地址，出现403的报错。所以每次爬行一个页面最好是停留一段时间，<code>time.sleep()</code>。</p><p>脚本完整代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">get_user_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    输入需要下载的页码    返回一个页码的list    '''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入需要下载的页码，像这样"4，6，8"，用逗号分开，或者中间加个减号表示范围，像这样"4-7"'</span><span class="token punctuation">)</span>    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        start_end_ <span class="token operator">=</span> user_input        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需要下载的页码为:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start_end_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'-'</span> <span class="token keyword">in</span> user_input<span class="token punctuation">:</span>            test <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>user_input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            start_end_ <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需要下载的页码为:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start_end_<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            start_end_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> user_input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需要下载的页码为:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start_end_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> start_end_<span class="token keyword">def</span> <span class="token function">get_page_urls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''返回需要爬取的url'''</span>    all_page_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start_end_ <span class="token operator">=</span> get_user_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> start_end_<span class="token punctuation">:</span>        all_page_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'https://bing.ioliu.cn/?p=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> all_page_urls<span class="token keyword">def</span> <span class="token function">get_imges</span><span class="token punctuation">(</span>img_list<span class="token punctuation">,</span>header<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_list <span class="token operator">=</span> img_list<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'640x480'</span><span class="token punctuation">,</span> <span class="token string">'1920x1080'</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_list<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">imgs_name</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span>img_number<span class="token punctuation">,</span>page_number<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[-,$()#+&amp;*，/：]'</span><span class="token punctuation">)</span>    html_text <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[3]/div["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>img_number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]/div/div[1]/h3/text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html_text_format <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>html_text<span class="token punctuation">)</span>    img_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">+</span> img_number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>html_text_format<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载"</span><span class="token punctuation">,</span>img_name<span class="token punctuation">)</span>    <span class="token keyword">return</span> img_name    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">&#125;</span>    page_number <span class="token operator">=</span> <span class="token number">0</span>    start_end <span class="token operator">=</span> get_page_urls<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep_time <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> page_url <span class="token keyword">in</span> start_end<span class="token punctuation">:</span>        img_number <span class="token operator">=</span> <span class="token number">1</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>page_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        img_url <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//img/@src'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./bing_wallpaper2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'./bing_wallpaper2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载第&#123;&#125;页图片'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>start_end<span class="token punctuation">[</span>page_number<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> img_list <span class="token keyword">in</span> img_url<span class="token punctuation">:</span>            img <span class="token operator">=</span> get_imges<span class="token punctuation">(</span>img_list<span class="token punctuation">,</span>header<span class="token punctuation">)</span>            img_name <span class="token operator">=</span> imgs_name<span class="token punctuation">(</span>html<span class="token punctuation">,</span>img_number<span class="token punctuation">,</span>page_number<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./bing_wallpaper2/'</span> <span class="token operator">+</span> img_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> save_img<span class="token punctuation">:</span>                <span class="token comment"># 写入图片数据</span>                save_img<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                img_number <span class="token operator">+=</span> <span class="token number">1</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        page_number <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 添加douban书单影片</title>
      <link href="/2021/07/23/bo-ke/hexo-tian-jia-douban-shu-dan-ying-pian/"/>
      <url>/2021/07/23/bo-ke/hexo-tian-jia-douban-shu-dan-ying-pian/</url>
      
        <content type="html"><![CDATA[<p>添加书单评阅</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-douban --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">douban:  user: ******  <span class="token comment"># 登录后在个人主页，url中获取</span>  builtin: <span class="token boolean">false</span>  <span class="token comment"># </span>  book:    title: <span class="token string">'This is my book title'</span>    quote: <span class="token string">'This is my book quote'</span>  movie:    title: <span class="token string">'This is my movie title'</span>    quote: <span class="token string">'This is my movie quote'</span>  game:    title: <span class="token string">'This is my game title'</span>    quote: <span class="token string">'This is my game quote'</span>  timeout: <span class="token number">10000</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code>，也就是book、game、movie。</p><p><strong>需要注意的是</strong>，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code>，自己也可以通过修改<code>bashrc</code>文件解决。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo douban -hUsage: hexo doubanDescription:Generate pages from doubanOptions:  -b, --books   Generate douban books only  -g, --games   Generate douban games only  -m, --movies  Generate douban movies only<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果配置了<code>builtin</code>参数为<code>true</code>，那么除了可以使用<code>hexo douban</code>命令之外，<code>hexo g</code>或<code>hexo s</code>也内嵌了生成页面的功能。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>如果是使用nodejs v14版本的可能会遇到如下错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  <span class="token number">0</span> books have been loaded <span class="token keyword">in</span> <span class="token number">1933</span> ms, because you are offline or your network is badINFO  <span class="token number">0</span> movies have been loaded <span class="token keyword">in</span> <span class="token number">1945</span> ms, because you are offline or your network is badINFO  <span class="token number">0</span> games have been loaded <span class="token keyword">in</span> <span class="token number">2102</span> ms, because you are offline or your network is bad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以切换 nodejs v12 解决问题，以下使用nvm环境管理工具实现。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nvm list * <span class="token number">14.14</span>.0 <span class="token punctuation">(</span>Currently using <span class="token number">64</span>-bit executable<span class="token punctuation">)</span>  <span class="token number">12.18</span>.4$ nvm use <span class="token number">12.18</span>.4Now using node v12.18.4 <span class="token punctuation">(</span><span class="token number">64</span>-bit<span class="token punctuation">)</span>$ node -vv12.18.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>善用时间</title>
      <link href="/2021/07/21/he-jiu-chi-rou/shan-yong-shi-jian/"/>
      <url>/2021/07/21/he-jiu-chi-rou/shan-yong-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>一次听课所记</p><span id="more"></span><p>在听一次公开课的时候偶然听到一个老师上课，在上课之前他拿出了一个瓶子。说到：如果说这个瓶子就是我们所有的时间，现在我们要把它填满。然后老师在里面倒了些高尔夫球，问同学们满了没有，同学思索着说满了，但是老师又拿出了些小石子倒进了瓶子里，又问同学们满了没有？同学说说，满了，老师摇摇头拿出了一罐沙子倒进了瓶子里，笑着问这次满了没有？同学们坚定的点头满了，然后老师又笑着摇摇手指头，拿出了些啤酒开盖倒了进去，，，</p><p>老师只是通过这个事情让我们明白，事情也是分重要不重要的。</p><p>比如人生很重要的事包括你的家庭，你的健康，你的热情，追求等。</p><p>小石头代表着其他重要的事情，比如车子，房子，工作等。</p><p>沙子就像事其他的事，一些很小的事。如果我先把沙子倒进罐子内，就没有办法放入小石头和高尔夫球了，人生也是一样的，如果你把所有的时间精力都耗在小事上，你就没有时间去做真正有意义的事情了，专注于哪些能让你感到高兴快乐的事情，真正重要的事情。列好优先事项，因为其他的东西只是沙子而已。还有不管你的生活多么的紧凑，都要抽出时间去消遣和朋友把酒言欢，这样你的人生才能够丰富。</p>]]></content>
      
      
      <categories>
          
          <category> 喝酒吃肉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沙子 </tag>
            
            <tag> 啤酒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则</title>
      <link href="/2021/07/21/bei-wang/zheng-ze/"/>
      <url>/2021/07/21/bei-wang/zheng-ze/</url>
      
        <content type="html"><![CDATA[<p>正则常用常用表达式</p><span id="more"></span><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：**[^%&amp;’,;=?$\x22]+**</li><li>禁止输入含有<del>的字符：**[^</del>\x22]+**</li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：**[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?**</li><li>InternetURL：**[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$**</li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：**(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)**</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：**[\u4e00-\u9fa5]**</li><li>双字节字符：**[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))**</li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：**&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)**</li><li>腾讯QQ号：**[1-9][0-9]{4,} (腾讯QQ号从10000开始)**</li><li>中国邮政编码：**[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)**</li><li>IPv4地址：**((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}**</li></ul>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 笔记</title>
      <link href="/2021/07/20/ji-suan-ji-yu-yan/shell-yu-yan/shell-bi-ji/"/>
      <url>/2021/07/20/ji-suan-ji-yu-yan/shell-yu-yan/shell-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>shell语言学习笔记</p><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">name <span class="token operator">=</span> <span class="token string">"theing"</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Hello <span class="token variable">$&#123;name&#125;</span> I know you are <span class="token entity" title="\&quot;">\"</span><span class="token variable">$name</span><span class="token entity" title="\&quot;">\"</span>! <span class="token entity" title="\n">\n</span>"</span><span class="token comment"># 打印Hello theing I know you are "theing"! </span><span class="token builtin class-name">echo</span> <span class="token variable">$str</span>  打印字符串<span class="token builtin class-name">unset</span> name  删除这个变量<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>str&#125;</span> 输出字符串长度<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>1<span class="token operator">:</span>4&#125;</span> 输出字符串索引1：4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>value0 value1 value2 value3<span class="token punctuation">)</span>array_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value1<span class="token assign-left variable">valuen</span><span class="token operator">=</span><span class="token variable">$&#123;array_name<span class="token punctuation">[</span>n<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array_name<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> 获取数组中所有的元素<span class="token comment"># 取得数组元素的个数</span><span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token operator">#</span>array_name<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span class="token comment"># 取得数组单个元素的长度</span><span class="token assign-left variable">lengthn</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token operator">#</span>array_name<span class="token punctuation">[</span>n<span class="token punctuation">]</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Shell 传递参数实例！"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"执行的文件名：<span class="token variable">$0</span>"</span><span class="token punctuation">;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"第一个参数为：<span class="token variable">$1</span>"</span><span class="token punctuation">;</span>  <span class="token comment"># 这里的1是索引</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个参数为：<span class="token variable">$2</span>"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个参数为：<span class="token variable">$3</span>"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"参数个数为：<span class="token variable">$#</span>"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"传递的参数作为一个字符串显示：<span class="token variable">$*</span>"</span><span class="token punctuation">;</span>终端输入：$ <span class="token function">chmod</span> +x test.sh  设置脚本为可执行权限$ ./test.sh <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>终端输出：Shell 传递参数实例！执行的文件名：./test.sh第一个参数为：1第二个参数为：2第三个参数为：3参数个数为：3传递的参数作为一个字符串显示：1 <span class="token number">2</span> <span class="token number">3</span><span class="token comment">## 调用循环打印输入的参数</span><span class="token builtin class-name">echo</span> <span class="token string">"-- \<span class="token variable">$*</span> 演示 ---"</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token comment">## 用*号的时候是不换行的</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"-- \<span class="token variable">$@</span> 演示 ---"</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token comment">## 用@的时候是换行的</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span>输出$ <span class="token function">chmod</span> +x test.sh $ ./test.sh <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>-- <span class="token variable">$*</span> 演示 ---<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>-- <span class="token variable">$@</span> 演示 ---<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html">参考</a></p><h3 id="shell-基本运算符"><a href="#shell-基本运算符" class="headerlink" title="shell 基本运算符"></a>shell 基本运算符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 算数运算符</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"a + b : <span class="token variable">$val</span>"</span><span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"a - b : <span class="token variable">$val</span>"</span><span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"a * b : <span class="token variable">$val</span>"</span><span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $b / $a<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"b / a : <span class="token variable">$val</span>"</span><span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $b % $a<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"b % a : <span class="token variable">$val</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"a 等于 b"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"a 不等于 b"</span><span class="token keyword">fi</span>输出的结果a + b <span class="token builtin class-name">:</span> <span class="token number">30</span>a - b <span class="token builtin class-name">:</span> -10a * b <span class="token builtin class-name">:</span> <span class="token number">200</span>b / a <span class="token builtin class-name">:</span> <span class="token number">2</span>b % a <span class="token builtin class-name">:</span> <span class="token number">0</span>a 不等于 b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.runoob.com/linux/linux-shell-basic-operators.html">参考，搜索关系运算符</a>，shell关系运算符不是大于小于什么的。</p><h3 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"OK! <span class="token entity" title="\n">\n</span>"</span> <span class="token comment"># -e 开启转义 \n换行</span><span class="token builtin class-name">echo</span> -e <span class="token string">"OK! <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="表格输出"><a href="#表格输出" class="headerlink" title="表格输出"></a>表格输出</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4s<span class="token entity" title="\n">\n</span>"</span> 姓名 性别 体重kg  <span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4.2f<span class="token entity" title="\n">\n</span>"</span> 郭靖 男 <span class="token number">66.1234</span> 输出：姓名     性别   体重kg郭靖     男      <span class="token number">66.12</span>%s %c %d %f都是格式替代符%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐）%-4.2f 指格式化为小数，其中.2指保留2位小数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="printf的转义序列"><a href="#printf的转义序列" class="headerlink" title="printf的转义序列"></a>printf的转义序列</h3><p><a href="https://www.runoob.com/linux/linux-shell-printf.html">参考</a></p><h2 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h2><p>关于 数值的测试、字符串的测试、文件是否存在，字符串等的测试<br><a href="https://www.runoob.com/linux/linux-shell-test.html">参考</a></p><h3 id="for、while-循环"><a href="#for、while-循环" class="headerlink" title="for、while 循环"></a>for、while 循环</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># for</span><span class="token keyword">for</span> <span class="token for-or-select variable">loop</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"The value is: <span class="token variable">$loop</span>"</span><span class="token keyword">done</span><span class="token comment"># 输出：</span>The value is: <span class="token number">1</span>The value is: <span class="token number">2</span>The value is: <span class="token number">3</span>The value is: <span class="token number">4</span>The value is: <span class="token number">5</span><span class="token comment"># while</span><span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>    <span class="token builtin class-name">let</span> <span class="token string">"int++"</span><span class="token keyword">done</span><span class="token comment"># 输出：</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token comment">## 跳出循环 break ,跳出当前循环 continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell-函数"><a href="#shell-函数" class="headerlink" title="shell 函数"></a>shell 函数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 好的例子：</span><span class="token function-name function">funWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"这个函数会对输入的两个数字进行相加运算..."</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输入第一个数字: "</span>    <span class="token builtin class-name">read</span> aNum    <span class="token builtin class-name">echo</span> <span class="token string">"输入第二个数字: "</span>    <span class="token builtin class-name">read</span> anotherNum    <span class="token builtin class-name">echo</span> <span class="token string">"两个数字分别为 <span class="token variable">$aNum</span> 和 <span class="token variable">$anotherNum</span> !"</span>    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$aNum<span class="token operator">+</span>$anotherNum<span class="token variable">))</span></span><span class="token punctuation">&#125;</span>funWithReturn<span class="token builtin class-name">echo</span> <span class="token string">"输入的两个数字之和为 <span class="token variable">$?</span> !"</span>  <span class="token comment">## 注意这里的$?调用的是函数返回的值</span><span class="token comment"># 输出：</span>这个函数会对输入的两个数字进行相加运算<span class="token punctuation">..</span>.输入第一个数字: <span class="token number">1</span>输入第二个数字: <span class="token number">2</span>两个数字分别为 <span class="token number">1</span> 和 <span class="token number">2</span> <span class="token operator">!</span>输入的两个数字之和为 <span class="token number">3</span> <span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数接收参数"><a href="#函数接收参数" class="headerlink" title="函数接收参数"></a>函数接收参数</h3><p><em><strong>注意10以上就要用{}</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">funWithParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第一个参数为 <span class="token variable">$1</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第二个参数为 <span class="token variable">$2</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第十个参数为 <span class="token variable">$10</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第十个参数为 <span class="token variable">$&#123;10&#125;</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第十一个参数为 <span class="token variable">$&#123;11&#125;</span> !"</span>     <span class="token builtin class-name">echo</span> <span class="token string">"参数总数有 <span class="token variable">$#</span> 个!"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"作为一个字符串输出所有参数 <span class="token variable">$*</span> !"</span><span class="token punctuation">&#125;</span>funWithParam <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span><span class="token comment">## 输出为：</span>第一个参数为 <span class="token number">1</span> <span class="token operator">!</span>第二个参数为 <span class="token number">2</span> <span class="token operator">!</span>第十个参数为 <span class="token number">10</span> <span class="token operator">!</span>第十个参数为 <span class="token number">34</span> <span class="token operator">!</span>第十一个参数为 <span class="token number">73</span> <span class="token operator">!</span>参数总数有 <span class="token number">11</span> 个<span class="token operator">!</span>作为一个字符串输出所有参数 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span> <span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shell-的输入和输出重定向"><a href="#shell-的输入和输出重定向" class="headerlink" title="shell 的输入和输出重定向"></a>shell 的输入和输出重定向</h2><p><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">参考</a></p><p>基本就是一个<code>&lt;</code>;<code>&gt;</code>:<code>&gt;&gt;</code>的过程</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h2 id="shell-文件包含"><a href="#shell-文件包含" class="headerlink" title="shell 文件包含"></a>shell 文件包含</h2><p>Shell 也可以包含外部脚本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 报表</title>
      <link href="/2021/07/20/odoo/odoo-bao-biao/"/>
      <url>/2021/07/20/odoo/odoo-bao-biao/</url>
      
        <content type="html"><![CDATA[<p>报表的基本格式定义</p><span id="more"></span><h1 id="打印报表"><a href="#打印报表" class="headerlink" title="打印报表"></a>打印报表</h1><h2 id="在odoo14中"><a href="#在odoo14中" class="headerlink" title="在odoo14中"></a>在odoo14中</h2><p>Odoo 使用基于 <a href="https://www.odoo.com/documentation/14.0/developer/reference/javascript/qweb.html#reference-qweb">QWeb模板</a>, <a href="http://getbootstrap.com/">Bootstrap</a> 和 <a href="http://wkhtmltopdf.org/">Wkhtmltopdf</a> 来实现的。</p><p>报告是两个要素的组合：</p><ul><li><code>ir.actions.report</code>它配置报表的各种基本参数(默认类型，报表是否应在生成后保存到数据库，…)。</li><li>基本上是一个标准的写法，下面是一个示例。可以写在一个xml中。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account_invoices<span class="token punctuation">"</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ir.actions.report<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Invoices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>account.invoice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>report_type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>qweb-pdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>report_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>account.report_invoice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>report_file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>account.report_invoice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attachment_use<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--文件名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attachment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(object.state in ('open','paid')) and        ('INV'+(object.number or '').replace('/','')+'.pdf')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>binding_model_id<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model_account_invoice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>binding_type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/views.html#reference-views-qweb">QWeb视图</a>关于实际报告：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>web.html_container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-foreach</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docs<span class="token punctuation">"</span></span> <span class="token attr-name">t-as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>web.external_layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Report title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准呈现上下文提供了一些元素，最重要的是：</p><ul><li><p><code>docs</code></p><p>打印报告的记录</p></li><li><p><code>user</code></p><p>用户打印报表</p></li></ul><h2 id="在odoo13中"><a href="#在odoo13中" class="headerlink" title="在odoo13中"></a>在odoo13中</h2><h3 id="report-的-template"><a href="#report-的-template" class="headerlink" title="report 的 template"></a>report 的 template</h3><p><code>report</code>标签可用于定义一条报表记录。<strong>属性</strong>有：</p><ol><li>id</li></ol><p> 生成的数据的id。</p><ol start="2"><li>name (必选)</li></ol><p> 报表名，用于查找及描述。</p><ol start="3"><li>model (必选)</li></ol><p> 报表记录所对应的模型。</p><ol start="4"><li>report_type (必选)</li></ol><p> qweb-pdf| qweb-html</p><ol start="5"><li>report_name</li></ol><p> 输出pdf时文件名。</p><ol start="6"><li>groups</li></ol><p> 用于指定可以查看、使用该报表的用户组。</p><ol start="7"><li>attachment_use</li></ol><p> 如果设置为true时，该报表会以记录的附件的形式保存，一般用于<strong>一次生成、多次使用</strong>的报表。</p><ol start="8"><li>attachment</li></ol><p> 用于定义报表名的python表达式，使记录可以通过object对象访问。</p><ol start="9"><li>paperformat</li></ol><p> 用于打印报表的<strong>文件格式的外部id</strong>（默认是公司的格式. （可以自定义格式. 。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>odoo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>report_demo_odoo_tutorial<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>web.html_container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-foreach</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docs<span class="token punctuation">"</span></span> <span class="token attr-name">t-as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  # 上面的格式是固定的，重命名为 o                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>web.external_layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Odoo Report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">t-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>o.name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> # o 可以想象成一个物件，物件的名称。                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Name_track_always:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">t-field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>o.name_track_always<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        ## 这里才是设置的部分， <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>report</span>        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action_report_demo<span class="token punctuation">"</span></span>        <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Demo Report<span class="token punctuation">"</span></span>        <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo.odoo.tutorial<span class="token punctuation">"</span></span>  <span class="token attr-name">#</span> <span class="token attr-name">采用的是这个model这个模块的数据</span>        <span class="token attr-name">report_type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qweb-pdf<span class="token punctuation">"</span></span> <span class="token attr-name">#</span> <span class="token attr-name">使用的格式。</span>        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo_odoo_tutorial.report_demo_odoo_tutorial<span class="token punctuation">"</span></span>  <span class="token attr-name">#</span> <span class="token attr-name">文件夹位置，模块名称，+</span> <span class="token attr-name">模板id。</span>        <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo_odoo_tutorial.report_demo_odoo_tutorial<span class="token punctuation">"</span></span>        <span class="token attr-name">print_report_name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Demo Report - %s<span class="token punctuation">'</span> % ((object.name).replace(<span class="token punctuation">'</span>/<span class="token punctuation">'</span>, <span class="token punctuation">'</span><span class="token punctuation">'</span>))<span class="token punctuation">"</span></span>  <span class="token attr-name">#</span> <span class="token attr-name">这里的objece就是模型的名称.name为里面存在的字段名。</span>        <span class="token attr-name">paperformat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>catalog_deal.paperformat_odoo3<span class="token punctuation">"</span></span> <span class="token attr-name">#</span> <span class="token attr-name">这里就是record</span> <span class="token attr-name">field的id，catalog_deal为你的项目名称。</span>    <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>odoo</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;report    id="account_invoices"    model="account.invoice"  # 报表记录所对应的模型。    string="Invoices"  # 显示的名称    report_type="qweb-pdf" # 生成的文件格式，有很多种的。    name="account.report_invoice" # 下载的文件名称    file="account.report_invoice" # 不知道是什么，和name同名。    attachment_use="True"    attachment="(object.state in ('open','paid')) and        ('INV'+(object.number or '').replace('/','')+'.pdf')" //拼接文件名,object 为模型名称。/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="报表格式"><a href="#报表格式" class="headerlink" title="报表格式"></a>报表格式</h3><p>报表格式用<code>report.paperformat记录来定义，**字段**有：</code></p><ol><li>name (必选)</li></ol><p> 用于查找及区分的名字。</p><ol start="2"><li>description</li></ol><p> 格式的描述。</p><ol start="3"><li>format</li></ol><p> 一个预定义的纸张大小格式如（A0-A9，B0-B10等. 或自定义custom，默认是A4。</p><ol start="4"><li>dpi</li></ol><p> 输出的DPI，默认90。</p><ol start="5"><li>margin_top, margin_bottom, margin_left, margin_right</li></ol><p> 以 mm 为单位的margin值。</p><ol start="6"><li>page_height, page_width</li></ol><p> 以 mm 为单位的页面宽高尺寸值。</p><ol start="7"><li>orientation</li></ol><p> 纸张横向或纵向打印。</p><ol start="8"><li>Landscape ， Portrait header_line</li></ol><p> boolean类型，是否显示标题行。</p><ol start="9"><li>header_spacing</li></ol><p> 以 mm 为单位的头部空白尺寸。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>paperformat_frenchcheck<span class="token punctuation">"</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>report.paperformat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>French Bank Check<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page_height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page_width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>175<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orientation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Portrait<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin_bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin_left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin_right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header_line<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>False<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header_spacing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dpi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> report </tag>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 权限</title>
      <link href="/2021/07/20/odoo/odoo-quan-xian-an-quan/"/>
      <url>/2021/07/20/odoo/odoo-quan-xian-an-quan/</url>
      
        <content type="html"><![CDATA[<p>odoo 权限管理</p><span id="more"></span><h1 id="Security-安全"><a href="#Security-安全" class="headerlink" title="Security 安全"></a>Security 安全</h1><h2 id="基于组的访问控制机制"><a href="#基于组的访问控制机制" class="headerlink" title="基于组的访问控制机制"></a>基于组的访问控制机制</h2><p>组作为模型上的正常记录创建。<code>res.groups</code>，并通过菜单定义授予菜单访问权限。但是，即使没有菜单，对象仍然可以间接访问，因此必须为组定义实际的对象级权限(读、写、创建、取消链接)。它们通常通过模块内的CSV文件插入。还可以使用字段的Groups属性限制对视图或对象上特定字段的访问。</p><h2 id="存取权"><a href="#存取权" class="headerlink" title="存取权"></a>存取权</h2><p>访问权限定义为模型的记录。<code>ir.model.access</code>。每个访问权限都关联到一个模型、一个组(或没有一个组进行全局访问)和一组权限：读、写、创建、取消链接。这种访问权限通常由以其模型命名的CSV文件创建：<code>ir.model.access.csv</code>.</p><p>在csv中 id：是unique 唯一的 name: 随便取名 model_id:id 写法如下 model_开头，加上你model模型的名称，比如model_demo_odoo_tutorial; class 的name 位demo.odoo.tuorial group:id 为安全权限模块下的xml文件下的 group的id. 后面就为crud权限 0/1</p><pre class="line-numbers language-csv" data-language="csv"><code class="language-csv"><span class="token value">id</span><span class="token punctuation">,</span><span class="token value">name</span><span class="token punctuation">,</span><span class="token value">model_id/id</span><span class="token punctuation">,</span><span class="token value">group_id/id</span><span class="token punctuation">,</span><span class="token value">perm_read</span><span class="token punctuation">,</span><span class="token value">perm_write</span><span class="token punctuation">,</span><span class="token value">perm_create</span><span class="token punctuation">,</span><span class="token value">perm_unlink</span><span class="token value">access_idea_idea</span><span class="token punctuation">,</span><span class="token value">idea.idea</span><span class="token punctuation">,</span><span class="token value">model_idea_idea</span><span class="token punctuation">,</span><span class="token value">base.group_user</span><span class="token punctuation">,</span><span class="token value">1</span><span class="token punctuation">,</span><span class="token value">1</span><span class="token punctuation">,</span><span class="token value">1</span><span class="token punctuation">,</span><span class="token value">0</span><span class="token value">access_idea_vote</span><span class="token punctuation">,</span><span class="token value">idea.vote</span><span class="token punctuation">,</span><span class="token value">model_idea_vote</span><span class="token punctuation">,</span><span class="token value">base.group_user</span><span class="token punctuation">,</span><span class="token value">1</span><span class="token punctuation">,</span><span class="token value">1</span><span class="token punctuation">,</span><span class="token value">1</span><span class="token punctuation">,</span><span class="token value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="记录规则"><a href="#记录规则" class="headerlink" title="记录规则"></a>记录规则</h2><p>记录规则将访问权限限制在给定模型的记录子集上。规则是模型的记录。<code>ir.rule</code>，并与模型、多个组(多个2多个字段)、应用限制的权限和域相关联。域指定访问权限受限于哪些记录。</p><p>这里是一个防止删除不处于状态的引线的规则的示例。<code>cancel</code>。注意，字段的值<code>groups</code>必须遵循与方法相同的约定。<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.models.Model.write"><code>write()</code></a>ORM的。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete_cancelled_only<span class="token punctuation">"</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ir.rule<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Only cancelled leads may be deleted<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model_id<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>crm.model_crm_lead<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>groups<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[(4, ref(<span class="token punctuation">'</span>sales_team.group_sale_manager<span class="token punctuation">'</span>))]<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perm_read<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perm_write<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perm_create<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perm_unlink<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domain_force<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[('state','=','cancel')]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 高级视图</title>
      <link href="/2021/07/20/odoo/odoo-gao-ji-shi-tu/"/>
      <url>/2021/07/20/odoo/odoo-gao-ji-shi-tu/</url>
      
        <content type="html"><![CDATA[<p>高级视图</p><span id="more"></span><h1 id="高级视图"><a href="#高级视图" class="headerlink" title="高级视图"></a>高级视图</h1><h2 id="tree-视图"><a href="#tree-视图" class="headerlink" title="tree 视图"></a>tree 视图</h2><p>tree 视图可以补充属性来进一步自定义他们的行为。</p><p><code>decoration-&#123;$name&#125;</code></p><p>允许根据相应记录的属性更改行文本的样式。</p><p>值是Python表达式。对于每个记录，表达式都使用记录的属性作为上下文值进行计算，如果<code>true</code>，相应的样式将应用于行。以下是上下文中可用的其他一些值：</p><ul><li><code>uid</code>当前用户的ID，</li><li><code>today</code>当前本地日期作为窗体的字符串<code>YYYY-MM-DD</code>,</li><li><code>now</code>与<code>today</code>加上当前的时间。此值被格式化为<code>YYYY-MM-DD hh:mm:ss</code>.</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tree</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Idea Categories<span class="token punctuation">"</span></span> <span class="token attr-name">decoration-info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state==<span class="token punctuation">'</span>draft<span class="token punctuation">'</span><span class="token punctuation">"</span></span>    <span class="token attr-name">decoration-danger</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state==<span class="token punctuation">'</span>trashed<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tree</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>editable</code></p><p>任一<code>&quot;top&quot;</code>或<code>&quot;bottom&quot;</code>。使树视图可以就地编辑(而不必遍历Form视图)，值就是出现新行的位置。</p><p>参考：</p><p><code>&#123;$name&#125;</code>可以<code>bf</code> (<code>font-weight: bold</code>), <code>it</code> (<code>font-style: italic</code>)，或任何<a href="https://getbootstrap.com/docs/3.3/components/#available-variations">引导上下文颜色</a> (<code>danger</code>, <code>info</code>, <code>muted</code>, <code>primary</code>, <code>success</code>或<code>warning</code>).</p><h2 id="calender-日历视图"><a href="#calender-日历视图" class="headerlink" title="calender 日历视图"></a>calender 日历视图</h2><p>将记录显示为日历事件。它们的根元素是<code>&lt;calendar&gt;</code>它们最常见的特点是：</p><ul><li><p><code>color</code></p><p>用于颜色分割。颜色自动分配给事件，但事件位于同一颜色段(记录的值与事件的值相同)。<code>@color</code>字段)将被赋予相同的颜色。</p></li><li><p><code>date_start</code></p><p>记录的字段保存事件的开始日期/时间</p></li><li><p><code>date_stop</code>(任择)</p><p>记录的字段保存事件的结束日期/时间</p></li><li><p><code>string</code></p><p>Record的字段来定义每个日历事件的标签</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>calendar</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ideas<span class="token punctuation">"</span></span> <span class="token attr-name">date_start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invent_date<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>calendar</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="search-搜索视图"><a href="#search-搜索视图" class="headerlink" title="search 搜索视图"></a>search 搜索视图</h2><p>搜索视图<code>&lt;field&gt;</code>元素可以具有<code>@filter_domain</code>它覆盖为搜索给定字段而生成的域。在给定的域中，<code>self</code>表示用户输入的值。在下面的示例中，它用于搜索这两个字段。<code>name</code>和<code>description</code>.</p><p>搜索视图也可以包含<code>&lt;filter&gt;</code>元素，用作预定义搜索的切换。过滤器必须具有下列属性之一：</p><ul><li><p><code>domain</code></p><p>将给定域添加到当前搜索</p></li><li><p><code>context</code></p><p>向当前搜索添加一些上下文；使用键<code>group_by</code>对给定字段名的结果进行分组</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>search</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ideas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name and description<span class="token punctuation">"</span></span>           <span class="token attr-name">filter_domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>|<span class="token punctuation">'</span>, (<span class="token punctuation">'</span>name<span class="token punctuation">'</span>, <span class="token punctuation">'</span>ilike<span class="token punctuation">'</span>, self), (<span class="token punctuation">'</span>description<span class="token punctuation">'</span>, <span class="token punctuation">'</span>ilike<span class="token punctuation">'</span>, self)]<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country_id<span class="token punctuation">"</span></span> <span class="token attr-name">widget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selection<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_ideas<span class="token punctuation">"</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My Ideas<span class="token punctuation">"</span></span>            <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[(<span class="token punctuation">'</span>inventor_id<span class="token punctuation">'</span>, <span class="token punctuation">'</span>=<span class="token punctuation">'</span>, uid)]<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Group By<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group_by_inventor<span class="token punctuation">"</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Inventor<span class="token punctuation">"</span></span>                <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;<span class="token punctuation">'</span>group_by<span class="token punctuation">'</span>: <span class="token punctuation">'</span>inventor_id<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>search</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要在操作中使用非默认搜索视图，应使用<code>search_view_id</code>行动记录的字段。</p><p>该操作还可以通过其<code>context</code>字段：窗体的上下文键<code>search_default_field_name</code>将初始化字段名提供的价值。搜索筛选器必须有一个可选的<code>@name</code>拥有默认值并表现为布尔(只能在默认情况下启用)。</p><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><p>注意：甘特图需要甘特模块，现阶段只有企业版才有。</p><p>水平条形图通常用于显示项目计划和进度，它们的根元素是<code>&lt;gantt&gt;</code>.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gantt</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ideas<span class="token punctuation">"</span></span>       <span class="token attr-name">date_start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invent_date<span class="token punctuation">"</span></span>       <span class="token attr-name">date_stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date_finished<span class="token punctuation">"</span></span>       <span class="token attr-name">progress</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>progress<span class="token punctuation">"</span></span>       <span class="token attr-name">default_group_by</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Graph-图形视图"><a href="#Graph-图形视图" class="headerlink" title="Graph 图形视图"></a>Graph 图形视图</h2><p>graph 视图允许聚合模型的概述和分析，它们的根元素是<code>&lt;graph&gt;</code>.</p><p>图形视图有4种显示模式，默认模式使用<code>@type</code>属性。</p><h3 id="条形图，为默认图形"><a href="#条形图，为默认图形" class="headerlink" title="条形图，为默认图形"></a>条形图，为默认图形</h3><p>一个条形图，第一个维度用于定义水平轴上的组，其他维度定义每个组内的聚合条。</p><p>默认情况下，条是并排的，可以通过使用<code>@stacked=&quot;True&quot;</code>在<code>&lt;graph&gt;</code></p><h3 id="line"><a href="#line" class="headerlink" title="line"></a>line</h3><p>二维线图，需要示例</p><h3 id="pie"><a href="#pie" class="headerlink" title="pie"></a>pie</h3><p>二维饼图，需要示例</p><p>图视图<code>&lt;field&gt;</code>强制性的<code>@type</code>获取值的属性</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>graph</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Total idea score by Inventor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>measure<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>graph</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>row</code>(默认)</p><p>默认情况下，应该聚合该字段。</p><p><code>measure</code></p><p>字段应该聚合而不是分组在</p><p>注意：图视图只能对储存在数据库中的数据执行聚合，不能处理非存储字段。</p><p>示例代码 <a href="https://gitee.com/theing/odoo14-cookbook/tree/main/Chapter09">链接</a></p><h3 id="看板"><a href="#看板" class="headerlink" title="看板"></a>看板</h3><p>用于组织任务、生产过程等…它们的根元素是<code>&lt;kanban&gt;</code>.</p><p>Kanban视图显示了一组可能按列分组的卡片。每一张卡片代表一条记录，每一列表示聚合字段的值。</p><p>例如，项目任务可以按阶段(每一列是一个阶段)或按负责(每一列都是用户)来组织，依此类推。</p><p>看板视图将每张卡片的结构定义为表单元素(包括基本HTML)和<a href="https://www.odoo.com/documentation/14.0/developer/reference/javascript/qweb.html#reference-qweb">QWeb模板</a>.</p><p>示例代码 <a href="https://gitee.com/theing/odoo14-cookbook/tree/main/Chapter09/15_kanban_view">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视图 </tag>
            
            <tag> tree </tag>
            
            <tag> calender </tag>
            
            <tag> 看板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 计算字段</title>
      <link href="/2021/07/19/odoo/odoo-zi-duan-de-ji-suan/"/>
      <url>/2021/07/19/odoo/odoo-zi-duan-de-ji-suan/</url>
      
        <content type="html"><![CDATA[<p>主要介绍 depend、onchange 和 self。</p><span id="more"></span><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>字段是直接存储在数据库中，并直接从数据库中检索。在odoo中，字段也可以是计算值。在这种情况下，字段的值不是从数据库中检索出来的，而是通过调用模型的方法实时计算出来的。</p><p>若要创建计算字段，需要设置字段属性。<code>compute</code>方法的名称。计算方法应该简单地设置要计算在<code>self</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> odoo <span class="token keyword">import</span> models<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> api<span class="token keyword">class</span> <span class="token class-name">ComputedModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    _name <span class="token operator">=</span> <span class="token string">'test.computed'</span>    name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">'_compute_name'</span><span class="token punctuation">)</span>  <span class="token comment"># 添加一个compute属性，后面是一个方法。</span>    <span class="token keyword">def</span> <span class="token function">_compute_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span> <span class="token comment"># 这里的 self 是一个集合</span>            record<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>self</code>是一个集合</p><p>对象<code>self</code>是<em>记录集</em>，即有序收集记录。它支持集合上的标准Python操作，如<code>len(self)</code>和<code>iter(self)</code>，加上额外的设置操作，如<code>recs1 + recs2</code>.</p><p>迭代<code>self</code>一个接一个地给出记录，其中每个记录本身都是一个大小为1的集合。<code>record.name</code>.</p><p>对象<code>self.env</code>允许访问请求参数和其他有用的东西：</p><ul><li><code>self.env.cr</code>或<code>self._cr</code>是数据库<em>光标</em>对象；它用于查询数据库。</li><li><code>self.env.uid</code>或<code>self._uid</code>是当前用户的数据库id</li><li><code>self.env.user</code>是当前用户的记录</li><li><code>self.env.context</code>或<code>self._context</code>是上下文字典</li><li><code>self.env.ref(xml_id)</code>返回与xml id对应的记录。</li><li><code>self.env[model_name]</code>返回给定模型的实例。</li></ul><h3 id="depends-依赖"><a href="#depends-依赖" class="headerlink" title="depends  依赖"></a>depends  依赖</h3><p>计算字段的值通常取决于计算记录上其他字段的值。ORM期望开发人员使用修饰器指定计算方法上的那些依赖项。<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.api.depends"><code>depends()</code></a>。当某些依赖项被修改时，ORM就会使用给定的依赖项来触发字段的重新计算示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> odoo <span class="token keyword">import</span> models<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> api<span class="token keyword">class</span> <span class="token class-name">ComputedModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    _name <span class="token operator">=</span> <span class="token string">'test.computed'</span>    name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">'_compute_name'</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> fields<span class="token punctuation">.</span>Integer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>depends</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span> <span class="token comment"># 当value这个字段的值发生改变的时执行方法</span>    <span class="token keyword">def</span> <span class="token function">_compute_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>            record<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Record with value %s"</span> <span class="token operator">%</span> record<span class="token punctuation">.</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段默认值"><a href="#字段默认值" class="headerlink" title="字段默认值"></a>字段默认值</h3><p>在字段定义中，添加选项<code>default=X</code>哪里<code>X</code>是Python文字值(布尔值、整数值、浮点值、字符串)，或者是接受记录集并返回值的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">"Unknown"</span><span class="token punctuation">)</span>user_id <span class="token operator">=</span> fields<span class="token punctuation">.</span>Many2one<span class="token punctuation">(</span><span class="token string">'res.users'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token keyword">lambda</span> self<span class="token punctuation">:</span> self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>user<span class="token punctuation">)</span>start_datetime <span class="token operator">=</span> fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">(</span><span class="token string">'Start DateTime'</span><span class="token punctuation">,</span> default<span class="token operator">=</span>fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 默认为当前时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Onchange-实时更新机制"><a href="#Onchange-实时更新机制" class="headerlink" title="Onchange  实时更新机制"></a>Onchange  实时更新机制</h3><p>“onchange”机制为客户端接口提供了一种方法，以便在用户填写字段中的值时更新表单，而无需将任何内容保存到数据库中。和depends类似。</p><p>例如，假设模型有三个字段<code>amount</code>, <code>unit_price</code>和<code>price</code>，您希望在修改任何其他字段时更新表单上的价格。要实现这一点，请定义以下方法<code>self</code>表示窗体视图中的记录，并用<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.api.onchange"><code>onchange()</code></a>若要指定必须在哪个字段上触发该字段，请执行以下操作。你做的任何改变<code>self</code>将反映在表格上。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- content of form view --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>amount<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unit_price<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># onchange handler</span><span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>onchange</span><span class="token punctuation">(</span><span class="token string">'amount'</span><span class="token punctuation">,</span> <span class="token string">'unit_price'</span><span class="token punctuation">)</span>  <span class="token comment"># 修改这两个值的时候执行。</span><span class="token keyword">def</span> <span class="token function">_onchange_price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># set auto-changing field</span>    self<span class="token punctuation">.</span>price <span class="token operator">=</span> self<span class="token punctuation">.</span>amount <span class="token operator">*</span> self<span class="token punctuation">.</span>unit_price    <span class="token comment"># Can optionally return a warning and domains</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">'warning'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">"Something bad happened"</span><span class="token punctuation">,</span>            <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">"It was very bad indeed"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然 <code>api.depends</code> 与<code>api.onchange</code>有诸多相似的地方，但一个重要区别就是 <code>onchange</code> 的侦测字段范围需要在同一个模型或界面上；而<code>depends</code> 可以侦测关联的模型的字段（可以跨不同表）。</p>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> depend </tag>
            
            <tag> onchang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 继承</title>
      <link href="/2021/07/19/odoo/odoo-ji-cheng/"/>
      <url>/2021/07/19/odoo/odoo-ji-cheng/</url>
      
        <content type="html"><![CDATA[<p>模型和视图的继承</p><span id="more"></span><h2 id="模型继承"><a href="#模型继承" class="headerlink" title="模型继承"></a>模型继承</h2><p>odoo提供了两种一模块化方式扩展现有模型的机制。</p><h3 id="第一种-inherit"><a href="#第一种-inherit" class="headerlink" title="第一种 _inherit"></a>第一种 _inherit</h3><p>允许模块修改在另一个模块中定义的模型的行为</p><ul><li>将字段添加到模型中，</li><li>重写模型上字段的定义，</li><li>向模型添加约束，</li><li>将方法添加到模型中，</li><li>覆盖模型上的现有方法。</li></ul><h3 id="第二种继承（委托）-inherits"><a href="#第二种继承（委托）-inherits" class="headerlink" title="第二种继承（委托） _ inherits"></a>第二种继承（委托） _ inherits</h3><p>允许将模型的每个记录链接到父模型中的记录，并提供对父记录字段的透明访问。</p><p><img src="https://i.loli.net/2021/07/19/OZ9DYwKGnQzs5eV.png" alt="odoo 继承图形"></p><h2 id="视图继承"><a href="#视图继承" class="headerlink" title="视图继承"></a>视图继承</h2><p>odoo提供视图继承，其中子视图“扩展”视图应用在根视图之上，并且可以从父视图中添加或删除内容。</p><p>扩展视图使用<code>inherit_id</code>字段，而不是单个视图<code>arch</code>字段由任意数量的<code>xpath</code>元素选择并更改其父视图的内容：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- improved idea categories list --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idea_category_list2<span class="token punctuation">"</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ir.ui.view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id.category.list2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>idea.category<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inherit_id<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_category_list<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arch<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- find field description and add the field             idea_ids after it --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xpath</span> <span class="token attr-name">expr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//field[@name=<span class="token punctuation">'</span>description<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idea_ids<span class="token punctuation">"</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Number of ideas<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xpath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>expr</code></p><p><a href="http://w3.org/TR/xpath">XPath</a> 表达式在父视图中选择单个元素。如果不匹配任何元素或多个元素，则引发错误，就是一个定位的作用。</p></li><li><p><code>position</code></p><p>操作应用于匹配的元素，匹配到后有下列属性。</p><ul><li><p><code>inside</code></p><p>使用<code>xpath</code>的时候插入到末尾</p></li><li><p><code>replace</code></p><p>将匹配的元素替换为<code>xpath</code>他的身体，取代任何<code>$0</code>在具有原始元素的新主体中出现节点。</p></li><li><p><code>before</code></p><p>插入<code>xpath</code>在匹配元素之前作为兄弟姐妹的身体</p></li><li><p><code>after</code></p><p>插入<code>xpaths</code>作为匹配元素后面的兄弟姐妹的身体</p></li><li><p><code>attributes</code></p><p>使用特殊方法更改匹配元素的属性。<code>attribute</code>元素中的<code>xpath</code>体</p></li></ul></li></ul><p>匹配单个元素时，<code>position</code>属性可以直接设置在要查找的元素上。以下两项继承将产生相同的结果。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xpath</span> <span class="token attr-name">expr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//field[@name=<span class="token punctuation">'</span>description<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idea_ids<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xpath</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--只要一个元素的时候可以这样，但一般不这样做--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idea_ids<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="domains-域"><a href="#domains-域" class="headerlink" title="domains 域"></a>domains 域</h3><p>在odoo中，<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#reference-orm-domains">搜索域</a>是对记录上的条件进行编码的值。域是用于选择模型记录的子集的标准列表。每个条件都是一个具有字段名、运算符和值的三元组。</p><p>例如，当在<em>产品</em>建模以下域选择所有<em>服务</em>单价超过<em>1000</em>。两个组，每个组三个元素，依次为字段名，运算符，匹配值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'product_type'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'service'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'unit_price'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，标准与隐式和。逻辑运算符<code>&amp;</code>(及)<code>|</code>(或)及<code>!</code>(NOT)可用于显式地组合标准。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'|'</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'product_type'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'service'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'unit_price'</span><span class="token punctuation">,</span> <span class="token string">'>='</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'unit_price'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[(<span class="token punctuation">'</span>active<span class="token punctuation">'</span>,<span class="token punctuation">'</span>=<span class="token punctuation">'</span>,True)]<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> odoo 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 基础视图</title>
      <link href="/2021/07/18/odoo/odoo-ji-chu-shi-tu/"/>
      <url>/2021/07/18/odoo/odoo-ji-chu-shi-tu/</url>
      
        <content type="html"><![CDATA[<p>odoo 基础的视图</p><span id="more"></span><h1 id="odoo-视图"><a href="#odoo-视图" class="headerlink" title="odoo 视图"></a>odoo 视图</h1><h2 id="泛型视图声明"><a href="#泛型视图声明" class="headerlink" title="泛型视图声明"></a>泛型视图声明</h2><p>视图声明为模型的记录。<code>ir.ui.view</code>。对象的根元素暗示视图类型。<code>arch</code>字段：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ir.ui.view<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>object_name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>priority<span class="token punctuation">"</span></span> <span class="token attr-name">eval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arch<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- view content: &lt;form>, &lt;tree>, &lt;graph>, ... --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tree-视图"><a href="#tree-视图" class="headerlink" title="tree 视图"></a>tree 视图</h2><p>树视图(也称为列表视图)以表格形式显示记录。</p><p>它们的根元素是<code>&lt;tree&gt;</code>。树视图的最简单形式只是列出表中要显示的所有字段(每个字段作为一列)：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tree</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Idea list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tree</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="form-视图"><a href="#form-视图" class="headerlink" title="form 视图"></a>form 视图</h2><p>表单用于创建和编辑单个记录。</p><p>它们的根元素是<code>&lt;form&gt;</code>。它们由高层结构元素(组、笔记本)和交互元素(按钮和字段)组成：</p><p>支持栅格化，以下是一个例子</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Idea form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">col</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>separator</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>General stuff<span class="token punctuation">"</span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">col</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>separator</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dates<span class="token punctuation">"</span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invent_date<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>notebook</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">nolabel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>notebook</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表单视图还可以使用普通HTML进行更灵活的布局：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Idea Form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Confirm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>object<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action_confirm<span class="token punctuation">"</span></span>                <span class="token attr-name">states</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>draft<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oe_highlight<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mark as done<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>object<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action_done<span class="token punctuation">"</span></span>                <span class="token attr-name">states</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>confirmed<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oe_highlight<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Reset to draft<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>object<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action_draft<span class="token punctuation">"</span></span>                <span class="token attr-name">states</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>confirmed,done<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">widget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>statusbar<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sheet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oe_title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oe_edit_only<span class="token punctuation">"</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Idea Name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>separator</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>General<span class="token punctuation">"</span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">col</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Idea description...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sheet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="search-视图"><a href="#search-视图" class="headerlink" title="search 视图"></a>search 视图</h2><p>搜索视图自定义与列表视图(和其他聚合视图)关联的搜索字段。它们的根元素是<code>&lt;search&gt;</code>它们由定义可以在哪些字段上搜索的字段组成：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>search</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inventor_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>search</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> odoo 基础视图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo 模型字段</title>
      <link href="/2021/07/07/odoo/odoo-mo-xing-zi-duan/"/>
      <url>/2021/07/07/odoo/odoo-mo-xing-zi-duan/</url>
      
        <content type="html"><![CDATA[<p>orm 各种字段及其属性</p><span id="more"></span><h2 id="odoo-model"><a href="#odoo-model" class="headerlink" title="odoo  model"></a>odoo  model</h2><p>odoo 提供了一个简单的机制来帮助建立一个新的空模块</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ odoo-bin scaffold <span class="token operator">&lt;</span>module name<span class="token operator">></span> <span class="token operator">&lt;</span>where to put it<span class="token operator">></span>$ ./odoo-bin scaffold your_addons_name my-addons/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>对象关系映射，基本可以理解为一个python对 数据库的驱动。这里的<code>_name</code>是从必须的。在数据库中就是表的名称。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> odoo <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">MinimalModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    _name <span class="token operator">=</span> <span class="token string">'test.model'</span>    _description <span class="token operator">=</span> <span class="token string">'Demo Odoo Tutorial'</span>  <span class="token comment"># 只是一个描述，如果不写可能会出现警告。</span>    _inherit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mail.thread'</span><span class="token punctuation">,</span> <span class="token string">'mail.activity.mixin'</span><span class="token punctuation">]</span> <span class="token comment"># 继承的那些模块，才有mail这个模块。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型字段"><a href="#模型字段" class="headerlink" title="模型字段"></a>模型字段</h2><p>字段用于定义模型可以存储的内容和存储位置。字段被定义为模型类上的属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> odoo <span class="token keyword">import</span> models<span class="token punctuation">,</span> fields<span class="token keyword">class</span> <span class="token class-name">LessMinimalModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    _name <span class="token operator">=</span> <span class="token string">'test.model2'</span>    <span class="token comment"># name = fields.Char()</span>    <span class="token comment"># 添加其他的属性，这里required为必填。</span>    name <span class="token operator">=</span> field<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有字段都有一些属性可用，以下是最常见的属性：</p><ul><li><p><code>string</code> (<code>unicode</code>，默认：字段的名称)</p><p>UI中字段的标签(用户可以看到)。</p></li><li><p><code>required</code> (<code>bool</code>，默认：<code>False</code>)</p><p>如果<code>True</code>，该字段不能为空，它必须具有默认值，或者在创建记录时始终被赋予一个值。</p></li><li><p><code>help</code> (<code>unicode</code>，默认：<code>&#39;&#39;</code>)</p><p>长窗体，向UI中的用户提供帮助工具提示.</p></li><li><p><code>index</code> (<code>bool</code>，默认：<code>False</code>)</p><p>请求Odoo创建一个<a href="http://use-the-index-luke.com/sql/preface">数据库索引</a>列上。</p></li></ul><h2 id="简单字段"><a href="#简单字段" class="headerlink" title="简单字段"></a>简单字段</h2><p>简单字段的示例包括<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Boolean"><code>Boolean</code></a>, <a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Date"><code>Date</code></a>, <a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Char"><code>Char</code></a>.</p><h2 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h2><p>Odoo在所有模型中创建了几个字段。这些字段由系统管理，不应该写入。如果有用或必要可以查看。</p><ul><li><p><code>id</code> (<code>Id</code>)</p><p>模型中记录的唯一标识符。</p></li><li><p><code>create_date</code> (<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Datetime"><code>Datetime</code></a>)</p><p>记录的创建日期。</p></li><li><p><code>create_uid</code> (<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Many2one"><code>Many2one</code></a>)</p><p>创建记录的用户。</p></li><li><p><code>write_date</code> (<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Datetime"><code>Datetime</code></a>)</p><p>记录的最后修改日期。</p></li><li><p><code>write_uid</code> (<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Many2one"><code>Many2one</code></a>)</p><p>上次修改记录的用户。</p></li></ul><h2 id="模型之间的关系"><a href="#模型之间的关系" class="headerlink" title="模型之间的关系"></a>模型之间的关系</h2><h3 id="关系字段"><a href="#关系字段" class="headerlink" title="关系字段"></a>关系字段</h3><p>关系字段链接记录，要么是同一个模型(层次结构)，要么是不同模型之间的链接。</p><p><a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Many2one"><code>Many2one(other_model, ondelete=&#39;set null&#39;)</code></a></p><p>指向其他对象的简单链接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> foo<span class="token punctuation">.</span>other_id<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.One2many"><code>One2many(other_model, related_field)</code></a></p><p>虚拟关系，与<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Many2one"><code>Many2one</code></a>。一个<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.One2many"><code>One2many</code></a>作为一个记录容器，访问它会产生(可能是空的)一组记录：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> other <span class="token keyword">in</span> foo<span class="token punctuation">.</span>other_ids<span class="token punctuation">:</span>    <span class="token keyword">print</span> other<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>注意</em>：因为<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.One2many"><code>One2many</code></a>是一种虚拟的关系必有一个<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Many2one"><code>Many2one</code></a>字段中的<code>other_model</code>，以及它的名字必须是<code>related_field</code></p><p><a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.fields.Many2many"><code>Many2many(other_model)</code></a></p><p>双向多重关系，一边的任何记录都可以与另一边的任意数量的记录相关联。作为一个记录容器，访问它还会导致一组可能为空的记录：</p><pre class="line-numbers language-none"><code class="language-none">for other in foo.other_ids:    print other.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="模型约束"><a href="#模型约束" class="headerlink" title="模型约束"></a>模型约束</h2><p>Odoo提供了两种方法来设置自动验证的不变量：<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.api.constrains"><code>Python constraints</code></a>和<code>SQL constraints</code>.</p><h3 id="python-约束"><a href="#python-约束" class="headerlink" title="python 约束"></a>python 约束</h3><p>Python约束定义为用<a href="https://www.odoo.com/documentation/14.0/developer/reference/addons/orm.html#odoo.api.constrains"><code>constrains()</code></a>，并在记录集中调用。修饰器指定约束中涉及哪些字段，以便在修改其中一个字段时自动计算约束。如果不满足该方法的不变量，则该方法将引发异常：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> odoo<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>constrains</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>  <span class="token comment"># 给出警告也是可以写入数据库的。</span><span class="token keyword">def</span> <span class="token function">_check_something</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>        <span class="token keyword">if</span> record<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">"Your record is too old: %s"</span> <span class="token operator">%</span> record<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token comment"># all records passed the test, don't return anything</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL-约束"><a href="#SQL-约束" class="headerlink" title="SQL 约束"></a>SQL 约束</h3><p>SQL约束是通过模型属性定义的。<code>_sql_constraints</code>。后者被分配给一个字符串三元组的列表。<code>(name, sql_definition, message)</code>，在哪里<code>name</code>是有效的SQL约束名称，<code>sql_definition</code>是<a href="http://www.postgresql.org/docs/9.3/static/ddl-constraints.html">表约束</a>表达，和<code>message</code>是错误消息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定 name 为唯一值</span>_sql_constraints <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">'name_uniq'</span><span class="token punctuation">,</span> <span class="token string">'unique(name)'</span><span class="token punctuation">,</span> <span class="token string">'Description must be unique'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其他约束参考<a href="http://www.postgresql.org/docs/9.3/static/ddl-constraints.html">PostgreSQL文档</a>，</p>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ORM </tag>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo环境的安装</title>
      <link href="/2021/07/05/odoo/odoo-huan-jing-an-zhuang/"/>
      <url>/2021/07/05/odoo/odoo-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">Windows 和 Linux odoo 的安装。</blockquote><span id="more"></span><h1 id="odoo环境的安装"><a href="#odoo环境的安装" class="headerlink" title="odoo环境的安装"></a>odoo环境的安装</h1><h2 id="win10安装odoo13"><a href="#win10安装odoo13" class="headerlink" title="win10安装odoo13"></a>win10安装odoo13</h2><h3 id="1-下载基础包"><a href="#1-下载基础包" class="headerlink" title="1. 下载基础包"></a>1. 下载基础包</h3><h3 id="推荐下载zip包："><a href="#推荐下载zip包：" class="headerlink" title="推荐下载zip包："></a>推荐下载zip包：</h3><p><a href="https://gitee.com/mirrors/odoo/repository/archive/13.0.zip">链接</a>，解压到你的工作目录</p><h3 id="克隆方式："><a href="#克隆方式：" class="headerlink" title="克隆方式："></a>克隆方式：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://gitee.com/mirrors/odoo.git -b <span class="token number">13.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装python环境"><a href="#2-安装python环境" class="headerlink" title="2. 安装python环境"></a>2. 安装python环境</h3><p>推荐使用<code>Miniconda</code>环境  <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_4.9.2-Windows-x86.exe">地址</a>，也可以使用<code>python3.6</code>，<a href="https://www.python.org/downloads/windows/">地址</a></p><h3 id="3-安装PostgreSQL"><a href="#3-安装PostgreSQL" class="headerlink" title="3. 安装PostgreSQL"></a>3. 安装PostgreSQL</h3><p><a href="https://www.postgresql.org/download/windows/">下载地址</a></p><p>通过<code>pgAdmin</code>添加新的用户和密码，并给予权限</p><h3 id="4-安装c-编译器"><a href="#4-安装c-编译器" class="headerlink" title="4. 安装c++编译器"></a>4. 安装c++编译器</h3><p>可以直接安装 Build Tools for Visual Studio <a href="https://visualstudio.microsoft.com/zh-hans/downloads/">地址</a></p><h3 id="5-通过python建立一个虚拟环境"><a href="#5-通过python建立一个虚拟环境" class="headerlink" title="5. 通过python建立一个虚拟环境"></a>5. 通过python建立一个虚拟环境</h3><p>Miniconda方式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda create -n odoo_env <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.6</span>conda activate odoo_env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>python方式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python -m venv odoo_env<span class="token builtin class-name">source</span> ./odoo_env/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-更换pip镜像源"><a href="#6-更换pip镜像源" class="headerlink" title="6. 更换pip镜像源"></a>6. 更换pip镜像源</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.douban.com/simple/pip <span class="token function">install</span> setuptools wheel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-安装环境"><a href="#7-安装环境" class="headerlink" title="7. 安装环境"></a>7. 安装环境</h3><p>在你解压的<code>odoo</code>的文件夹下，自行命令安装环境</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-配置启动项"><a href="#8-配置启动项" class="headerlink" title="8. 配置启动项"></a>8. 配置启动项</h3><p>进入到工作目录，编辑启动配置，</p><p><code>~\odoo-13.0\debian\odoo.conf</code></p><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl"><span class="token punctuation">[</span>options<span class="token punctuation">]</span>addons_path <span class="token function">=</span> D<span class="token dfn builtin">:</span><span class="token monadic-operator operator">\</span>odoo_new<span class="token monadic-operator operator">\</span>odoo<span class="token function">-</span><span class="token number">13.0</span><span class="token monadic-operator operator">\</span>addonsdb_host <span class="token function">=</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token dyadic-operator operator">.</span><span class="token function">*</span>db_password <span class="token function">=</span> <span class="token function">*</span><span class="token function">*</span><span class="token function">*</span><span class="token function">*</span><span class="token function">*</span><span class="token function">*</span>db_port <span class="token function">=</span> <span class="token number">5432</span>db_user <span class="token function">=</span> theing<span class="token punctuation">;</span>http_port <span class="token function">=</span> <span class="token number">8091</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-启动环境"><a href="#9-启动环境" class="headerlink" title="9. 启动环境"></a>9. 启动环境</h3><pre class="line-numbers language-none"><code class="language-none">python odoo-bin -c ~\odoo-13.0\debian\odoo.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="linux-安装-odoo"><a href="#linux-安装-odoo" class="headerlink" title="linux 安装 odoo"></a>linux 安装 odoo</h2><p>安装步骤可以参照官方的解决方案，但是注意需要在官方基础上安装<code>gcc g++</code>编译器</p><h3 id="1-安装依赖程序"><a href="#1-安装依赖程序" class="headerlink" title="1. 安装依赖程序"></a>1. 安装依赖程序</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-dev libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev <span class="token punctuation">\</span>    libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev libfreetype6-dev <span class="token punctuation">\</span>    liblcms2-dev libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev libpq-dev gcc g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-克隆源代码："><a href="#2-克隆源代码：" class="headerlink" title="2. 克隆源代码："></a>2. 克隆源代码：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://gitee.com/mirrors/odoo.git -b <span class="token number">13.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-安装环境"><a href="#3-安装环境" class="headerlink" title="3. 安装环境"></a>3. 安装环境</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 <span class="token function">install</span> setuptools wheelpip3 <span class="token function">install</span> -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-安装postgresql"><a href="#4-安装postgresql" class="headerlink" title="4. 安装postgresql"></a>4. 安装postgresql</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> postgresql postgresql-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-安装pgadmin"><a href="#5-安装pgadmin" class="headerlink" title="5. 安装pgadmin"></a>5. 安装pgadmin</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 连接 https://www.pgadmin.org/download/pgadmin-4-python/</span>$ <span class="token function">sudo</span> <span class="token function">mkdir</span> /var/lib/pgadmin$ <span class="token function">sudo</span> <span class="token function">mkdir</span> /var/log/pgadmin$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token environment constant">$USER</span> /var/lib/pgadmin$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token environment constant">$USER</span> /var/log/pgadmin$ python3 -m venv pgadmin4  一般我是和odoo的环境一起的，但最好是有一个单独的环境$ <span class="token builtin class-name">source</span> pgadmin4/bin/activate<span class="token punctuation">(</span>pgadmin4<span class="token punctuation">)</span> $ pip <span class="token function">install</span> pgadmin4<span class="token punctuation">..</span>.<span class="token punctuation">(</span>pgadmin4<span class="token punctuation">)</span> $ pgadmin4NOTE: Configuring authentication <span class="token keyword">for</span> SERVER mode.Enter the email address and password to use <span class="token keyword">for</span> the initial pgAdmin user account:添加自己的邮箱Email address: user@domain.comPassword: Retype password:Starting pgAdmin <span class="token number">4</span>. Please navigate to http://127.0.0.1:5050 <span class="token keyword">in</span> your browser. * Serving Flask app <span class="token string">"pgadmin"</span> <span class="token punctuation">(</span>lazy loading<span class="token punctuation">)</span> * Environment: production   WARNING: Do not use the development server <span class="token keyword">in</span> a production environment.   Use a production WSGI server instead. * Debug mode: off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pgadmin连接postgresql"><a href="#pgadmin连接postgresql" class="headerlink" title="pgadmin连接postgresql"></a>pgadmin连接postgresql</h2> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建用户</span>$ <span class="token function">sudo</span> <span class="token function">su</span> postgres$ ALTER <span class="token environment constant">USER</span> postgres WITH PASSWORD <span class="token string">'123456'</span><span class="token punctuation">;</span>$ <span class="token function">sudo</span> -u postgres createuser -s <span class="token environment constant">$USER</span>$ createdb <span class="token environment constant">$USER</span><span class="token comment"># 或者</span><span class="token function">sudo</span> <span class="token function">passwd</span> postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 打开pgadmin连接数据库</span>连接：127.0.0.1端口：5432用户名：postgres密码：123456连接之后就可以创建没有权限或有权限的的用户，期间会生成一个master 密码要保存起来应该也可以自己修改。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建数据库：</span>$ createdb komablog<span class="token comment"># 删除数据库：</span>$ dropdb komablog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看-修改-postgresql的端口"><a href="#查看-修改-postgresql的端口" class="headerlink" title="查看/修改 postgresql的端口"></a>查看/修改 postgresql的端口</h2> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看</span><span class="token function">netstat</span> -a <span class="token operator">|</span> <span class="token function">grep</span> PGSQL<span class="token comment"># 修改端口</span><span class="token function">vim</span> /etc/postgresql/<span class="token punctuation">(</span>版本号<span class="token punctuation">)</span>/main/postgresql.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> odoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> odoo环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql数据库使用</title>
      <link href="/2021/07/04/shu-ju-ku/postgresql-shu-ju-ku-shi-yong-bei-wang/"/>
      <url>/2021/07/04/shu-ju-ku/postgresql-shu-ju-ku-shi-yong-bei-wang/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">postgresql 在 win 和 linux 下的使用教程</blockquote><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="在linux下安装"><a href="#在linux下安装" class="headerlink" title="在linux下安装"></a>在linux下安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> postgresql postgresql-client <span class="token comment"># 安装</span><span class="token function">sudo</span> <span class="token function">service</span> postgresql start <span class="token comment"># 启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>postgresql 配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/postgresql/<span class="token punctuation">(</span>版本号<span class="token punctuation">)</span>/main/postgresql.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在windows下安装"><a href="#在windows下安装" class="headerlink" title="在windows下安装"></a>在windows下安装</h3><p><a href="https://www.postgresql.org/download/windows/">下载地址</a> 下一步进行安装就可以了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="命令行基本使用"><a href="#命令行基本使用" class="headerlink" title="命令行基本使用"></a>命令行基本使用</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> <span class="token function">su</span> postgres  <span class="token comment"># 进入postgresql用户</span>$ psql --version  <span class="token comment"># 查看pgsql版本</span>$ psql -l  <span class="token comment"># 查看已有数据库</span>$ createdb theing <span class="token comment"># 创建一个名为theing 的数据库</span>$ psql theing <span class="token comment"># 进入这个数据库</span><span class="token operator">></span> <span class="token builtin class-name">help</span> <span class="token comment"># 查看帮助下同</span><span class="token operator">></span> <span class="token punctuation">\</span>h<span class="token operator">></span> <span class="token punctuation">\</span>?<span class="token operator">></span> <span class="token punctuation">\</span>l  <span class="token comment"># 查看已有数据库</span><span class="token operator">></span> <span class="token punctuation">\</span>q  <span class="token comment"># 退出数据库命令</span><span class="token operator">></span> <span class="token keyword">select</span> now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 获取当前时间</span><span class="token operator">></span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 查看当前版本</span><span class="token operator">></span> <span class="token punctuation">\</span>q <span class="token comment"># 退出</span>$ dropdb theing  <span class="token comment"># 删除theing这个数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 主要使用命令</span>create table drop table psql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">></span> create table posts <span class="token punctuation">(</span>title varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, content text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 创建一个title 和content</span><span class="token operator">></span> <span class="token punctuation">\</span>dt  <span class="token comment"># 查看所有的表</span><span class="token operator">></span> alter table posts <span class="token function">rename</span> to theing7<span class="token punctuation">;</span> <span class="token comment"># 重命名表名为theing7</span><span class="token operator">></span> drop table theing7<span class="token punctuation">;</span> <span class="token comment"># 删除这个表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初步使用sql创建数据库表</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vim</span> db.sql<span class="token punctuation">..</span>.create table posts <span class="token punctuation">(</span>title varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, content text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">..</span>.$ psql theing7<span class="token operator">></span> <span class="token punctuation">\</span>i db.sql  <span class="token comment"># 使用 \i 导入创建</span><span class="token operator">></span> <span class="token punctuation">\</span>dt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PostgreSql-字段类型"><a href="#PostgreSql-字段类型" class="headerlink" title="PostgreSql 字段类型"></a>PostgreSql 字段类型</h3><ul><li>数值型：<ul><li>integer(int)</li><li>real</li><li>serial</li></ul></li><li>文字型：<ul><li>char</li><li>varchar</li><li>text</li></ul></li><li>布尔型：<ul><li>boolean</li></ul></li><li>日期型：<ul><li>date</li><li>time</li><li>timestamp</li></ul></li><li>特色类型：<ul><li>Array</li><li>网络地址型(inet)</li><li>JSON型</li><li>XML型</li></ul></li></ul><p>参考网站：</p><p><a href="https://www.postgresql.org/docs/9.5/static/datatype.html">https://www.postgresql.org/docs/9.5/static/datatype.html</a></p><h3 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> posts <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    content <span class="token keyword">text</span> <span class="token keyword">check</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    is_draft <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span>    is_del <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>    created_date <span class="token keyword">timestamp</span> <span class="token keyword">default</span> <span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 说明</span><span class="token comment">/*约束条件：not null:不能为空unique:在所有数据中值必须唯一check:字段设置条件default:字段默认值primary key(not null, unique):主键，不能为空，且不能重复*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert-语句"><a href="#insert-语句" class="headerlink" title="insert 语句"></a>insert 语句</h3><p>插入一行值，或列</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">insert into <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span> <span class="token punctuation">(</span>field, <span class="token punctuation">..</span>.<span class="token punctuation">)</span> values <span class="token punctuation">(</span>value, <span class="token punctuation">..</span>.<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> posts <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> posts <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> posts <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'title1'</span><span class="token punctuation">,</span> <span class="token string">'content11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> posts<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> posts <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'title2'</span><span class="token punctuation">,</span> <span class="token string">'content22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> posts <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'title3'</span><span class="token punctuation">,</span> <span class="token string">'content33'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> posts<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><p>init.sql 文件进行初始化</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    player <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    score <span class="token keyword">real</span><span class="token punctuation">,</span>    team <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token punctuation">(</span>player<span class="token punctuation">,</span> score<span class="token punctuation">,</span> team<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'库里'</span><span class="token punctuation">,</span> <span class="token number">28.3</span><span class="token punctuation">,</span> <span class="token string">'勇士'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'哈登'</span><span class="token punctuation">,</span> <span class="token number">30.2</span><span class="token punctuation">,</span> <span class="token string">'火箭'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'阿杜'</span><span class="token punctuation">,</span> <span class="token number">25.6</span><span class="token punctuation">,</span> <span class="token string">'勇士'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'阿詹'</span><span class="token punctuation">,</span> <span class="token number">27.8</span><span class="token punctuation">,</span> <span class="token string">'骑士'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'神龟'</span><span class="token punctuation">,</span> <span class="token number">31.3</span><span class="token punctuation">,</span> <span class="token string">'雷霆'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'白边'</span><span class="token punctuation">,</span> <span class="token number">19.8</span><span class="token punctuation">,</span> <span class="token string">'热火'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看表表中的信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> \i init<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token operator">></span> \dt<span class="token operator">></span> \d users<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> \x  <span class="token comment"># 行列转换</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> \x<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> player<span class="token punctuation">,</span> score <span class="token keyword">from</span> users<span class="token punctuation">;</span>  <span class="token comment"># 查看具体某一列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="where-语句"><a href="#where-语句" class="headerlink" title="where 语句"></a>where 语句</h3><p>where基本是一个限制语句，使用where语句来设定select,update,delete语句数据抽出的条件。</p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> score <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">20</span> <span class="token operator">and</span> score <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> team <span class="token operator">=</span> <span class="token string">'勇士'</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> team <span class="token operator">!=</span> <span class="token string">'勇士'</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> player <span class="token operator">like</span> <span class="token string">'阿%'</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> player <span class="token operator">like</span> <span class="token string">'阿_'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据抽出选项"><a href="#数据抽出选项" class="headerlink" title="数据抽出选项"></a>数据抽出选项</h3><ul><li>order by 列名 asc；  正负排序</li><li>limit 3；   限制3个</li><li>offset 3 ；从第3个开始算</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> team<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> team<span class="token punctuation">,</span> score<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> team<span class="token punctuation">,</span> score <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> team <span class="token keyword">desc</span><span class="token punctuation">,</span> score <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token keyword">offset</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token keyword">offset</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token keyword">offset</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计抽出的数据"><a href="#统计抽出的数据" class="headerlink" title="统计抽出的数据"></a>统计抽出的数据</h3><ul><li>distinct  ；用于返回唯一不同的值（去重的值）。</li><li>sum  ；返回相加的值</li><li>max/min  ；返回最大/最小值；</li><li>group 用于结合聚合函数，根据一个或多个列对结果集进行分组。</li><li>having 子句可以让我们筛选分组后的各组数据。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">distinct</span> team <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> team<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">group</span> <span class="token keyword">by</span> team<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> team<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">group</span> <span class="token keyword">by</span> team <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> team<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">group</span> <span class="token keyword">by</span> team <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">25</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方便函数"><a href="#方便函数" class="headerlink" title="方便函数"></a>方便函数</h3><ul><li>length  ； </li><li>concat</li><li>alias</li><li>substring</li><li>random</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">select</span> player<span class="token punctuation">,</span> length<span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> player<span class="token punctuation">,</span> concat<span class="token punctuation">(</span>player<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> team<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> player<span class="token punctuation">,</span> concat<span class="token punctuation">(</span>player<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> team<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"球员信息"</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> substring<span class="token punctuation">(</span>team<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"球队首文字"</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">,</span> substring<span class="token punctuation">(</span>team<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"球队首文字"</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">order</span> <span class="token keyword">by</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可参考的网站：</p><p><a href="https://www.postgresql.org/docs/9.5/static/functions.html">https://www.postgresql.org/docs/9.5/static/functions.html</a></p><h3 id="更新和删除"><a href="#更新和删除" class="headerlink" title="更新和删除"></a>更新和删除</h3><ul><li>update [table] set [field=newvalue,…] where …</li><li>delete from [table] where …</li></ul><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">update</span> users <span class="token keyword">set</span> score <span class="token operator">=</span> <span class="token number">29.1</span> <span class="token keyword">where</span> player <span class="token operator">=</span> <span class="token string">'阿詹'</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">update</span> users <span class="token keyword">set</span> score <span class="token operator">=</span> score <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">where</span> team <span class="token operator">=</span> <span class="token string">'勇士'</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">update</span> users <span class="token keyword">set</span> score <span class="token operator">=</span> score <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">where</span> team <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'勇士'</span><span class="token punctuation">,</span> <span class="token string">'骑士'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变更表结构"><a href="#变更表结构" class="headerlink" title="变更表结构"></a>变更表结构</h3><ul><li>alter table [tablename] …</li><li>create index …</li><li>drop index …</li></ul><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span> \d users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> users <span class="token keyword">add</span> fullname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> \d users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> users <span class="token keyword">drop</span> fullname<span class="token punctuation">;</span><span class="token operator">></span> \d users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> users <span class="token keyword">rename</span> player <span class="token keyword">to</span> nba_player<span class="token punctuation">;</span><span class="token operator">></span> \d users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> users <span class="token keyword">alter</span> nba_player <span class="token keyword">type</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> \d users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">index</span> nba_player_index <span class="token keyword">on</span> users<span class="token punctuation">(</span>nba_player<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span> \d users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">index</span> nba_player_index<span class="token punctuation">;</span><span class="token operator">></span> \d users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作多个表"><a href="#操作多个表" class="headerlink" title="操作多个表"></a>操作多个表</h3><ul><li>之所以为对象数据库</li><li>表结合查询的基础知识</li></ul><p>例子</p><p>renew.sql中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    player <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    score <span class="token keyword">real</span><span class="token punctuation">,</span>    team <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token punctuation">(</span>player<span class="token punctuation">,</span> score<span class="token punctuation">,</span> team<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'库里'</span><span class="token punctuation">,</span> <span class="token number">28.3</span><span class="token punctuation">,</span> <span class="token string">'勇士'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'哈登'</span><span class="token punctuation">,</span> <span class="token number">30.2</span><span class="token punctuation">,</span> <span class="token string">'火箭'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'阿杜'</span><span class="token punctuation">,</span> <span class="token number">25.6</span><span class="token punctuation">,</span> <span class="token string">'勇士'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'阿詹'</span><span class="token punctuation">,</span> <span class="token number">27.8</span><span class="token punctuation">,</span> <span class="token string">'骑士'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'神龟'</span><span class="token punctuation">,</span> <span class="token number">31.3</span><span class="token punctuation">,</span> <span class="token string">'雷霆'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'白边'</span><span class="token punctuation">,</span> <span class="token number">19.8</span><span class="token punctuation">,</span> <span class="token string">'热火'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> twitters <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    user_id <span class="token keyword">integer</span><span class="token punctuation">,</span>    content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> twitters <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'今天又是大胜,克莱打的真好!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'今晚我得了60分,哈哈!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'获胜咱不怕,缺谁谁尴尬.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'明年我也可能转会西部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'我都双20+了，怎么球队就是不胜呢?'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'明年听说有条大鱼要来,谁呀?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sql导入，并执行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$ dropdb theing7<span class="token punctuation">;</span>$ createdb theing7<span class="token punctuation">;</span>$ psql theing7<span class="token punctuation">;</span><span class="token operator">></span> \i renew<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> twitters<span class="token punctuation">;</span><span class="token comment"># 可结合多个表之间的关系进行查询</span><span class="token operator">></span> <span class="token keyword">select</span> users<span class="token punctuation">.</span>player<span class="token punctuation">,</span> twitters<span class="token punctuation">.</span>content <span class="token keyword">from</span> users<span class="token punctuation">,</span> twitters <span class="token keyword">where</span> users<span class="token punctuation">.</span>id <span class="token operator">=</span> twitters<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> u<span class="token punctuation">.</span>player<span class="token punctuation">,</span> t<span class="token punctuation">.</span>content <span class="token keyword">from</span> users <span class="token keyword">as</span> u<span class="token punctuation">,</span> twitters <span class="token keyword">as</span> t <span class="token keyword">where</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">select</span> u<span class="token punctuation">.</span>player<span class="token punctuation">,</span> t<span class="token punctuation">.</span>content <span class="token keyword">from</span> users <span class="token keyword">as</span> u<span class="token punctuation">,</span> twitters <span class="token keyword">as</span> t <span class="token keyword">where</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>user_id <span class="token operator">and</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pgadmin4-管理工具"><a href="#pgadmin4-管理工具" class="headerlink" title="pgadmin4 管理工具"></a>pgadmin4 管理工具</h2><p><a href="https://www.pgadmin.org/download/">下载地址</a> 和安装步骤可参照官网。</p><p>pgadmin是以浏览器来展示界面的，方便快捷。</p><p>在server 栏右击创建服务器就可以连接数据库。</p><p><img src="https://i.loli.net/2021/07/05/FVuxgK3e7J2j5Po.png" alt="image-20210705115911990"></p><p><img src="https://i.loli.net/2021/07/05/bruCMzaEKGFwo4i.png" alt="image-20210705120148713"></p><p><img src="https://i.loli.net/2021/07/05/Ks9jMAbc1oRhBLZ.png" alt="image-20210705120717621"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker的常用命令</title>
      <link href="/2020/11/20/bei-wang/docker-de-chang-yong-ming-ling/"/>
      <url>/2020/11/20/bei-wang/docker-de-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>docker 的简单使用</p><span id="more"></span><p>有一个网站，<br>play-with-docker</p><p>nginx 的主页在/usr/share/nginx/html/index.html</p><h2 id="镜像的操作"><a href="#镜像的操作" class="headerlink" title="镜像的操作"></a>镜像的操作</h2><p>安装好docker后</p><blockquote><p>docker pull nginx </p></blockquote><p>可以查看已有的镜像</p><blockquote><p>docker images </p></blockquote><p>查看容器，可能作者说错了，ps才是容器。</p><blockquote><p>docker images</p></blockquote><p>删除以be开头的id的镜像id. 5f是m2镜像的id.</p><blockquote><p>docker rm -f 5f</p></blockquote><p>删除这个镜像</p><blockquote><p>docker rmi m2</p></blockquote><p>加载已有的镜像</p><blockquote><p>docker load &lt; 1.tar<br>docker images</p></blockquote><h3 id="保存已有的镜像，m2是镜像名。"><a href="#保存已有的镜像，m2是镜像名。" class="headerlink" title="保存已有的镜像，m2是镜像名。"></a>保存已有的镜像，m2是镜像名。</h3><pre class="line-numbers language-none"><code class="language-none">docker save m2 &gt; 1.tardocker save -o 导出的路径 镜像id.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="加载镜像："><a href="#加载镜像：" class="headerlink" title="加载镜像："></a>加载镜像：</h3><pre class="line-numbers language-none"><code class="language-none">docker load -i 镜像文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改镜像名称"><a href="#修改镜像名称" class="headerlink" title="修改镜像名称"></a>修改镜像名称</h3><pre class="line-numbers language-none"><code class="language-none">docker tag b8 nihak:8.0docker tag 镜像id 镜像名称:版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h2><p>m2为镜像名，<code>.</code>是在当前目录下的dockerfile文件进行构建。</p><blockquote><p>docker build -t m2 .</p></blockquote><ol><li><p>启动由docker构建环境。</p><pre class="line-numbers language-none"><code class="language-none">docker run -d -p 宿主机端口：容器端口 --name 容器名称 镜像表示：镜像名称[:tag]运行其中一个镜像，得到一个id。-d 是后台运行，-p是指定内外端口的映射。 如：&gt; docker run -d -p 81:80 nginx 映内部端口映射到81端口 &gt; docker run -d -p 100:80 m2&gt; docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看在运行的容器</p><pre class="line-numbers language-none"><code class="language-none">docker ps -a加入-a可以查看所有的标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看容器的日志</p><pre class="line-numbers language-none"><code class="language-none">docker logs -f 容器的id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入到容器的内部</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it 容器id bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除容器,删除前要停止容器</p><pre class="line-numbers language-none"><code class="language-none">docker rm 容器iddocker rm $(docker ps -qa)停止指定容器docker stop iddocker stop $(docker ps -qa)docker ps -a启动容器docker start id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>开机自动启动</p><blockquote><p>systemctl start docker<br>systemctl enable docker</p></blockquote><h2 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h2><ul><li>将docker镜像源修改为国内的：</li><li>在 /etc/docker/daemon.json 文件中添加以下参数（没有该文件则新建）：</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://9cpn8tt6.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务重启：</p><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>deepin 安装docker 时要在source.list中手动添加</p><pre class="line-numbers language-none"><code class="language-none">deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian stretch stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="主要的一个镜像网站：Daocloud"><a href="#主要的一个镜像网站：Daocloud" class="headerlink" title="主要的一个镜像网站：Daocloud"></a>主要的一个镜像网站：Daocloud</h4><p>可以通过docker exec -it 可以指定这个nginx 的id（容器id）</p><blockquote><p>docker exec -it 92 bash</p></blockquote><p>删除81这个端口的进程8b为id </p><blockquote><p>docker rm -f 8b </p></blockquote><p>指定一个镜像的名字,92为id名，m1为新的指定的名字</p><blockquote><p>docker commit 92 m1 </p></blockquote><p>dockerfile可以学习一下</p><pre class="line-numbers language-none"><code class="language-none">FROM nginxADD .&#x2F; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;意思就是把本目录下的文件拷贝到这个目录中。就可以在dockerfile 文件下创建一个文件或者网页去启动镜像。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础操作</title>
      <link href="/2020/07/15/linux/linux-ji-chu-cao-zuo/"/>
      <url>/2020/07/15/linux/linux-ji-chu-cao-zuo/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">linux 的常见，常用操作，备忘吧。</blockquote><span id="more"></span><p>目前还用不到生物云计算。</p><p>为什么生物学软件都是基于Linux操作系统？</p><ol><li>Linux 系统是开源免费的。</li><li>不需要图形界面，节约资源。</li><li>强大的命令行模式，适合自动化。</li><li>适合大规模的计算。</li></ol><h2 id="命令行和参数"><a href="#命令行和参数" class="headerlink" title="命令行和参数"></a>命令行和参数</h2><p>date 就可以看时间了<br>cal 显示日历<br>who 显示以登录的用户列表<br>id 用户id名称<br>uptime 显示系统运行的时间<br>last 显示最近用户登录的记录<br>clear 清空。<br>find 查找<br>file 查看文件属性<br>cut 切分文件<br>join 连接</p><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><p>PuTTY 远程登录</p><p>一般我用vscode远程登录服务器。</p><h2 id="服务器文件传输"><a href="#服务器文件传输" class="headerlink" title="服务器文件传输"></a>服务器文件传输</h2><p>FileZilla 文件传输工具</p><p>ncbi ftp 网址可以登录ncbi服务器，佚名登录<br>Ftp Service </p><p>scp 传输命来可以实现传输。一般是用其他的传输工具。 </p><h2 id="13-display-图形查看工具"><a href="#13-display-图形查看工具" class="headerlink" title="13 display 图形查看工具"></a>13 display 图形查看工具</h2><p>一般可以vscode远程都可以实现这些功能，不用那么复杂。</p><h2 id="14-Linux-目录分析"><a href="#14-Linux-目录分析" class="headerlink" title="14 Linux 目录分析"></a>14 Linux 目录分析</h2><p>可以网上找找资料</p><h2 id="15-cd-与-ls"><a href="#15-cd-与-ls" class="headerlink" title="15 cd 与 ls"></a>15 cd 与 ls</h2><p>这种问题可以ranger 解决所以</p><p>cd - 后退命令<br>ls -lh<br>ls *.la 列出以la 结尾的文件</p><h2 id="16-baserc-环境配置"><a href="#16-baserc-环境配置" class="headerlink" title="16 baserc 环境配置"></a>16 baserc 环境配置</h2><p>etc 就是配置目录</p><p>.baserc 就是在开机时候执行的文件，</p><pre class="line-numbers language-none"><code class="language-none"># 显示日期date # 显示一段话echo &quot;Hello Welcome to Linux&quot;# 设置命令别名alias work &#x3D; &#39;cd ~&#x2F;workspace&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>grep “export” ~/.bashrc 表示在baserc中查找<code>export</code>这个单词。</p><h2 id="17-chmod-权限控制"><a href="#17-chmod-权限控制" class="headerlink" title="17 chmod 权限控制"></a>17 chmod 权限控制</h2><p>Linux 是一个多用户的系统，多任务的操作系统。</p><p>文件目录权限可分：</p><ul><li>可读：用r代表reads</li><li>可写：w代表write</li><li>可执行：x代表execute</li></ul><p>权限是十个字符<br><strong>drwxr-xr-x</strong> 1 theing theing  4096 Apr 18 22:57 ./<br>其中第一个字符为一个单位，后面三个字符为一个单位。<br>l 为连接文件<br>d 表示是一个文件夹</p><ul><li>表示为一个普通文件</li></ul><p>chmod 命令来控制文件权限</p><ul><li><p>0表示没有权限</p></li><li><p>1表示课执行权限</p></li><li><p>2表示可写权限</p></li><li><p>4表示可读权限</p></li><li><p>7：可读可写可执行 4+2+1</p></li><li><p>6：可读可写 4+2</p></li><li><p>5：可读可执行 4+1</p></li><li><p>700 属主主可读可写可执行，同用户组没有权限</p></li><li><p>755 属主可读可写可执行，同用户组只能可读可执行，组外用户只能可读可执行</p></li><li><p>644 属主可读可写，同组用户只能可读，组外用户只能可读</p></li></ul><pre class="line-numbers language-none"><code class="language-none">比如 这个文件就只能自己读写行chmod 700 -r *.test.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同一目录下的文件修改需要用到<code>R</code>递归，<code>*</code>通配符也可以用到。</p><h2 id="19-SuperUser"><a href="#19-SuperUser" class="headerlink" title="19 SuperUser"></a>19 SuperUser</h2><p>fdisk 就是format disk格式化磁盘</p><p>useradd gene 可以创建一个gene的用户</p><p>passwd gene 可以给这个用户添加密码</p><p>groupadd bioinfo 这样就可以创建一个bioifo的组</p><p>usermod -G bioinfo gene 就可以将gene 添加到bioinfo 的组中</p><p>groups gene 可以查看用户所在的组</p><p>userdel gene 可以删除用户</p><h2 id="20-获取帮助"><a href="#20-获取帮助" class="headerlink" title="20 获取帮助"></a>20 获取帮助</h2><p>程序是 按照一定的预设规则来处理一定的事情。</p><p>软件指程序与其相关文档或其他从属物的集合。</p><p>软件 = 程序 + 文档</p><p>info ls<br>info cd 等也可以查看命令信息</p><p>man </p><h2 id="21-Linux-文件"><a href="#21-Linux-文件" class="headerlink" title="21 Linux 文件"></a>21 Linux 文件</h2><p>系统一切基于文件</p><p>修改文件后缀名，</p><blockquote><p>mv K12fna k12</p></blockquote><table><thead><tr><th>后缀</th><th>解释</th></tr></thead><tbody><tr><td>.asn</td><td>genome record in asn.1 format</td></tr><tr><td>.faa</td><td>protein sequences in fasta format, text file .ffn</td></tr><tr><td>.frn</td><td>rna coding portions of the genome segments .gbk</td></tr><tr><td>.gff</td><td>genome features</td></tr><tr><td>.ppt</td><td>protein table</td></tr><tr><td>.rnt</td><td>rna table</td></tr><tr><td>.rpt</td><td>summary report</td></tr></tbody></table><blockquote><p>ls -ld /dev/ 可以查看文件属性<br>ls -lh /dev/ </p></blockquote><blockquote><p>stat K12.fna 也可以查看文件属性</p></blockquote><p>du 可以查看文件的大小个目录的大小  </p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>主要讲了移动，重命名，复制粘贴等操作。</p><p>软连接，<code>ln -s</code>基本可以代替<code>cp</code>命令，因为连接可以节省资源，还有一种硬链接（<code>ln</code>)，允许一个文件有多个路径，基本也是软连接，但是你删除本体的时候就会转移，永远无法真正的删除，只能将所有的文件连接删除。</p><p>谨慎使用rm命令 </p><h2 id="22-目录操作"><a href="#22-目录操作" class="headerlink" title="22 目录操作"></a>22 目录操作</h2><p>ranger 也可以</p><p>目录和文件夹一个意思<br>mkdir 创建目录</p><p>可能就是一个通配符的使用上，我不是很流畅</p><h2 id="23-文件查看"><a href="#23-文件查看" class="headerlink" title="23 文件查看"></a>23 文件查看</h2><p><code>less</code>命令可以查看文件少量的文字信息，推荐使用<br><code>more</code>可以查看文件的大量信息</p><p>less 可以读取很大的文本，因为他只是将一部分内容加载到内存中，而在windows中就必须将整个文本读取到内存中。</p><p>less 中可以用”/“来查询需要的字符，”/?”就是向上搜索。</p><p>其次还可以用<code>cat</code>命令来查看一个小的文本文件，小的命令脚本。</p><p><code>tac</code> 与<code>cat</code>相反 是把文本反过来显示</p><p>head命令可以显示前面的10行，可以更改</p><blockquote><p>head -20<br>head -n 20<br>显示前面的20行的文字</p></blockquote><h2 id="24换行符"><a href="#24换行符" class="headerlink" title="24换行符"></a>24换行符</h2><blockquote><p>head -10 linux.fasta |cat -A<br>可以显示10行中显示换行和回车的符号</p></blockquote><p>linux 中的转换工具</p><p>dos2unix : windows 转换linux<br>unix2dos : linux 转换windows<br>unix2mac : linux 转换mac<br>mac2unix : mac 转换为linux</p><h2 id="25-vim文本编辑器"><a href="#25-vim文本编辑器" class="headerlink" title="25 vim文本编辑器"></a>25 vim文本编辑器</h2><p>vim有三种模式<br>命令模式，插入模式，可视化模式</p><p>在vimrc中</p><pre class="line-numbers language-none"><code class="language-none"># 表示语法高亮syntax on # 显示行号set nu # 文本为utf-8的格式支持中文set encoding&#x3D;utf-8# 打开光标的行列显示功能set ruler # 不设置备份set nobackup# 一个tab等于4个空格set tabstop&#x3D;4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-vim-高级技巧"><a href="#26-vim-高级技巧" class="headerlink" title="26 vim 高级技巧"></a>26 vim 高级技巧</h2><p>不过这些都可以用vscode替代。习惯用vscode扩展。</p><p>ctrl + B 往前移一页<br>ctrl + F 往前移一页<br>ctrl + U 屏幕往后移动半页<br>w 每次移动一个单词<br>6x 表示删除光标后面的6个字符<br>d6 删除6行<br>yy 表示复制<br>pp 表示粘贴</p><p>ctrl + r 后退<br>. 可以重复上一次操作<br>? 可以搜索要查找的内容，用N查看下一处</p><p>在编辑模式下用ctrl+P 或ctrl + N 来自动补齐<br>命令模式下nohl（no heaght line 高亮的意思）可以去除高亮。</p><blockquote><p>:%s/human/humwoman/gc 表示全部替换human&gt;humwoman</p></blockquote><p>也可展示的将vim后台，命令模式下</p><blockquote><p>:sh 可进入base ctrl + D 可回到vim中</p></blockquote><blockquote><p>:split 可用于分屏显示 ctrl + w可用于各个屏幕之间的切换<br>:vsplit 可用于纵向分屏<br>:onoly 只显示一个窗口</p></blockquote><h2 id="27-文件的压缩"><a href="#27-文件的压缩" class="headerlink" title="27 - 文件的压缩"></a>27 - 文件的压缩</h2><p>zip gzip bzip2;</p><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p><code>gzip seq.fna</code>gzip 后面加上要压缩的文件就可以用于压缩，压缩后可用less、zcat查看<br><code>gzip -b</code>或者<code>gunzip</code>后面接文件就可以解压了</p><p>具体可help 查看使用信息</p><h4 id="zip-适用于打包"><a href="#zip-适用于打包" class="headerlink" title="zip 适用于打包"></a>zip 适用于打包</h4><p>zip + 打包后的文件名称.zip结尾 + 要打包的文件<br>具体可 –help 查看使用手册<br>unzip 可用于解压</p><h4 id="bzip2-压缩效率最高"><a href="#bzip2-压缩效率最高" class="headerlink" title="bzip2 压缩效率最高"></a>bzip2 压缩效率最高</h4><p>bzip2 + 要压缩的文件<br>bunzip2 + 要解压的文件<br>具体可help查看使用帮助</p><h4 id="RAR压缩文件"><a href="#RAR压缩文件" class="headerlink" title="RAR压缩文件"></a>RAR压缩文件</h4><p>用rarlinux 工具</p><p>不可以用了一个压缩工具后用其他的压缩用具继续压缩</p><h2 id="28-文件的打包tar"><a href="#28-文件的打包tar" class="headerlink" title="28 文件的打包tar"></a>28 文件的打包tar</h2><p>tar 工具是很强大的工具，可以help查看</p><p>一般用 <code>tar -zxvf</code> 去解压文件</p><p>如果遇到要把文件添加到压缩文件中怎么办，不用解压后添加在压缩，<br>可以用-r 选项添加文件，-u可以替换文件。</p><h2 id="29-生物软件的安装"><a href="#29-生物软件的安装" class="headerlink" title="29 生物软件的安装"></a>29 生物软件的安装</h2><p><a href="www.mybiosoftware.com">一个生物信息软件的网站</a>，这是一个生物信息的导航网站，</p><h2 id="30-文件统计及其切分"><a href="#30-文件统计及其切分" class="headerlink" title="30 文件统计及其切分"></a>30 文件统计及其切分</h2><h4 id="文件的统计"><a href="#文件的统计" class="headerlink" title="文件的统计"></a>文件的统计</h4><p>wc + 文件名   统计<br>结果分别行数，字数，字节数，文件名</p><h4 id="文件的拆分-都不是很常用"><a href="#文件的拆分-都不是很常用" class="headerlink" title="文件的拆分(都不是很常用)"></a>文件的拆分(都不是很常用)</h4><p>split 和 cut 命令</p><p>split 是按照行切分数据而cut是按照列切分数据的</p><p>cut -b 1 blast_m8.list 就是将文件中每一行第一个字母输出出来。</p><p>cut -b 1-28 blast_m8.list 就是将文件中每一行1-28的字母输出出来</p><p>其中cut 可用到域这个东西， “|”，竖线中的文字代表着一个域。<br><code>cut -d &quot;|&quot;-f 4 blast_m8.list</code> 提取第四个域中的内容。</p><h2 id="31-文件的比较域校验"><a href="#31-文件的比较域校验" class="headerlink" title="31 文件的比较域校验"></a>31 文件的比较域校验</h2><p>diff和cmp来比较两个文件之间的差异</p><p>diff主要是以行为单位比较。<br>cmp主要是以字节为单位比较。</p><blockquote><p>diff gene_v1.fa gene_v2.fa<br>这样就可以比较出两个文件之间的差异。<br><img src="https://s1.ax1x.com/2020/05/17/YgLxBD.png" alt="YgLxBD.png"></p></blockquote><p>1c1表示第一个文件的第一行有变化，其他a表示增加，d表示删除</p><h2 id="32-快捷方式"><a href="#32-快捷方式" class="headerlink" title="32 快捷方式"></a>32 快捷方式</h2><p>就是要使用全路径才可以在任意目录下使用命令。</p><p>系统的命令主要是放在bin和sbin下也就是/usr/bin/</p><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><p>将程序的执行程序添加到path变量中，或者将软件的执行程序拷贝到/usr/bin或者/usr/loca/bin中</p><p>其中一个好的方法就是在程序的文件下创建一个bin目录存放所有要执行的程序软连接ln -s，然后将这个目录添加到PATH路径如</p><blockquote><p>export PATH=”$PATH:/ifsl/Software/bin/:$PATH/“</p></blockquote><h2 id="33-常见问题"><a href="#33-常见问题" class="headerlink" title="33 常见问题"></a>33 常见问题</h2><p>不断的实践操作， </p><h2 id="34-Linux-进程管理"><a href="#34-Linux-进程管理" class="headerlink" title="34 Linux 进程管理"></a>34 Linux 进程管理</h2><p>uptime 是系统运行的时间，<br>w 直接现实所有用户的信息</p><p>Linux 下每个进程的优先级是不一样的，一共40个级别</p><p>ps 和 top 可以查看进程</p><p>修改进程可以用nice 命令</p><h4 id="进程的前后台处理"><a href="#进程的前后台处理" class="headerlink" title="进程的前后台处理"></a>进程的前后台处理</h4><p>可以在要运行的程序后面加一个 “&amp;”，这样就可以后台运行了<br>jobs 可显示后台运行的程序<br>使用fg可以把后台程序调回前台，调回前台时无法使用命令，可以使用ctrl+z将程序暂停，jobs可以显示程序的暂停情况，bg就可以后台继续运行程序</p><p>其次还要nohup 可以在用户退出时继续执行程序，继而还要weit，sleep </p><h2 id="35-进程管理top"><a href="#35-进程管理top" class="headerlink" title="35 进程管理top"></a>35 进程管理top</h2><p>这个命令就相当于win中的资源管理器，win是模仿Linux加上了图形界面 </p><p>东西有点多，，可以网上查找资料。</p><p>在top模式下，按K可以进入kill也就是杀死进程，输入进程的PID就可以杀死进程。</p><p>进程终止信号，</p><ul><li>1 终端断线</li><li>2 中断，相当于Ctrl + C</li><li>3 退出（同Ctrl+\）</li><li>15 终止进程，默认为15</li><li>9 强制终止</li><li>18 继续（与STOP相反，fg/bg命令）</li><li>19 暂停（同Ctrl+Z)</li></ul><p>在top中查看到PID后可以直接在终端中使用kill命令，</p><blockquote><p>kill -9 30530 </p></blockquote><p>强制终止30530进程</p><h2 id="36-进程管理ps命令"><a href="#36-进程管理ps命令" class="headerlink" title="36 进程管理ps命令"></a>36 进程管理ps命令</h2><p>top是动态的，ps是静态的<br>ps 可显示当前的进程，不包括系统进程</p><h4 id="ps-常用命令"><a href="#ps-常用命令" class="headerlink" title="ps 常用命令"></a>ps 常用命令</h4><blockquote><p>ps -A 列出所有进程<br>ps -a 列出终端上的进程，包括其他用户的进程<br>ps -r 显示运行中的进程     </p></blockquote><p>常用的选项组和是</p><blockquote><p>ps -aux | less<br>ps -lux | less<br>ps -fx 可以用竖型格式显示进程</p></blockquote><p>东西太多，可以参考网上的教程，也可以help 查看文档。</p><blockquote><p>pstree 可以查看进程之间的关系<br>pstree -a 可以查看进程的完整属性，包括路径</p></blockquote><h2 id="37-数据流的重定向"><a href="#37-数据流的重定向" class="headerlink" title="37 数据流的重定向"></a>37 数据流的重定向</h2><p>echo 在终端中输出一串信息</p><p>bc 计算器<br>scale = 4 表示存在四个小数，可以计算四个浮点数<br>quit 可以退出计算器</p><h4 id="“-gt-”表示数据重定向，经常用到，”-gt-gt-”表示追加到文件的末尾"><a href="#“-gt-”表示数据重定向，经常用到，”-gt-gt-”表示追加到文件的末尾" class="headerlink" title="“&gt;”表示数据重定向，经常用到，”&gt;&gt;”表示追加到文件的末尾"></a>“&gt;”表示数据重定向，经常用到，”&gt;&gt;”表示追加到文件的末尾</h4><p>可用于文件的合并</p><blockquote><p>cat –help &gt;cat_help.txt<br>可以把显示在屏幕上的帮助信息写入到help.txt文件中。</p></blockquote><blockquote><p>cat seq1.fna seq2.fna &gt;seqs.fna</p></blockquote><p>这样就可以把两个文本合并在一起，但是可以用vscode远程这些东西。</p><h4 id="问题，"><a href="#问题，" class="headerlink" title="问题，"></a>问题，</h4><p>当一个管道被占用，输出不了信息。可以大于前面添加一个2也就是另一个管道。</p><blockquote><p>cat -2 2&gt;&gt;error.txt</p></blockquote><h2 id="38-命令协作管道"><a href="#38-命令协作管道" class="headerlink" title="38 命令协作管道"></a>38 命令协作管道</h2><p>基本理解可以用蓄水池的出口用另一个管子另外接一个管子使改变流出方向，进行另外的处理。</p><p>例子：</p><blockquote><p>echo “123456789”|wc<br>结果使10个其中包含了换行符，其实是9个字符</p></blockquote><blockquote><p>echo -n “123456789”|wc -m<br>-n 表示 去除结尾的换行符，-m 表示只统计字符</p></blockquote><p>例： </p><blockquote><p>ls -a *.fna | wc -l<br>就可以统计目录下以.fna 结尾的文件</p></blockquote><p>其中的管道在实际运用中可以大量使用到，要即使查看资料</p><h2 id="39-文本排序sort"><a href="#39-文本排序sort" class="headerlink" title="39 文本排序sort"></a>39 文本排序sort</h2><p>排序情况：</p><ol><li>根据数字大小进行排序;</li><li>根据字符大小排序；</li><li>根据文件指定的顺序进行排序。</li></ol><p>sort 默认是从首字母从大到小排序。</p><blockquote><p>sort -n<br>根据数字大小排序<br>-r 相反的顺序排序，具体可以–help</p></blockquote><h2 id="40-文件搜索"><a href="#40-文件搜索" class="headerlink" title="40 文件搜索"></a>40 文件搜索</h2><p>which 查找命令<br>locate 可以查找所有相关的文件，基本就是模糊查找</p><p>find 一般不要在根目录下操作</p><h2 id="41-文本筛选grep"><a href="#41-文本筛选grep" class="headerlink" title="41 文本筛选grep"></a>41 文本筛选grep</h2><ol><li>find 搜索目录下满足条件的文件；</li><li>grep 搜索文件内满足条件的内容行；全称是 全局正则表达式版本。</li></ol><h3 id="grep-的使用"><a href="#grep-的使用" class="headerlink" title="grep 的使用"></a>grep 的使用</h3><p>有时要看–help 参考一些别人写的常用功能。<br>如：</p><pre class="line-numbers language-none"><code class="language-none">grep &quot;&gt;&quot; gene.ffn |wc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示在gene.ffn这个文件中搜索”&gt;” 输入管道”|”用wc统计，一般可用于fasta这种基因序列，一条序列都是”&gt;”符号开头的。 </p><blockquote><p>ls </p></blockquote><h2 id="42-正则表达式"><a href="#42-正则表达式" class="headerlink" title="42 正则表达式"></a>42 正则表达式</h2><p>要想真正发挥grep的功能必须要掌握正则表达式的功能，正则表达式也适用于其他语言</p><blockquote><p>grep “eat” 001.txt </p></blockquote><p>就会把文本中所以含有eat 的行显示出来。这个时候就会用到正则表达式。</p><blockquote><p>grep “^eat” 001.txt 就只能搜索到以eat开头的词。</p></blockquote><blockquote><p>grep “eat&amp;” 001.txt 就只能搜索到以eat结尾的词。</p></blockquote><blockquote><p>grep “\beat\b” 001.txt \b为单词锚定符，这样就只能匹配到eat的词组。</p></blockquote><h3 id="正则中的符号表示"><a href="#正则中的符号表示" class="headerlink" title="正则中的符号表示"></a>正则中的符号表示</h3><ul><li><p>. 任何单个字符的通配符。</p></li><li><p>\ 表示转义符，比如：. 表示“.”</p></li><li><ul><li>通配符，是多个字符的通配符</li></ul></li><li><p><code>grep  &quot;go.*gle&quot; 001.txt</code> 能匹配所有以go开头以gle结尾的词组。</p></li><li><p>？ 表示{0，1}，0或者1次</p></li><li><ul><li>表示{1，}，一次以上</li></ul></li><li><ul><li>表示{0，}，0到无穷大</li></ul></li><li><p><code>grep -E &quot;go&#123;1,8&#125;gle&quot; 001.txt</code> 表示能匹配1-8个字符 </p></li><li><p><code>grep &quot;\(google\)&quot; 001.txt</code> 表示已google为一个字符进行匹配。</p></li><li><p>| 表示或，比如<code>grep -E &quot;beat|seat|heat|feat&quot; 001.txt</code>表示如果符合其中一个就可以匹配</p></li><li><p>[] 表示一个字符集列表，如<code>grep [bfhs]eat 001.txt</code>就可以从[]中符合的字符中进行匹配。只匹配单个字符。[a-z]匹配所有小字母；[A-Z]匹配所有大写的字母；[0-9]表示匹配所有数字。</p></li><li><p>\w单词，[A-Za-z0-9]，单词包括字母，数字和下划线。</p></li><li><p>\s空白，是字符集换页、制表、换行、回车以及空格[\f\t\n\r] 的简写；</p></li><li><p>\d 匹配所有数字[0-9].</p></li><li><p>\W 表示非字符</p></li><li><p>\D 表示非数字</p></li><li><p>\S 非空白字符</p></li></ul><h2 id="sed–波流（一）"><a href="#sed–波流（一）" class="headerlink" title="sed–波流（一）"></a>sed–波流（一）</h2><p>强大是文本编辑工具，sed &amp; awk </p><ul><li>sed 全称是Stream EDitor ，是一种流编辑器。相当于一个磨具，能对数据进行增删改查等操作，形成固定的格式。</li><li>sed 一次处理一行，处理存于一个模式缓存空间</li><li><code>sed -e &#39;s/GI/gi/g&#39; seq.fna</code>， 其中-e一般可以不写，s表示一种模式，为替换模式，寻找GI替换为gi，g表示globe全局搜索替换，默认是只替换一次，所以都加上g。也可以写数字，表示替换几次</li></ul><!--<img src="https://s1.ax1x.com/2020/05/21/Yquw5j.png" alt="Yquw5j.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/05/21/Yquw5j.png" alt="Yquw5j.png"></p><ul><li><code>sed -e &#39;/^\s*$/d&#39; seq_with_space.fna</code>，正则中表示一个空白行，d表示删除。这样就可以删除所有空白的行。</li><li>`sed -n ‘1307p’ seq.fna 表示输出1307行的内容。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息学知识</title>
      <link href="/2020/06/29/qi-ta-za-xiang/sheng-wu-xin-xi-xue-zhi-shi/"/>
      <url>/2020/06/29/qi-ta-za-xiang/sheng-wu-xin-xi-xue-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">喜欢一件事就去做吧，看看究竟是什么，未完待更。</blockquote><span id="more"></span><h2 id="第二章：生物数据库"><a href="#第二章：生物数据库" class="headerlink" title="第二章：生物数据库"></a>第二章：生物数据库</h2><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><ul><li>核酸数据库<ul><li>一级核酸数据库，</li></ul></li><li>蛋白质数据库<ul><li>一级蛋白质数据库，一级蛋白质结构数据库</li></ul></li><li>专用数据库<ul><li>二级核酸数据库，二级蛋白质数据库</li></ul></li></ul><h3 id="文献数据库-PubMed"><a href="#文献数据库-PubMed" class="headerlink" title="文献数据库 PubMed"></a>文献数据库 PubMed</h3><p>搜索中：</p><ul><li>Down [AU] 表示搜索的 Down这个人（作者）</li><li>Down [TI] 表示按标题搜索这个词</li><li>Down [AD] 按实验室地址搜索这个词</li><li>Down      在任意地方搜索这个词</li></ul><h3 id="一级核酸数据库-GenBank"><a href="#一级核酸数据库-GenBank" class="headerlink" title="一级核酸数据库 GenBank"></a>一级核酸数据库 GenBank</h3><ul><li>NCBI 美国</li><li>ENA 欧洲</li><li>DDBJ 日本</li><li>INSDC　国际核酸序列数据库（由以上三大数据库构成，使得以上的数据库数据都大概相同）</li></ul><h3 id="2-4-4-基因组数据库"><a href="#2-4-4-基因组数据库" class="headerlink" title="2.4.4 基因组数据库"></a>2.4.4 基因组数据库</h3><ul><li>ensembl 脊椎动物数据库</li><li>jcvi 微生物数据库</li></ul><h3 id="2-6-二级核酸数据库（比较多）"><a href="#2-6-二级核酸数据库（比较多）" class="headerlink" title="2.6 二级核酸数据库（比较多）"></a>2.6 二级核酸数据库（比较多）</h3><ul><li>RefSep 数据库：参考序列数据库，人工精选出的非冗余数据库。</li><li>dbEST 数据库：表达序列标签数据库，不同物种的表达序列标签。</li><li>Gene 数据库：提供基因序列注释和检索服务。</li><li>ncRNAdb ：非编码RNA数据库，存放已发表的microRNA序列和注释。</li></ul><h3 id="2-7-一级蛋白质数据库"><a href="#2-7-一级蛋白质数据库" class="headerlink" title="2.7 一级蛋白质数据库"></a>2.7 一级蛋白质数据库</h3><ul><li>一级蛋白质-序列-数据库<ul><li>swissprot 人工注释的蛋白质数据库，冗余的小，可信度高。</li><li>RrEMBL 计算机注释的数据库，数据量大，可信度低，冗余量大。</li><li>PIR 蛋白质信息资源数据库，是一个支持基因组学，蛋白质组学和系统生物学研究的综合公共生物信息学资源。</li><li>UniProt 三层数据库<ul><li>UniParc：收录所有子库中的蛋白质序列，量大，粗糙。</li><li>UniRef：归纳了UniProt几个主要数据库并将重复序列去除后的数据库。</li><li>UniProtKB：有详细注释并连接了其他数据库，分为：UniProtKB/Swiss-Prot和UniProtKB/TrEMBL。我们主要用Swiss-prot </li></ul></li></ul></li><li>一级蛋白质-结构-数据库</li></ul><h3 id="2-8-一级蛋白质数据库PDB-生物大分子3D结构的数据库"><a href="#2-8-一级蛋白质数据库PDB-生物大分子3D结构的数据库" class="headerlink" title="2.8 一级蛋白质数据库PDB-生物大分子3D结构的数据库"></a>2.8 一级蛋白质数据库PDB-生物大分子3D结构的数据库</h3><ul><li>这些生物大分子除了蛋白质以外还包括核酸及两者的复合物。</li></ul><h3 id="2-9-二级蛋白质数据库-Pfam-CATH-SCOP2"><a href="#2-9-二级蛋白质数据库-Pfam-CATH-SCOP2" class="headerlink" title="2.9 二级蛋白质数据库 Pfam, CATH, SCOP2"></a>2.9 二级蛋白质数据库 Pfam, CATH, SCOP2</h3><ul><li>Pfam 蛋白质结构域家族的集合</li><li>CATH <ul><li>class </li><li>architecture</li><li>topology</li><li>homologous superfamily</li></ul></li><li>SCOP2  <ul><li>class 主要的二级结构成分</li><li>fold 空间的几何关系</li><li>super family 远源的蛋白质进化关系</li><li>family 相近的蛋白质进化关系</li></ul></li></ul><h3 id="2-10-专用数据库-KEGG-OMIM"><a href="#2-10-专用数据库-KEGG-OMIM" class="headerlink" title="2.10 专用数据库 KEGG OMIM"></a>2.10 专用数据库 KEGG OMIM</h3><ul><li>KEGG 京都基因组百科全书，是关于基因、蛋白质、生化反应及通路的综合生物信息数据库，由多个子库构成。</li><li>OMIM 人类遗传疾病及相关位点的详细信息 </li></ul><h2 id="第三章：序列比较"><a href="#第三章：序列比较" class="headerlink" title="第三章：序列比较"></a>第三章：序列比较</h2><h3 id="3-1序列"><a href="#3-1序列" class="headerlink" title="3.1序列"></a>3.1序列</h3><ul><li>蛋白质序列：由20个不同字母（氨基酸）排列组成。</li><li>核酸序列：由4个不同的字母（碱基）排列组成。</li><li>fasta格式：第一行大于号加名称或其他注释，第二行以后每行60个字母（也有80个的，不一定）</li></ul><p><strong>比较的目的就是确定相似性</strong></p><h3 id="3-3-替换计分矩阵"><a href="#3-3-替换计分矩阵" class="headerlink" title="3.3 替换计分矩阵"></a>3.3 替换计分矩阵</h3><ul><li>反映残基之间相互替换率的矩阵，它描述了残基两两相似的量化关系。分为：<ul><li>DNA替换计分矩阵</li><li>蛋白质替换计分矩阵。</li></ul></li></ul><h4 id="3种常见的DNA序列的替换计分矩阵"><a href="#3种常见的DNA序列的替换计分矩阵" class="headerlink" title="3种常见的DNA序列的替换计分矩阵"></a>3种常见的DNA序列的替换计分矩阵</h4><ul><li>等价矩阵</li><li>转换-颠倒矩阵<ul><li>嘌呤有两个环，嘧啶只有一个环</li><li>转换环数不变A - G、C - T</li><li>颠倒环数发生变化，A - C、T - G </li><li>转换发生的频率要比颠倒高。</li><li>转换得分为-1 ，而颠倒得分为-5.</li></ul></li><li>BLAST 矩阵（就是好）<ul><li>令被比对的两个核苷酸相同时得分为+5，反之为-4，</li><li>这个矩阵广泛地被DNA序列比较采用。</li></ul></li></ul><h4 id="3种常见的蛋白质序列的替换计分矩阵"><a href="#3种常见的蛋白质序列的替换计分矩阵" class="headerlink" title="3种常见的蛋白质序列的替换计分矩阵"></a>3种常见的蛋白质序列的替换计分矩阵</h4><ul><li><p>等价矩阵（较少使用）</p><ul><li>相同氨基酸匹配得分1，不同氨基酸间替换得分0。</li></ul></li><li><p>PAM 矩阵（最广泛使用）- 序列的差异度</p><ul><li>基于进化原理。如果两种氨基酸替换频繁，说明自然界易接受这种替换，那个这对氨基酸得分就高。</li></ul></li><li><p>BLOSUM 矩阵 - 相似度</p></li><li><p><em><strong>关系较远的时候BLOSUM-45更具优势，关系较近的序列用PAM或BLOSUM-62作出的比较差异不大。常用BLOSUM-62矩阵。</strong></em></p></li></ul><h3 id="3-4-序列两两比较-打点法"><a href="#3-4-序列两两比较-打点法" class="headerlink" title="3.4 序列两两比较-打点法"></a>3.4 序列两两比较-打点法</h3><ul><li></li></ul><h3 id="3-5-序列两两比较-序列比对法"><a href="#3-5-序列两两比较-序列比对法" class="headerlink" title="3.5 序列两两比较-序列比对法"></a>3.5 序列两两比较-序列比对法</h3><ul><li>needleman-Wunsch 算法，</li><li><img src="https://s1.ax1x.com/2020/04/14/JSm1dU.png" alt="JSm1dU.png" border="0" /><!--- ![JSm1dU.png](https://s1.ax1x.com/2020/04/14/JSm1dU.png)--></li><li>全局比对（用于比对两个长度近似的序列）</li><li>局部比对（用于比对一长一短的两条序列）</li></ul><h3 id="3-6-一致度和相似度"><a href="#3-6-一致度和相似度" class="headerlink" title="3.6 一致度和相似度"></a>3.6 一致度和相似度</h3><ul><li>一致度 = （一致字符串的个数/全局比对的长度）*100%</li><li>相似度 = （一致及相似的字符的个数/全局比对的长度）*100%</li></ul><h3 id="3-7-在线双序列比对工具"><a href="#3-7-在线双序列比对工具" class="headerlink" title="3.7 在线双序列比对工具"></a>3.7 在线双序列比对工具</h3><ul><li>EMBL 全局双序列比对工具</li><li>gap 开头和gap 结尾的意义，<ul><li>设置的gap开头大，比较集中，序列不容易打开，</li><li>gap 开头小，gap 结尾大，序列容易打开，</li></ul></li><li>EMBL 局部双序列对比工具</li></ul><p><strong>比对工具</strong><br><img src="https://s1.ax1x.com/2020/04/14/JStBjO.png" alt="JStBjO.png" border="0" /></p><!--![JStBjO.png](https://s1.ax1x.com/2020/04/14/JStBjO.png)--><h3 id="3-8-BLAST-搜索"><a href="#3-8-BLAST-搜索" class="headerlink" title="3.8 BLAST 搜索"></a>3.8 BLAST 搜索</h3><ul><li>可以用作寻找相同或相似的序列，一般NCBI、PDB、Uniprot都提供BLAST搜索服务。</li><li>blastp 用蛋白质搜索蛋白质序列的数据库。</li><li>blastn 用核酸序列搜索核酸序列数据库</li><li>blastx 将核酸序列按6条链翻译成蛋白质序列后搜索蛋白质序列数据库</li><li>tblastn 用蛋白质序列搜索核酸序列数据库，数据库中的核酸序列要按6条链翻译成蛋白质序列后再搜索。</li><li>tblastx 将核酸序列按6条链翻译成的蛋白质序列后再搜索核酸序列数据库，数据库中的核酸序列要按6条链翻译成的蛋白质序列后再搜索。</li></ul><img src="https://s1.ax1x.com/2020/04/14/JSfsr4.png" alt="JSfsr4.png" border="0" /><!--![JSfsr4.png](https://s1.ax1x.com/2020/04/14/JSfsr4.png)--><p>只运用blast只能搜索到十分相近的序列，而其他哪些远亲就找不到了，就是朋友的朋友找不到了。</p><ul><li><p>PSI-BLAST（特异性迭代BLAST） 可将搜索出来的序列再用来搜索。</p></li><li><p>PHI-BLAST（模式识别BLAST）能找到与输入序列相似的符合某种特定模式的序列。</p><ul><li>如：以Asn开始，然后紧跟除了Pro之外的任何一个氨基酸，再紧跟Ser或Thr，再紧跟除了Pro外的任何一个氨基酸。写法要用到正则表达N{P}[ST]{P}</li></ul></li><li><p>“{}”表示除什么以外，”[]”表示其中之一，”x”表示任意字符，”(3,7)”表示3到7个前面的字符。</p></li><li><p>一般我们可以用smartBLAST</p></li><li><p>网上的免费的搜索工具</p></li></ul><img src="https://s1.ax1x.com/2020/04/14/Jp9bPx.png" alt="Jp9bPx.png" border="0" /><!--![Jp9bPx.png](https://s1.ax1x.com/2020/04/14/Jp9bPx.png)--><h3 id="3-9-多序列比对介绍"><a href="#3-9-多序列比对介绍" class="headerlink" title="3.9 多序列比对介绍"></a>3.9 多序列比对介绍</h3><p>两条以上的生物序列进行全局比对。 </p><p>用途：</p><ol><li>确认：一个未知的序列是否属于某个家族</li><li>建立：系统发生树，查看物种间或序列间的关系。</li><li>模式识别</li><li>已知推未知</li><li>预测蛋白质/RNA二级结构等，，</li></ol><p>使用多序列的几点要求：</p><ol><li>太多不行。不能超过50条，一般10-15条</li><li>关系太远不行。</li><li>关系太近不行。</li><li>短序列不行。应该都是差不多的序列。</li><li>有重复序列的不行。</li></ol><p>多序列对比工具<br><img src="https://s1.ax1x.com/2020/04/14/JpiY5R.png" alt="JpiY5R.png" border="0" /></p><!--![JpiY5R.png](https://s1.ax1x.com/2020/04/14/JpiY5R.png)--><h3 id="3-10-在线序列比对"><a href="#3-10-在线序列比对" class="headerlink" title="3.10 在线序列比对"></a>3.10 在线序列比对</h3><p>序列文件格式：</p><ul><li>score_html file 很好看的网页格式</li><li>clustalw_aln file 多序列比对用的格式</li><li>fasta_aln file 一条序列一条序列</li><li>phylip file 方便建树用的格式<br>格式转换工具：fmtseq sequence conversion</li></ul><h3 id="3-11多序列比对的编辑和发布"><a href="#3-11多序列比对的编辑和发布" class="headerlink" title="3.11多序列比对的编辑和发布"></a>3.11多序列比对的编辑和发布</h3><p>对多序列比对结果进行彩色显示和手工编辑</p><ul><li><a href="http://www.jalview.org/">Jalview</a> </li><li>多序列比对美化工具</li></ul><img src="https://s1.ax1x.com/2020/04/15/Ji1SzV.png" alt="Ji1SzV.png" border="0" /><!--![Ji1SzV.png](https://s1.ax1x.com/2020/04/15/Ji1SzV.png)--><h3 id="3-12寻找保守区域"><a href="#3-12寻找保守区域" class="headerlink" title="3.12寻找保守区域"></a>3.12寻找保守区域</h3><p>一个重要的问题：我们在多序列比对中获得什么？</p><ul><li>答案是：保守区域</li></ul><h4 id="weblogo-序列标识图"><a href="#weblogo-序列标识图" class="headerlink" title="weblogo -序列标识图"></a>weblogo -序列标识图</h4><p>可用于把重复出现的字母变成某个字母的长度。</p><h4 id="MEME-序列基序"><a href="#MEME-序列基序" class="headerlink" title="MEME - 序列基序"></a>MEME - 序列基序</h4><h4 id="prints-指纹图谱数据库-蛋白质的功能与序列关系"><a href="#prints-指纹图谱数据库-蛋白质的功能与序列关系" class="headerlink" title="prints 指纹图谱数据库-蛋白质的功能与序列关系"></a>prints 指纹图谱数据库-蛋白质的功能与序列关系</h4><ul><li><p>prints 是蛋白质序列指纹图谱数据库，储存了目前已发现的绝大多数蛋白质家族的指纹图谱。对于一个陌生的蛋白质，只要看看它的序列是否符合某个家族的指纹图谱。一个陌生的蛋白质，只要看看它的序列是否符合某个家族的图谱就可以对他进行分类并预测它的功能。</p></li><li><p>一个蛋白质的指纹就是一组保守的序列基序，用于刻画蛋白质家族的特征。这些基序由多序列比对结果获得，且他们在氨基酸序列上是不相邻的，但是在三维结构中，他们可能紧密结合在一起。 </p></li><li><p><a href="http://www.bioinf.manchester.ac.uk/dbbrowser/PRINTS">prints</a></p></li><li><p>掌握序列比较的方法并学会分析它的结果，就可以把诸多看似零散的信息拼接成一个完整的魔方。</p></li></ul><h2 id="第四章：分子进化与系统发生树"><a href="#第四章：分子进化与系统发生树" class="headerlink" title="第四章：分子进化与系统发生树"></a>第四章：分子进化与系统发生树</h2><h3 id="4-1-进化的故事"><a href="#4-1-进化的故事" class="headerlink" title="4.1 进化的故事"></a>4.1 进化的故事</h3><ul><li>拉马克的用进废退和达尔文的进化论，达尔文的更适合解释生物进化现象。</li></ul><h3 id="4-2-基本概念"><a href="#4-2-基本概念" class="headerlink" title="4.2 基本概念"></a>4.2 基本概念</h3><ul><li>如何研究进化：<ul><li>一、生物化石；</li><li>二、比较形态学、比较解剖</li><li>三、分子进化：利用软件，从分子水平上（DNA、RNA、蛋白质序列）构建各种生物间的系统发生树。准确度依赖软件的优劣及参数的设置。</li></ul></li><li><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><ol><li>DNA、RNA或蛋白质序列包含了物种的所有进化史信息；</li><li>分子钟理论：一个特定蛋白质的进化变异的速度在不同物种中是基本恒定的。即两个蛋白质的序列越相近，他们距离共同祖先就越近。</li></ol></li></ul><h4 id="不同的同源"><a href="#不同的同源" class="headerlink" title="不同的同源"></a>不同的同源</h4><ul><li>相似的序列来源有两种途径，一种是来源于共同祖先的相似序列，一种是来源于不同祖先的序列。意思就是，相似序列并不一定是同源序列。</li><li>同源分：<ul><li>直系同源：来源于同一物种的两个物种的相似序列。</li><li>旁系同源：可能会进化出新的与原来有关的功能。</li><li>异同源：通过水平基因转移。来源于共生或病毒侵染所产生的相似基因。</li></ul></li></ul><p>不可以说是同源性80%，只能说是相似性80%，会被人看不起。</p><h3 id="4-3-系统发生树（分子树）"><a href="#4-3-系统发生树（分子树）" class="headerlink" title="4.3 系统发生树（分子树）"></a>4.3 系统发生树（分子树）</h3><ul><li><p>意义：</p><ul><li>对于一个未知的基因或蛋白质序列，确定其亲缘关系最近的物种。</li><li>预测一个新的发现的基因或蛋白质的功能。（相似基因有相似功能）</li><li>有助于预测一个分子功能的走势。</li><li>追溯一个基因的起源。</li></ul></li><li><p>系统发生树的种类</p><ul><li>有根树：反应了树上基因或蛋白质进化的时间顺序，通过分析有根树的树枝的长度，可以了解不同的基因或蛋白质以什么方式和速度进化。</li><li>无根树：只反映分类单元之间的距离，而不涉及谁是谁的祖先问题。</li><li>做有根树需要指定一个外类群，就是你说研究之外的一类群，怎样就可以确定一个共同的祖先，确定一个根。</li></ul></li><li><p>物种树</p><ul><li>1998年伍斯构建了一个涵盖了整个生命界的系统树（物种树）十分庞大。  </li></ul></li><li><p>物种树与分子树</p><ul><li>物种树是基于整个基因组构建的。（比较粗）</li><li>分子树是基于不同物种里某个基因或蛋白质序列之间的关系构建的。（比较细）</li></ul></li></ul><h3 id="4-4-系统发生树的构建"><a href="#4-4-系统发生树的构建" class="headerlink" title="4.4 系统发生树的构建"></a>4.4 系统发生树的构建</h3><ul><li><p>方法：</p><ol><li>基于距离的方法（最快，最不精确）</li><li>最大简约法</li><li>最大自然法（最优）</li><li>贝叶斯推断法（最慢，最精确）</li></ol></li><li><p>软件：</p></li></ul><img src="https://s1.ax1x.com/2020/04/16/JAFwrR.png" alt="JAFwrR.png" border="0" /><!--![JAFwrR.png](https://s1.ax1x.com/2020/04/16/JAFwrR.png)-->如果要发表纯生物学的文章，要两种以上的方法得出一个结果才可以通过<ul><li>基于距离的UPGMA算法<ul><li>非加权分组平均法（UPGMA）</li><li>用序列间不同的碱基数目作为序列间的距离度量。 </li></ul></li></ul><p><a href="https://www.icourse163.org/learn/SDU-1001907001?tid=1450236461&from=study#/learn/content?type=detail&id=1214471868&cid=1218216678&replay=true">算法讲解</a></p><ul><li>用什么序列构建序列发生树？<ul><li>如果DNA 序列两两之间的一致度大于70%，就用DNA序列。</li><li>如果DNA序列两两之间的一致度小于70%的话，DNA序列和蛋白质序列都可以用。（一般用蛋白质序列）</li></ul></li></ul><h3 id="4-5-MEGA7构建系统发生树"><a href="#4-5-MEGA7构建系统发生树" class="headerlink" title="4.5 MEGA7构建系统发生树"></a>4.5 MEGA7构建系统发生树</h3><ul><li><p><a href="https://www.icourse163.org/learn/SDU-1001907001?tid=1450236461&from=study#/learn/content?type=detail&id=1214471869&cid=1218216680&replay=true">连接</a></p></li><li><p>免费、支持多操作系统、被业界认可</p></li><li><p>设置系统发生树的几个设置：</p><ul><li>test of Phylogeny : bootstrap method</li><li>Model/Method : p-distance </li><li>Gaps/Missing Data Treatment : <ul><li>Complete deletion（序列间不同残基的个数来作为度量单位的话）</li><li>partial deletion （部分删除，NG方法）</li></ul></li></ul></li></ul><img src="https://s1.ax1x.com/2020/04/16/JAYukT.png" alt="JAYukT.png" border="0" />- 树上的数字表示可信度- <h2 id="第五章：蛋白质结构的预测与分析"><a href="#第五章：蛋白质结构的预测与分析" class="headerlink" title="第五章：蛋白质结构的预测与分析"></a>第五章：蛋白质结构的预测与分析</h2><h3 id="5-1-蛋白质的结构"><a href="#5-1-蛋白质的结构" class="headerlink" title="5.1 蛋白质的结构"></a>5.1 蛋白质的结构</h3><p>意义，把蛋白质序列三维化</p><ul><li>蛋白质的结构<ul><li>一级结构：氨基酸序列</li><li>二级结构：周期性的结构构象，阿尔法螺旋、β折叠等</li><li>三级结构：整条多肽链的三维空间结构</li><li>四级结构：多个亚基形成的复合体结构，如三聚体、四聚体等</li></ul></li></ul><h3 id="5-2-蛋白质的二级结构"><a href="#5-2-蛋白质的二级结构" class="headerlink" title="5.2 蛋白质的二级结构"></a>5.2 蛋白质的二级结构</h3><ul><li>螺旋：常见的就是阿尔法螺旋。</li><li>β折叠：由β折片平行排列而成。</li><li>β转角：如果肽链发生了急转弯，这个转弯结构叫β转角。</li><li>无规则卷曲：无规则松山结构。</li><li>图形中<ul><li>E、黄色箭头：β折片结构</li><li>G、波浪线：螺旋结构</li><li>T、小鼓包：转角  </li><li>H、代表阿尔法螺旋</li><li>没有字母的结构就是松散的结构</li></ul></li></ul><img src="https://s1.ax1x.com/2020/04/19/Ju2nNq.png" alt="Ju2nNq.png" border="0" /><!--![Ju2nNq.png](https://s1.ax1x.com/2020/04/19/Ju2nNq.png)--><h4 id="DSSP（蛋白质二级结构词典）"><a href="#DSSP（蛋白质二级结构词典）" class="headerlink" title="DSSP（蛋白质二级结构词典）"></a>DSSP（蛋白质二级结构词典）</h4><p>DSSP并不预测二级结构，而是根据二级结构的定义对已经测定的三级结构的蛋白质的各个位置指认出是哪种二级结构。<strong>不能通过氨基酸序列得到DSSP文件（二级结构信息），只能是通过三级结构得到。</strong><br><a href="http://swift.cmbi.ru.nl/gv/dssp">DSSP网址</a></p><ul><li>一般数据库不提供二级结构的文件（DSSP), PDB中有ss.txt的文件（储存有一级、二级总的结构），可以下载。</li></ul><h4 id="蛋白质二级结构的预测"><a href="#蛋白质二级结构的预测" class="headerlink" title="蛋白质二级结构的预测"></a>蛋白质二级结构的预测</h4><ul><li>对于未知的结构的蛋白质，可以通过氨基酸序列，预测其二级结构。</li></ul><img src="https://s1.ax1x.com/2020/04/19/Juh4Fs.png" alt="Juh4Fs.png" border="0" /><!--![Juh4Fs.png](https://s1.ax1x.com/2020/04/19/Juh4Fs.png)--><ul><li>一般邮箱只能是学生邮箱，教育的邮箱，其他的商业邮箱不行。</li></ul><h3 id="5-3-蛋白质的三级结构"><a href="#5-3-蛋白质的三级结构" class="headerlink" title="5.3 蛋白质的三级结构"></a>5.3 蛋白质的三级结构</h3><ul><li>蛋白质结构的测定方法<ul><li>X射线衍射法（主要测定方法，能结晶的蛋白质）</li><li>核磁共振法（不能结晶的蛋白质，测定质量很小）</li><li>冷冻电子显微镜法（价格高）</li></ul></li><li>PDB文件是通过存储每一个原子的3D坐标来存储蛋白质的空间结构的。这些坐标可以被三维可视化的软件读取，并展示出来。</li><li>蛋白质三维可视化软件：<ul><li>VMD（与Pymol差点，但免费）</li><li>Maestro</li><li>Pymol（优秀，但收费）</li></ul></li></ul><h3 id="5-4-三维可视化软件-VMD"><a href="#5-4-三维可视化软件-VMD" class="headerlink" title="5.4 三维可视化软件 VMD"></a>5.4 三维可视化软件 VMD</h3><ul><li>第一节讲了些文件的导入和鼠标的使用。（菜单栏上都有）</li><li>第二节Graphical(绘图的)，里面能更改蛋白质的显示效果_<a href="https://www.icourse163.org/learn/SDU-1001907001?tid=1450236461#/learn/content?type=detail&id=1214471876&cid=1218216701">连接</a></li><li>第三节multiple representations</li></ul><h3 id="5-5-计算方法预测三级结构"><a href="#5-5-计算方法预测三级结构" class="headerlink" title="5.5 计算方法预测三级结构"></a>5.5 计算方法预测三级结构</h3><p>实验三高问题：材料要求高、实验仪器造价高、实验耗时高</p><h4 id="计算方法："><a href="#计算方法：" class="headerlink" title="计算方法："></a>计算方法：</h4><ul><li>从头计算法</li><li>同源建模法（首选）</li><li>穿线法</li><li>综合法</li></ul><h4 id="同源建模法-SWISS-MODLE："><a href="#同源建模法-SWISS-MODLE：" class="headerlink" title="同源建模法 SWISS-MODLE："></a>同源建模法 SWISS-MODLE：</h4><p>相似的氨基酸序列对应着相似的蛋白质结构</p><p><a href="https://swissmodel.expasy.org/">网址链接</a></p><ol><li>找到与目标序列同源的已知结构作为模板（一致度&gt;30%)</li><li>目标序列与模板序列创建序列比对，通常软件自动创建的序列比对还要工校对。</li><li>根据第二步创建的序列比对，用同源软件预测结果模型。</li><li>评估模型质量，并根据评估结果重复以上过程，直到模型质量合格。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言与数据分析（三）</title>
      <link href="/2020/06/26/r-shu-ju-fen-xi/r-yu-yan-ru-men-yu-shu-ju-fen-xi-bi-ji-san/"/>
      <url>/2020/06/26/r-shu-ju-fen-xi/r-yu-yan-ru-men-yu-shu-ju-fen-xi-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">喜欢一件事就去争取吧。</blockquote><span id="more"></span><h2 id="48-相关性检验函数"><a href="#48-相关性检验函数" class="headerlink" title="48-相关性检验函数"></a>48-相关性检验函数</h2><p>在计算好相关性系数之后就可以进行统计学的显著性检验</p><p>需要量化才能证明两个系数的相关性</p><p>还是之前的例子,检测下文盲率和谋杀率之间的关系</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> library<span class="token punctuation">(</span>ggm<span class="token punctuation">)</span><span class="token operator">></span> ?cor.test<span class="token operator">></span> cor.test<span class="token punctuation">(</span>state.x77<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>state.x77<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Pearson's product<span class="token operator">-</span>moment correlationdata<span class="token operator">:</span>  state.x77<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> and state.x77<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>t <span class="token operator">=</span> <span class="token number">6.8479</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">,</span> p<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">1.258e-08</span>  <span class="token comment">## 这里是小于0.05的,说明相关</span>alternative hypothesis<span class="token operator">:</span> true correlation is not equal to <span class="token number">0</span><span class="token number">95</span> percent confidence interval<span class="token operator">:</span>  <span class="token comment">## 这是是置信区间,是统计学中重要的概念</span> <span class="token number">0.5279280</span> <span class="token number">0.8207295</span>sample estimates<span class="token operator">:</span>      cor <span class="token number">0.7029752</span>  <span class="token comment">## 这是是相关系数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h3><p>置信区间: confidence interval,是指由样本统计量所构造的总体参数的估计区间。在统计学中,一个概率样本的置信区间是对这个样本的某个总体参数的区间估计。置信区间展现的是这个参数的真实值有一定概率落在测量结果的周围的程度。置信区间给出的是被测量参数的测量值的可信程度。</p><p>简单的说就是,光给出概率不行,还得给出概率发生的范围.</p><p>psych 包中的 corr.test可以一次性计算多个变量之间的计算</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> corr.test<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span>  <span class="token comment">## 这里我的电脑加载不来</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pcor.test 可用于偏相关的检验</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> x <span class="token operator">=</span> pcor<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cov<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 参数依次为,偏相关系数,控制的变量数,样本数</span><span class="token comment">## 2,3,6三个变量,总共50个州</span><span class="token operator">></span> pcor.test<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">$</span>tval  <span class="token comment">## 学生t检验统计</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">2.476049</span><span class="token operator">$</span>df  <span class="token comment">## 自由度</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">45</span><span class="token operator">$</span>pvalue  <span class="token comment">## p值</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">0.01711252</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分组数据的相关性检验,差异发生的概率,从而比较两个平均数的差异是否显著,主要用于样本含量小,一般小于30个的,总体标准差未知的正太分布数据.</p><h3 id="t检验"><a href="#t检验" class="headerlink" title="t检验"></a>t检验</h3><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 格式为 y~x,其中的y是一个数值型变量，x是一个二分型的变量</span><span class="token operator">></span> ?t.test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> library<span class="token punctuation">(</span>MASS<span class="token punctuation">)</span><span class="token operator">></span> t.test<span class="token punctuation">(</span>Prob <span class="token operator">~</span> So<span class="token punctuation">,</span>data <span class="token operator">=</span> UScrime<span class="token punctuation">)</span>Welch Two Sample t<span class="token operator">-</span>testdata<span class="token operator">:</span>  Prob by Sot <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.8954</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token number">24.925</span><span class="token punctuation">,</span> p<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">0.0006506</span>alternative hypothesis<span class="token operator">:</span> true difference <span class="token keyword">in</span> means is not equal to <span class="token number">0</span><span class="token number">95</span> percent confidence interval<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.03852569</span> <span class="token operator">-</span><span class="token number">0.01187439</span>sample estimates<span class="token operator">:</span>mean <span class="token keyword">in</span> group <span class="token number">0</span> mean <span class="token keyword">in</span> group <span class="token number">1</span>      <span class="token number">0.03851265</span>      <span class="token number">0.06371269</span> <span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非参数检验-方差未知"><a href="#非参数检验-方差未知" class="headerlink" title="非参数检验 方差未知"></a>非参数检验 方差未知</h3><p>非参数检验,在总体方差未知或知道甚少的情况下,利用样本数据对总体分布形态等进行推断的方法。由于非参数检验方法在推断过程中不涉及有关总体分布的参数,因而得名为”非参数”检验</p><h3 id="参数检验"><a href="#参数检验" class="headerlink" title="参数检验"></a>参数检验</h3><p>参数检验,是在<strong>总体分布形式已知</strong>的情况下,对总体分布的参数如均值、方差等进行推断的方法。也就是数据分布已知比如满足正态分布。</p><h2 id="49-绘图函数"><a href="#49-绘图函数" class="headerlink" title="49-绘图函数"></a>49-绘图函数</h2><p>R中四大作图函数</p><ol><li>基础绘图函数（graphics）默认加载</li><li>lattice包</li><li>ggplot2包</li><li>grid包</li></ol><h3 id="基础绘图包"><a href="#基础绘图包" class="headerlink" title="基础绘图包"></a>基础绘图包</h3><p>常用的函数</p><ul><li>arrows 箭头函数</li><li>hist 直方图</li><li>stars 形状图</li><li>pie 饼图</li><li>polygon 多边形图</li></ul><p>查看展示内容</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> demo<span class="token punctuation">(</span>graphics<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>R基础绘图系统分高级绘图和低级绘图，高级绘图可以一步到位。</p><ul><li>散点图：x和y两个坐标数据</li><li>直方图：因子</li><li>热力图：数据矩阵</li><li>要做到看到一个图形就能知道是用那个数据，那个函数做出来</li></ul><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> plot<span class="token punctuation">(</span>women<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>R中的S3系统指属性，泛型函数，方法</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> methods<span class="token punctuation">(</span>plot<span class="token punctuation">)</span><span class="token operator">></span> methods<span class="token punctuation">(</span>summary<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="par函数"><a href="#par函数" class="headerlink" title="par函数"></a>par函数</h3><p>par可以对绘图函数进行设置</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> plot<span class="token punctuation">(</span>as.factor<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>cyl<span class="token punctuation">)</span><span class="token punctuation">,</span>col <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><!--<img src="https://s1.ax1x.com/2020/06/10/t7QYrj.png" alt="t7QYrj.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/10/t7QYrj.png" alt="t7QYrj.png"></p><h2 id="50-自定义函数"><a href="#50-自定义函数" class="headerlink" title="50-自定义函数"></a>50-自定义函数</h2><p>编写函数就是为了减少重复代码的书写</p><p>在R中直接数据函数名，不输入括号就能直接看到源代码</p><h3 id="函数名称"><a href="#函数名称" class="headerlink" title="函数名称"></a>函数名称</h3><ol><li>函数命名与功能相关</li><li>可以是字母和数字的组合，但必须是字母开头</li></ol><p>一些编程知识</p><h2 id="51-R数据分析实战"><a href="#51-R数据分析实战" class="headerlink" title="51-R数据分析实战"></a>51-R数据分析实战</h2><ul><li>小麦产量案例</li><li>药物实验</li><li>社会科学，失业率，犯罪率，</li><li>量化投资产业</li><li>一些反面的教材</li></ul><h2 id="52-线性回归（一）"><a href="#52-线性回归（一）" class="headerlink" title="52-线性回归（一）"></a>52-线性回归（一）</h2><p>回归regression ,通常指那些用一个或多个预测变量,也称自变量或解释变量,来预测响应变量,也称为因变量、效标变量或结果变量的方法。</p><p>通过解释变量来预测响应变量</p><p>人话就是根据很多数据的规律，找到这个数据改在的地方，回归到它本来的地方，</p><h3 id="回归案例"><a href="#回归案例" class="headerlink" title="回归案例"></a>回归案例</h3><ol><li>锻炼时间与消耗卡路里之间是什么关系?</li><li>是直线关系还是曲线关系?</li><li>卡路里消耗到某个点后,锻炼是否还有效果?</li><li>对年轻人和老人影响一致吗?</li><li>对男性和女性影响一致吗?</li><li>对肥胖的人和苗条的人影响一致吗?</li></ol><h3 id="回归分析类型"><a href="#回归分析类型" class="headerlink" title="回归分析类型"></a>回归分析类型</h3><!--<img src="https://s1.ax1x.com/2020/06/10/t7aYVS.png" alt="t7aYVS.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/10/t7aYVS.png" alt="t7aYVS.png"></p><h4 id="R表达式中常用的符号"><a href="#R表达式中常用的符号" class="headerlink" title="R表达式中常用的符号"></a>R表达式中常用的符号</h4><!--<img src="https://s1.ax1x.com/2020/06/10/t7des0.png" alt="t7des0.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/10/t7des0.png" alt="t7des0.png"></p><h3 id="普通最小而成回归法"><a href="#普通最小而成回归法" class="headerlink" title="普通最小而成回归法"></a>普通最小而成回归法</h3><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?lm<span class="token operator">></span> fit <span class="token operator">=</span> lm<span class="token punctuation">(</span>data <span class="token operator">=</span> women<span class="token punctuation">,</span>weight<span class="token operator">~</span>height<span class="token punctuation">)</span><span class="token operator">></span> fitCall<span class="token operator">:</span>lm<span class="token punctuation">(</span>formula <span class="token operator">=</span> weight <span class="token operator">~</span> height<span class="token punctuation">,</span> data <span class="token operator">=</span> women<span class="token punctuation">)</span>Coefficients<span class="token operator">:</span>  <span class="token comment">## 第一个为截距值，第二个是系数值</span><span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span>       height       <span class="token operator">-</span><span class="token number">87.52</span>         <span class="token number">3.45</span> <span class="token operator">></span> summary<span class="token punctuation">(</span>fit<span class="token punctuation">)</span>Call<span class="token operator">:</span>  <span class="token comment">## 这里列出回归的公式</span>lm<span class="token punctuation">(</span>formula <span class="token operator">=</span> weight <span class="token operator">~</span> height<span class="token punctuation">,</span> data <span class="token operator">=</span> women<span class="token punctuation">)</span> Residuals<span class="token operator">:</span>  <span class="token comment">## 残差,真实值和预测值之间的差，如果残差全是0，那就是线性方程</span>    Min      <span class="token number">1</span>Q  Median      <span class="token number">3</span>Q     Max <span class="token operator">-</span><span class="token number">1.7333</span> <span class="token operator">-</span><span class="token number">1.1333</span> <span class="token operator">-</span><span class="token number">0.3833</span>  <span class="token number">0.7417</span>  <span class="token number">3.1167</span> Coefficients<span class="token operator">:</span>  <span class="token comment">## 系数项，intrecept为截距项，Estimate是系数</span>             Estimate Std. Error t value Pr<span class="token punctuation">(</span><span class="token operator">></span><span class="token operator">|</span>t<span class="token operator">|</span><span class="token punctuation">)</span>   <span class="token comment">## 这里的pr就是p值</span><span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">87.51667</span>    <span class="token number">5.93694</span>  <span class="token operator">-</span><span class="token number">14.74</span> <span class="token number">1.71e-09</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>height        <span class="token number">3.45000</span>    <span class="token number">0.09114</span>   <span class="token number">37.85</span> <span class="token number">1.09e-14</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Signif. codes<span class="token operator">:</span>  <span class="token number">0</span> ‘<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.001</span> ‘<span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.01</span> ‘<span class="token operator">*</span>’ <span class="token number">0.05</span> ‘.’ <span class="token number">0.1</span> ‘ ’ <span class="token number">1</span>Residual standard error<span class="token operator">:</span> <span class="token number">1.525</span> on <span class="token number">13</span> degrees of freedomMultiple R<span class="token operator">-</span>squared<span class="token operator">:</span>  <span class="token number">0.991</span><span class="token punctuation">,</span>Adjusted R<span class="token operator">-</span>squared<span class="token operator">:</span>  <span class="token number">0.9903</span>   <span class="token comment">## 表示这个模型课程解释多少比例的数据</span>F<span class="token operator">-</span>statistic<span class="token operator">:</span>  <span class="token number">1433</span> on <span class="token number">1</span> and <span class="token number">13</span> DF<span class="token punctuation">,</span>  p<span class="token operator">-</span>value<span class="token operator">:</span> <span class="token number">1.091e-14</span>  <span class="token comment">## F统计量，p值来衡量，越小越好，越显著。大于0.05时不适用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="53-线性回归（二）"><a href="#53-线性回归（二）" class="headerlink" title="53-线性回归（二）"></a>53-线性回归（二）</h2><p>线性回归常用函数</p><!--<img src="https://s1.ax1x.com/2020/06/10/t7DVtU.png" alt="t7DVtU.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/10/t7DVtU.png" alt="t7DVtU.png"></p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> plot<span class="token punctuation">(</span>fit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成四幅图,分别时残差拟合图,正太QQ图,大小位列图,残差影响图</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> plot<span class="token punctuation">(</span>women<span class="token punctuation">)</span><span class="token operator">></span> abline<span class="token punctuation">(</span>fit<span class="token punctuation">)</span>  <span class="token comment">## 这样就可以在原图上画出回归直线,abline只适用于直线</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="多项式回归-可以更好的拟合数据"><a href="#多项式回归-可以更好的拟合数据" class="headerlink" title="多项式回归,可以更好的拟合数据"></a>多项式回归,可以更好的拟合数据</h3><p>注意公式,</p><p>至于什么时候加,要根据你自己对数据的理解不断尝试,</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> fit2 <span class="token operator">=</span> lm<span class="token punctuation">(</span>data <span class="token operator">=</span> women<span class="token punctuation">,</span>weight<span class="token operator">~</span>height<span class="token operator">+</span>I<span class="token punctuation">(</span>height<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span> fit2<span class="token operator">></span> summary<span class="token punctuation">(</span>fit2<span class="token punctuation">)</span>  <span class="token comment">## 其中的解释更好</span><span class="token operator">></span> plot<span class="token punctuation">(</span>women<span class="token punctuation">)</span><span class="token operator">></span> abline<span class="token punctuation">(</span>fit<span class="token punctuation">)</span><span class="token comment">## 第一个参数时横坐标的数值,第二个参数时根据拟合曲线得出的对应值</span><span class="token operator">></span> lines<span class="token punctuation">(</span>women<span class="token operator">$</span>height<span class="token punctuation">,</span>fitted<span class="token punctuation">(</span>fit2<span class="token punctuation">)</span><span class="token punctuation">,</span>col <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!--<img src="https://s1.ax1x.com/2020/06/11/t7s3WD.png" alt="t7s3WD.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/t7s3WD.png" alt="t7s3WD.png"></p><h2 id="54-多元线性回归"><a href="#54-多元线性回归" class="headerlink" title="54-多元线性回归"></a>54-多元线性回归</h2><p>当预测变量不止一个时，就变成了多元线性回归，相当于求解多元方程，难得时有些变量权重不一样，有些很大有些很小</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> fir <span class="token operator">=</span> lm<span class="token punctuation">(</span>data <span class="token operator">=</span> states<span class="token punctuation">,</span>Murder <span class="token operator">~</span> Population<span class="token operator">+</span>Illiteracy<span class="token operator">+</span>Income<span class="token operator">+</span>Frost<span class="token punctuation">)</span><span class="token operator">></span> summary<span class="token punctuation">(</span>fir<span class="token punctuation">)</span>Call<span class="token operator">:</span>lm<span class="token punctuation">(</span>formula <span class="token operator">=</span> Murder <span class="token operator">~</span> Population <span class="token operator">+</span> Illiteracy <span class="token operator">+</span> Income <span class="token operator">+</span> Frost<span class="token punctuation">,</span>     data <span class="token operator">=</span> states<span class="token punctuation">)</span>Residuals<span class="token operator">:</span>    Min      <span class="token number">1</span>Q  Median      <span class="token number">3</span>Q     Max <span class="token operator">-</span><span class="token number">4.7960</span> <span class="token operator">-</span><span class="token number">1.6495</span> <span class="token operator">-</span><span class="token number">0.0811</span>  <span class="token number">1.4815</span>  <span class="token number">7.6210</span> Coefficients<span class="token operator">:</span>             Estimate Std. Error t value Pr<span class="token punctuation">(</span><span class="token operator">></span><span class="token operator">|</span>t<span class="token operator">|</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span> <span class="token number">1.235e+00</span>  <span class="token number">3.866e+00</span>   <span class="token number">0.319</span>   <span class="token number">0.7510</span>    Population  <span class="token number">2.237e-04</span>  <span class="token number">9.052e-05</span>   <span class="token number">2.471</span>   <span class="token number">0.0173</span> <span class="token operator">*</span>  Illiteracy  <span class="token number">4.143e+00</span>  <span class="token number">8.744e-01</span>   <span class="token number">4.738</span> <span class="token number">2.19e-05</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token comment">## 可以看到与文盲率相关性很大</span>Income      <span class="token number">6.442e-05</span>  <span class="token number">6.837e-04</span>   <span class="token number">0.094</span>   <span class="token number">0.9253</span>    Frost       <span class="token number">5.813e-04</span>  <span class="token number">1.005e-02</span>   <span class="token number">0.058</span>   <span class="token number">0.9541</span>    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Signif. codes<span class="token operator">:</span>  <span class="token number">0</span> ‘<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.001</span> ‘<span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.01</span> ‘<span class="token operator">*</span>’ <span class="token number">0.05</span> ‘.’ <span class="token number">0.1</span> ‘ ’ <span class="token number">1</span>Residual standard error<span class="token operator">:</span> <span class="token number">2.535</span> on <span class="token number">45</span> degrees of freedomMultiple R<span class="token operator">-</span>squared<span class="token operator">:</span>  <span class="token number">0.567</span><span class="token punctuation">,</span>Adjusted R<span class="token operator">-</span>squared<span class="token operator">:</span>  <span class="token number">0.5285</span> F<span class="token operator">-</span>statistic<span class="token operator">:</span> <span class="token number">14.73</span> on <span class="token number">4</span> and <span class="token number">45</span> DF<span class="token punctuation">,</span>  p<span class="token operator">-</span>value<span class="token operator">:</span> <span class="token number">9.133e-08</span><span class="token comment">## 根据系数项和截距项就可以写出方程</span><span class="token operator">></span> coef<span class="token punctuation">(</span>fir<span class="token punctuation">)</span> <span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span>   Population   Illiteracy       Income        Frost <span class="token number">1.2345634112</span> <span class="token number">0.0002236754</span> <span class="token number">4.1428365903</span> <span class="token number">0.0000644247</span> <span class="token number">0.0005813055</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逐步回归"><a href="#逐步回归" class="headerlink" title="逐步回归"></a>逐步回归</h3><p>多个模型之间的关系,一次添加一个或者减少一个,直到模型不变</p><h2 id="55-回归诊断"><a href="#55-回归诊断" class="headerlink" title="55-回归诊断"></a>55-回归诊断</h2><p>诊断要做的</p><ul><li>这个模型是否是最佳模型？</li><li>模型多大程度满足OLS模型的统计假设?</li><li>模型是否经得起更多数据的检验?</li><li>如果拟合出来的模型指标不好,该如何继续下去?</li></ul><h3 id="满足OLS模型统计-只有满足这些条件才可以用lm函数进行拟合"><a href="#满足OLS模型统计-只有满足这些条件才可以用lm函数进行拟合" class="headerlink" title="满足OLS模型统计,只有满足这些条件才可以用lm函数进行拟合"></a>满足OLS模型统计,只有满足这些条件才可以用lm函数进行拟合</h3><ol><li>正态性:对于固定的自变量值,因变量值成正态分布。</li><li>独立性:因变量之间相互独立。</li><li>线性:因变量与自变量之间为线性相关</li><li>同方差性:因变量的方差不随自变量的水平不同而变化。也可称作不变方差。</li></ol><p>分别时残差拟合图,正太QQ图,大小位列图,残差影响图,查阅资料看下这些图的作用</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> fit <span class="token operator">=</span> lm<span class="token punctuation">(</span>data <span class="token operator">=</span> women<span class="token punctuation">,</span> weight<span class="token operator">~</span>height<span class="token punctuation">)</span><span class="token operator">></span> par<span class="token punctuation">(</span>mfrow<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 同时显示四幅图</span><span class="token operator">></span> plot<span class="token punctuation">(</span>fit<span class="token punctuation">)</span><span class="token comment">## 出来的四幅图就是来评价这些条件的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽样法验证"><a href="#抽样法验证" class="headerlink" title="抽样法验证"></a>抽样法验证</h3><ol><li>数据集中有1000个样本,随机抽取500个数据进行回归分析;</li><li>模型建好之后,利用predict函数,对剩余500个样本进行预测,比较残差值;श,接入入採人人</li><li>如果预测准确,说明模型可以,否则就需要调整模型。</li></ol><h2 id="56-方差分析-一"><a href="#56-方差分析-一" class="headerlink" title="56-方差分析(一)"></a>56-方差分析(一)</h2><p>方差分析,称为Analysis of Variance ,简称ANOVA,也称为“变异数分析” ,用于两个及两个以上样本均数差别的显著性检验。从广义上来讲,方差分析也属于回归分析的一种。只不过线性回归的因变量一般是连续型变量。而当自变量是因子时,研究关注的重点通常会从预测转向不同组之间差异的比较。这就是方差分析。</p><h3 id="R中因子的应用"><a href="#R中因子的应用" class="headerlink" title="R中因子的应用"></a>R中因子的应用</h3><ul><li>计算频数</li><li>独立性检验</li><li>相关性检验</li><li>方差分析</li><li>主成分分析</li><li>因子分析</li></ul><h3 id="方差分析的种类"><a href="#方差分析的种类" class="headerlink" title="方差分析的种类"></a>方差分析的种类</h3><ol><li>单因素方差分析ANOVA (组内,组间)</li><li>双因素方差分析ANOVA</li><li>协方差分析ANCOVA</li><li>多元方差分析MANOVA</li><li>多元方差分析MANCOVA</li></ol><h3 id="顺序很重要"><a href="#顺序很重要" class="headerlink" title="顺序很重要"></a>顺序很重要</h3><!--<img src="https://s1.ax1x.com/2020/06/11/tbFPCd.png" alt="tbFPCd.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/tbFPCd.png" alt="tbFPCd.png"></p><h2 id="57-方差分析-二"><a href="#57-方差分析-二" class="headerlink" title="57-方差分析(二)"></a>57-方差分析(二)</h2><p>方差发案例,方差分析主要是看F值和P值</p><h3 id="单因素方差分析"><a href="#单因素方差分析" class="headerlink" title="单因素方差分析"></a>单因素方差分析</h3><p>降低胆固醇药物的五种治疗方法的数据</p><p>没听懂,这里老师讲的莫名其妙的,可以查资料寻找方法</p><h3 id="协方差分析"><a href="#协方差分析" class="headerlink" title="协方差分析"></a>协方差分析</h3><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?litter<span class="token operator">></span> attach<span class="token punctuation">(</span>litter<span class="token punctuation">)</span><span class="token comment">## 因变量werght,协变量gesttime,自变量dose</span><span class="token operator">></span> fit3 <span class="token operator">=</span> avo<span class="token punctuation">(</span>weight <span class="token operator">~</span> gesttime<span class="token operator">+</span>dose<span class="token punctuation">,</span>data <span class="token operator">=</span> litter<span class="token punctuation">)</span><span class="token operator">></span> summary<span class="token punctuation">(</span>fit3<span class="token punctuation">)</span>            Df Sum Sq Mean Sq F value  Pr<span class="token punctuation">(</span><span class="token operator">></span>F<span class="token punctuation">)</span>   gesttime     <span class="token number">1</span>  <span class="token number">134.3</span>  <span class="token number">134.30</span>   <span class="token number">8.049</span> <span class="token number">0.00597</span> <span class="token operator">*</span><span class="token operator">*</span>  <span class="token comment">## 怀孕时间,和体重</span>dose         <span class="token number">3</span>  <span class="token number">137.1</span>   <span class="token number">45.71</span>   <span class="token number">2.739</span> <span class="token number">0.04988</span> <span class="token operator">*</span>   <span class="token comment">## 计量与体重</span>Residuals   <span class="token number">69</span> <span class="token number">1151.3</span>   <span class="token number">16.69</span>                   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Signif. codes<span class="token operator">:</span>  <span class="token number">0</span> ‘<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.001</span> ‘<span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.01</span> ‘<span class="token operator">*</span>’ <span class="token number">0.05</span> ‘.’ <span class="token number">0.1</span> ‘ ’ <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双因素分析案例"><a href="#双因素分析案例" class="headerlink" title="双因素分析案例"></a>双因素分析案例</h3><p>橙汁和维生素c的为食,60只豚鼠,牙齿的生长</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?ToothGrowth<span class="token operator">></span> attach<span class="token punctuation">(</span>ToothGrowth<span class="token punctuation">)</span><span class="token operator">></span> xtabs<span class="token punctuation">(</span><span class="token operator">~</span>supp<span class="token operator">+</span>dose<span class="token punctuation">)</span>    dosesupp <span class="token number">0.5</span>  <span class="token number">1</span>  <span class="token number">2</span>  OJ  <span class="token number">10</span> <span class="token number">10</span> <span class="token number">10</span>  VC  <span class="token number">10</span> <span class="token number">10</span> <span class="token number">10</span><span class="token operator">></span> dose1 <span class="token operator">=</span> factor<span class="token punctuation">(</span>ToothGrowth<span class="token operator">$</span>dose<span class="token punctuation">)</span>  <span class="token comment">## 讲dose转化为因子</span><span class="token operator">></span> fit <span class="token operator">=</span> aov<span class="token punctuation">(</span>data <span class="token operator">=</span> ToothGrowth<span class="token punctuation">,</span>len<span class="token operator">~</span>supp<span class="token operator">*</span>dose1<span class="token punctuation">)</span><span class="token operator">></span> summary<span class="token punctuation">(</span>fit<span class="token punctuation">)</span>            Df Sum Sq Mean Sq F value   Pr<span class="token punctuation">(</span><span class="token operator">></span>F<span class="token punctuation">)</span>    supp         <span class="token number">1</span>  <span class="token number">205.4</span>   <span class="token number">205.4</span>  <span class="token number">15.572</span> <span class="token number">0.000231</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token comment">## 说明为食方法对牙齿的生长有影响,</span>dose1        <span class="token number">2</span> <span class="token number">2426.4</span>  <span class="token number">1213.2</span>  <span class="token number">92.000</span>  <span class="token operator">&lt;</span> <span class="token number">2e-16</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment">## 说明为食计量对牙齿的生长也有影响</span>supp<span class="token operator">:</span>dose1   <span class="token number">2</span>  <span class="token number">108.3</span>    <span class="token number">54.2</span>   <span class="token number">4.107</span> <span class="token number">0.021860</span> <span class="token operator">*</span>  Residuals   <span class="token number">54</span>  <span class="token number">712.1</span>    <span class="token number">13.2</span>                     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Signif. codes<span class="token operator">:</span>  <span class="token number">0</span> ‘<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.001</span> ‘<span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.01</span> ‘<span class="token operator">*</span>’ <span class="token number">0.05</span> ‘.’ <span class="token number">0.1</span> ‘ ’ <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看不懂列的公式了,,,</p><h2 id="58-功效分析"><a href="#58-功效分析" class="headerlink" title="58-功效分析"></a>58-功效分析</h2><p>在这里条论下数据分析中应该使用多少的样本,如果样本少,p值小也是不可信.</p><p>在给定的置信度和概率下计算出所要的样本量,这就是功效分析了</p><p>功效分析, power analysis ,可以帮助在给定置信度的情况下,判断检测到给定效应值时所需的样本量。反过来,它也可以在给定置信度水平情况下,计算在某样本量内能检测到给定效应值的概率。</p><h3 id="功效分析函数"><a href="#功效分析函数" class="headerlink" title="功效分析函数"></a>功效分析函数</h3><!--<img src="https://s1.ax1x.com/2020/06/11/tbaR2j.png" alt="tbaR2j.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/tbaR2j.png" alt="tbaR2j.png"></p><h3 id="功效分析理论基础"><a href="#功效分析理论基础" class="headerlink" title="功效分析理论基础"></a>功效分析理论基础</h3><!--<img src="https://s1.ax1x.com/2020/06/11/tbajMR.png" alt="tbajMR.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/tbajMR.png" alt="tbajMR.png"><br>I型错误就是假阳性,II型错误就是假阴性</p><ol><li>样本大小指的是实验设计中每种条件/组中观测的数目。</li><li>显著性水平(也称为alpha)由型错误的概率来定义。也可以把它看做是发现效应不发生的概率。</li><li>功效通过减去1型错误的概率来定义。我们可以把它看做是真实效应发生的概率。</li><li>效应值指的是在备择或研究假设下效应的量。效应值的表达式依赖于假设检验中使用的统计方法。</li></ol><h3 id="给出任意三种就可以推算第四种"><a href="#给出任意三种就可以推算第四种" class="headerlink" title="给出任意三种就可以推算第四种"></a>给出任意三种就可以推算第四种</h3><!--<img src="https://s1.ax1x.com/2020/06/11/tbwwHP.png" alt="tbwwHP.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/tbwwHP.png" alt="tbwwHP.png"></p><h3 id="线性回归功效的案例"><a href="#线性回归功效的案例" class="headerlink" title="线性回归功效的案例"></a>线性回归功效的案例</h3><p>假设显著性在0.05,那么在90%的置信度的情况下,需要多少的受试者才能得到这样方差</p><h4 id="pwr包"><a href="#pwr包" class="headerlink" title="pwr包"></a>pwr包</h4><p>pwr.f2.test,U为分子自由度,V为分母自由度,f2是效应值,sig.level为显著水平,power为功效水平</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> library<span class="token punctuation">(</span>pwr<span class="token punctuation">)</span><span class="token operator">></span> pwr.f2.test<span class="token punctuation">(</span>u<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>sig.level <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">,</span>power <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span>f2 <span class="token operator">=</span> <span class="token number">0.0769</span><span class="token punctuation">)</span>     Multiple regression power calculation               u <span class="token operator">=</span> <span class="token number">3</span>              v <span class="token operator">=</span> <span class="token number">184.2426</span>             f2 <span class="token operator">=</span> <span class="token number">0.0769</span>      sig.level <span class="token operator">=</span> <span class="token number">0.05</span>          power <span class="token operator">=</span> <span class="token number">0.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方差分析功效分析案例"><a href="#方差分析功效分析案例" class="headerlink" title="方差分析功效分析案例"></a>方差分析功效分析案例</h3><p>一个单因素方差分析,要达到0.9的功效,效应值为0.25,0.05的显著水平,计算每组的样本量</p><p>pwr.anova.test  其中k为组的个数,n是各组的样本大小,也是要求的量,f是效应值</p><pre class="line-numbers language-none"><code class="language-none">## 分两组,每组85个样本&gt; pwr.anova.test(k&#x3D;2,f&#x3D;0.25,sig.level &#x3D; 0.05,power &#x3D; 0.9)     Balanced one-way analysis of variance power calculation               k &#x3D; 2              n &#x3D; 85.03128              f &#x3D; 0.25      sig.level &#x3D; 0.05          power &#x3D; 0.9NOTE: n is number in each group<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="59-广义线性模型"><a href="#59-广义线性模型" class="headerlink" title="59-广义线性模型"></a>59-广义线性模型</h2><p>在自己应用中很多数据都是无规则分布的,要通过分析来找到规律</p><p>线性回归和方差分析都是基于正态分布的假设,广义线性模型扩展了线性模型的框架,它包含了非正态因变量的分析。</p><p>可以用glm进行广义线性回归分析,与lm类似</p><p>glm函数中重要的概率分布函数family,和相应的连接函数faction</p><p>广义线性的拟合</p><p>可用于的分布</p><ul><li>binomial(link = “logit”)  二分项分布</li><li>gaussian(link = “identity”)</li><li>Gamma(link = “inverse”)  </li><li>inverse.gaussian(link = “1/mu^2”)</li><li>poisson(link = “log”)</li><li>quasi(link = “identity”, variance = “constant”)</li><li>quasibinomial(link = “logit”)</li><li>quasipoisson(link = “log”)</li></ul><h3 id="泊松回归"><a href="#泊松回归" class="headerlink" title="泊松回归"></a>泊松回归</h3><p>泊松回归是用来为计数资料和列联表建模的一种回归分析。泊松回归假设因变量是泊松分布,并假设它平均值的对数可被未知参数的线性组合建模。</p><p>泊松分布可用于什么?</p><p>这里对一个癫痫病的年龄和发病率之间的数据</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?glm<span class="token operator">></span> data<span class="token punctuation">(</span>breslow.dat<span class="token punctuation">,</span>package <span class="token operator">=</span> <span class="token string">"robust"</span><span class="token punctuation">)</span>  <span class="token comment">## 加载数据集</span><span class="token operator">></span> attach<span class="token punctuation">(</span>breslow.dat<span class="token punctuation">)</span>  <span class="token comment">## 获取这个数据集</span><span class="token operator">></span> fit4 <span class="token operator">=</span> glm<span class="token punctuation">(</span>data <span class="token operator">=</span> breslow.dat<span class="token punctuation">,</span>family <span class="token operator">=</span> poisson<span class="token punctuation">(</span>link <span class="token operator">=</span> <span class="token string">"log"</span><span class="token punctuation">,</span>sumY<span class="token operator">~</span>Base<span class="token operator">+</span>Trt<span class="token operator">+</span>Age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## sumY为因变量</span><span class="token operator">></span> summary<span class="token punctuation">(</span>fit4<span class="token punctuation">)</span>Call<span class="token operator">:</span>glm<span class="token punctuation">(</span>formula <span class="token operator">=</span> sumY <span class="token operator">~</span> Base <span class="token operator">+</span> Trt <span class="token operator">+</span> Age<span class="token punctuation">,</span> family <span class="token operator">=</span> poisson<span class="token punctuation">(</span>link <span class="token operator">=</span> <span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     data <span class="token operator">=</span> breslow.dat<span class="token punctuation">)</span>Deviance Residuals<span class="token operator">:</span>     Min       <span class="token number">1</span>Q   Median       <span class="token number">3</span>Q      Max  <span class="token operator">-</span><span class="token number">6.0569</span>  <span class="token operator">-</span><span class="token number">2.0433</span>  <span class="token operator">-</span><span class="token number">0.9397</span>   <span class="token number">0.7929</span>  <span class="token number">11.0061</span>  Coefficients<span class="token operator">:</span>               Estimate Std. Error z value Pr<span class="token punctuation">(</span><span class="token operator">></span><span class="token operator">|</span>z<span class="token operator">|</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span>   <span class="token number">1.9488259</span>  <span class="token number">0.1356191</span>  <span class="token number">14.370</span>  <span class="token operator">&lt;</span> <span class="token number">2e-16</span>Base          <span class="token number">0.0226517</span>  <span class="token number">0.0005093</span>  <span class="token number">44.476</span>  <span class="token operator">&lt;</span> <span class="token number">2e-16</span>Trtprogabide <span class="token operator">-</span><span class="token number">0.1527009</span>  <span class="token number">0.0478051</span>  <span class="token operator">-</span><span class="token number">3.194</span>   <span class="token number">0.0014</span>Age           <span class="token number">0.0227401</span>  <span class="token number">0.0040240</span>   <span class="token number">5.651</span> <span class="token number">1.59e-08</span>                <span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Base         <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Trtprogabide <span class="token operator">*</span><span class="token operator">*</span> Age          <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Signif. codes<span class="token operator">:</span>  <span class="token number">0</span> ‘<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.001</span> ‘<span class="token operator">*</span><span class="token operator">*</span>’ <span class="token number">0.01</span> ‘<span class="token operator">*</span>’ <span class="token number">0.05</span> ‘.’ <span class="token number">0.1</span> ‘ ’ <span class="token number">1</span><span class="token punctuation">(</span>Dispersion parameter <span class="token keyword">for</span> poisson family taken to be <span class="token number">1</span><span class="token punctuation">)</span>    Null deviance<span class="token operator">:</span> <span class="token number">2122.73</span>  on <span class="token number">58</span>  degrees of freedomResidual deviance<span class="token operator">:</span>  <span class="token number">559.44</span>  on <span class="token number">55</span>  degrees of freedomAIC<span class="token operator">:</span> <span class="token number">850.71</span>Number of Fisher Scoring iterations<span class="token operator">:</span> <span class="token number">5</span><span class="token operator">></span> coef<span class="token punctuation">(</span>fit4<span class="token punctuation">)</span>  <span class="token comment">## 显示个变量的系数,这里的截距没意义一</span> <span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span>         Base Trtprogabide          Age   <span class="token number">1.94882593</span>   <span class="token number">0.02265174</span>  <span class="token operator">-</span><span class="token number">0.15270095</span>   <span class="token number">0.02274013</span> <span class="token operator">></span> exp<span class="token punctuation">(</span>coef<span class="token punctuation">(</span>fit4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 因为是对数,取指数才与因变量成正比</span> <span class="token punctuation">(</span>Intercept<span class="token punctuation">)</span>         Base Trtprogabide          Age    <span class="token number">7.0204403</span>    <span class="token number">1.0229102</span>    <span class="token number">0.8583864</span>    <span class="token number">1.0230007</span>  <span class="token comment">## 这里相等于年龄长一岁,期望的癫痫病发病率将乘以1.023</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="60-Logistic回归"><a href="#60-Logistic回归" class="headerlink" title="60-Logistic回归"></a>60-Logistic回归</h2><p>当通过一系列连续型或类别型预测变量来预测二值型结果变量时Logistic回归是一个非常有用的工具。</p><h3 id="logistic回归案例"><a href="#logistic回归案例" class="headerlink" title="logistic回归案例"></a>logistic回归案例</h3><p>根据危险因素预测某疾病发生的概率。例如,想探讨胃癌发生的危险因素,可以选择两组人群,一组是胃癌组,一组是非胃癌组,两组人群肯定有不同的体征和生活方式等。这里的因变量就是是否胃癌,即”是”或“否” ,为两分类变量,自变量就可以包括很多了,例如年龄、性别.饮食习惯、幽门螺杆菌感染等。自变量既可以是连续的,也可以是分类的。通过logistic回归分析,就可以大致了解到底哪些因素是胃癌的危险因素</p><p>出轨数据集</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?Affairs<span class="token operator">></span> data<span class="token punctuation">(</span><span class="token string">"Affairs"</span><span class="token punctuation">,</span>package <span class="token operator">=</span> <span class="token string">"AER"</span><span class="token punctuation">)</span><span class="token operator">></span> summary<span class="token punctuation">(</span>Affairs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>老师操作猛如虎,,,看不懂</p><h2 id="61-主成分分析"><a href="#61-主成分分析" class="headerlink" title="61-主成分分析"></a>61-主成分分析</h2><p>就是把很多不相干的数据去除,,降维处理</p><h3 id="主成分分析"><a href="#主成分分析" class="headerlink" title="主成分分析"></a>主成分分析</h3><p>主成分分析, Principal Component Analysis,也简称为PCA,是一种数据降维技巧,它能将大量相关变量转化为一组很少的不相关变量,这些无关的变量称为主成分。主成分其实是对原始变量重新进行线性组合将原先众多具有一定相关性的指标,重新组合为一组的新的相互独立的综合指标。</p><p>相当于聚类,有联系的聚在一组,成为独立的一簇</p><p>相关性最大的为Pc1,第二的为a1x1,第三的为a2x2,,,a_k*X_k</p><h3 id="R中自带的princomp可以进行主成分分析"><a href="#R中自带的princomp可以进行主成分分析" class="headerlink" title="R中自带的princomp可以进行主成分分析"></a>R中自带的princomp可以进行主成分分析</h3><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?princomp<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="利用pshch中的"><a href="#利用pshch中的" class="headerlink" title="利用pshch中的"></a>利用pshch中的</h3><h3 id="主成分分析与因子分析步骤"><a href="#主成分分析与因子分析步骤" class="headerlink" title="主成分分析与因子分析步骤"></a>主成分分析与因子分析步骤</h3><ol><li>数据预处理;</li><li>选择分析模型;</li><li>判断要选择的主成分/因子数目;  ## 通过绘制碎石图</li><li>选择主成分烟子;</li><li>旋转主成分/因子;</li><li>解释结果;</li><li>计算主成分或因子得分。这步也是可选的。</li></ol><h3 id="对USJudgeRationgs数据集的预测"><a href="#对USJudgeRationgs数据集的预测" class="headerlink" title="对USJudgeRationgs数据集的预测"></a>对USJudgeRationgs数据集的预测</h3><!--<img src="https://s1.ax1x.com/2020/06/11/tqWhTg.png" alt="tqWhTg.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/tqWhTg.png" alt="tqWhTg.png"></p><ol><li>数据不需要处理了</li><li>PCA分析</li><li>判断要选择的主成分数目<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> library<span class="token punctuation">(</span>psych<span class="token punctuation">)</span><span class="token operator">></span> fa.parallel<span class="token punctuation">(</span>USJudgeRatings<span class="token punctuation">,</span>fa <span class="token operator">=</span> <span class="token string">"pc"</span><span class="token punctuation">,</span>n.iter <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>碎石图什么原理,可以取研究下平行分析法</p><!--<img src="https://s1.ax1x.com/2020/06/11/tqhAvq.png" alt="tqhAvq.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/11/tqhAvq.png" alt="tqhAvq.png"></p><p>我的包加载不出来,奇怪的很</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> pc <span class="token operator">=</span> principal<span class="token punctuation">(</span>USJudgeRatings<span class="token punctuation">,</span>nfactors <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>rotate <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">,</span>scores <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言与数据分析（二）</title>
      <link href="/2020/06/26/r-shu-ju-fen-xi/r-yu-yan-ru-men-yu-shu-ju-fen-xi-bi-ji-er/"/>
      <url>/2020/06/26/r-shu-ju-fen-xi/r-yu-yan-ru-men-yu-shu-ju-fen-xi-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">喜欢一件事就去争取吧。</blockquote><span id="more"></span><h2 id="34-数据转换"><a href="#34-数据转换" class="headerlink" title="34-数据转换"></a>34-数据转换</h2><p>数据的收集和存储已经会了,这里开始数据的转换,转换后就可以分析数据了.</p><p>前面介绍是向量,矩阵,数组,数据框,列表,因子,时间序列,等的增删改查</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> cars32 <span class="token operator">=</span> read.csv<span class="token punctuation">(</span><span class="token string">"mtcars.csv"</span><span class="token punctuation">)</span><span class="token operator">></span> is.data.frame<span class="token punctuation">(</span>cars32<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token boolean">TRUE</span>  <span class="token comment">## 表示是一个矩阵</span><span class="token operator">></span> is.data.frame<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token boolean">FALSE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换为数据框</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> dstate.x77 <span class="token operator">=</span> as.data.frame<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转换为矩阵,变为字符串类型的矩阵</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> as.matrix<span class="token punctuation">(</span>data.frame<span class="token punctuation">(</span>state.region<span class="token punctuation">,</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>methods查看内容</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> methods<span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token operator">></span> methods<span class="token punctuation">(</span>as<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="向量是R种基本的数据类型-加上一个维度就是数组或者矩阵"><a href="#向量是R种基本的数据类型-加上一个维度就是数组或者矩阵" class="headerlink" title="向量是R种基本的数据类型,加上一个维度就是数组或者矩阵"></a>向量是R种基本的数据类型,加上一个维度就是数组或者矩阵</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## > is.data.frame(state.x77)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token boolean">FALSE</span><span class="token operator">></span> x <span class="token operator">=</span> state.abb<span class="token operator">></span> dim<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">## 向量变因子</span><span class="token operator">></span> x <span class="token operator">=</span> state.babb<span class="token operator">></span> as.factor<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">## 变为列表</span><span class="token operator">></span> as.list<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一个数据框</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> state <span class="token operator">=</span> data.frame<span class="token punctuation">(</span>x<span class="token punctuation">,</span>state.region<span class="token punctuation">,</span>state.x77<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="35-数据转换-二"><a href="#35-数据转换-二" class="headerlink" title="35-数据转换(二)"></a>35-数据转换(二)</h2><p>讲一个取子集的操作</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 这是一个数据框</span><span class="token operator">></span> who <span class="token operator">=</span> read.csv<span class="token punctuation">(</span><span class="token string">"WHO.csv"</span><span class="token punctuation">,</span>header <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token operator">></span> who1 <span class="token operator">=</span> who<span class="token punctuation">[</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> who2 <span class="token operator">=</span> who<span class="token punctuation">[</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取出CountryID 在50到100的国家,似乎不知道怎么去理解</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> who4 <span class="token operator">=</span> who<span class="token punctuation">[</span>which<span class="token punctuation">,</span><span class="token punctuation">(</span>who<span class="token operator">$</span>CountryID <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&amp;</span> who<span class="token operator">$</span>CountryID <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> who4 <span class="token operator">=</span> subset<span class="token punctuation">(</span>who<span class="token punctuation">,</span>who<span class="token operator">$</span>CountryID <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&amp;</span> who<span class="token operator">$</span>CountryID <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>sample抽样,机器学习中抽取两份样本,一份用来建模,一份用来验证模型的有效性</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?sample<span class="token comment">## 例子,第一个参数为是选择那个向量,第二个是要抽取的个数,replace 表示是否放回式的抽样.</span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">100</span><span class="token operator">></span> sample<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>replace <span class="token operator">=</span> T<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">39</span> <span class="token number">23</span> <span class="token number">11</span> <span class="token number">26</span> <span class="token number">50</span> <span class="token number">86</span> <span class="token number">86</span> <span class="token number">71</span> <span class="token number">26</span>  <span class="token number">6</span> <span class="token number">10</span> <span class="token number">93</span> <span class="token number">81</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">87</span> <span class="token number">98</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span>  <span class="token number">6</span> <span class="token number">17</span> <span class="token number">87</span> <span class="token number">10</span> <span class="token number">69</span> <span class="token number">51</span> <span class="token number">24</span> <span class="token number">22</span> <span class="token number">70</span> <span class="token number">33</span> <span class="token number">68</span> <span class="token number">97</span> <span class="token number">82</span><span class="token operator">></span> sort<span class="token punctuation">(</span>sample<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>replace <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token number">8</span> <span class="token number">19</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">28</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">42</span> <span class="token number">50</span> <span class="token number">50</span> <span class="token number">50</span> <span class="token number">51</span> <span class="token number">52</span> <span class="token number">55</span> <span class="token number">58</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token number">60</span> <span class="token number">63</span> <span class="token number">70</span> <span class="token number">73</span> <span class="token number">77</span> <span class="token number">78</span> <span class="token number">83</span> <span class="token number">83</span> <span class="token number">84</span> <span class="token number">85</span> <span class="token number">89</span> <span class="token number">93</span> <span class="token number">96</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sample对数据框进行抽样,取子集</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> who<span class="token punctuation">[</span>sample<span class="token punctuation">(</span>who<span class="token operator">$</span>CountryID<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>replace <span class="token operator">=</span> F<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除固定行的数据</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 注意逗号的位置</span><span class="token operator">></span> mtcars<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment">## 清空这一行的数据</span><span class="token operator">></span> mtcars<span class="token operator">$</span>mpg <span class="token operator">=</span> <span class="token keyword">NULL</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果遇到几个数据表进行汇总,这里要用到数据框的合并,可以使用cbind和rbind函数,cbind添加一列,rbind添加一行.</p><p>cbind合并列</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## USArrests是一个数据集,state.division是一个因子</span><span class="token operator">></span> cbind<span class="token punctuation">(</span>USArrests<span class="token punctuation">,</span>state.division<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>rbind合并行,这个比较麻烦,需要所有的列有源数据集有相同的列名</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 取出前20行和尾20行合并</span><span class="token operator">></span> data1 <span class="token operator">=</span> head<span class="token punctuation">(</span>USArrests<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">></span> data2 <span class="token operator">=</span> head<span class="token punctuation">(</span>USArrests<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">></span> b <span class="token operator">=</span> rbind<span class="token punctuation">(</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>cbind和rbind也可以用于矩阵</p><p>回顾rownames可以取出行名</p><p>判断向量和数据框中哪些是重复值</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> duplicated<span class="token punctuation">(</span>who<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用unique(data4)可以一步取出重复项</p><h2 id="36-数据转换-三"><a href="#36-数据转换-三" class="headerlink" title="36-数据转换(三)"></a>36-数据转换(三)</h2><p>R中行列的调换,excel中可以复制后选择性粘贴.R中可以用<code>t()</code>函数实现转换</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> sractm <span class="token operator">=</span> t<span class="token punctuation">(</span>mtcars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独一行的反转,生物序列中很常见,主要是反向互补,可以使用rev函,reverse的意思 </p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> letters <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"a"</span> <span class="token string">"b"</span> <span class="token string">"c"</span> <span class="token string">"d"</span> <span class="token string">"e"</span> <span class="token string">"f"</span> <span class="token string">"g"</span> <span class="token string">"h"</span> <span class="token string">"i"</span> <span class="token string">"j"</span> <span class="token string">"k"</span> <span class="token string">"l"</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token string">"m"</span> <span class="token string">"n"</span> <span class="token string">"o"</span> <span class="token string">"p"</span> <span class="token string">"q"</span> <span class="token string">"r"</span> <span class="token string">"s"</span> <span class="token string">"t"</span> <span class="token string">"u"</span> <span class="token string">"v"</span> <span class="token string">"w"</span> <span class="token string">"x"</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token string">"y"</span> <span class="token string">"z"</span><span class="token operator">></span> rev<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"z"</span> <span class="token string">"y"</span> <span class="token string">"x"</span> <span class="token string">"w"</span> <span class="token string">"v"</span> <span class="token string">"u"</span> <span class="token string">"t"</span> <span class="token string">"s"</span> <span class="token string">"r"</span> <span class="token string">"q"</span> <span class="token string">"p"</span> <span class="token string">"o"</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token string">"n"</span> <span class="token string">"m"</span> <span class="token string">"l"</span> <span class="token string">"k"</span> <span class="token string">"j"</span> <span class="token string">"i"</span> <span class="token string">"h"</span> <span class="token string">"g"</span> <span class="token string">"f"</span> <span class="token string">"e"</span> <span class="token string">"d"</span> <span class="token string">"c"</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token string">"b"</span> <span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据框中的数据反转,思路就是,提取行名,反转,以反转后的行名为索引</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> rowname<span class="token punctuation">(</span>women<span class="token punctuation">)</span><span class="token operator">></span> rev<span class="token punctuation">(</span>rowname<span class="token punctuation">(</span>women<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span> women<span class="token punctuation">[</span>rev<span class="token punctuation">(</span>rowname<span class="token punctuation">(</span>women<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如何修改数据框中的值，可以使用transform()</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 比如</span><span class="token operator">></span> transform<span class="token punctuation">(</span>women<span class="token punctuation">,</span>height<span class="token operator">=</span>height<span class="token operator">*</span><span class="token number">2.54</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>排序</p><p>sort可以对向量进行排序,可以排序数字,字母,</p><p>sort中也可以设置参数decreasing = T进行从大小排序</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> sort<span class="token punctuation">(</span>rivers<span class="token punctuation">,</span>decreasing <span class="token operator">=</span> T<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>order排序返回的是排序后的索引值,在数据框中是比较常用的.返回索引值后可以拿来数据框的排序</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 如果换成sort就不行了</span><span class="token operator">></span> mtcars<span class="token punctuation">[</span>order<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>mpg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment">## "-"反向排序,也可以加参数decreasing = T</span><span class="token operator">></span> mtcars<span class="token punctuation">[</span>order<span class="token punctuation">(</span><span class="token operator">-</span>mtcars<span class="token operator">$</span>mpg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">></span> mtcars<span class="token punctuation">[</span>order<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>mpg<span class="token punctuation">,</span>decreasing <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次还有rank 函数,</p><h2 id="37-数据转换-四"><a href="#37-数据转换-四" class="headerlink" title="37-数据转换(四)"></a>37-数据转换(四)</h2><p>如何对数据框进行数学计算</p><!--<img src="https://s1.ax1x.com/2020/06/06/t6o5dS.png" alt="t6o5dS.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/06/t6o5dS.png" alt="t6o5dS.png"></p><p>统计</p><pre class="line-numbers language-r" data-language="r"><code class="language-r">worldphones <span class="token operator">=</span> as.data.frame<span class="token punctuation">(</span>WorldPhones<span class="token punctuation">)</span>  <span class="token comment">## 转换成数据框</span>rs <span class="token operator">=</span> rowSums<span class="token punctuation">(</span>worldphones<span class="token punctuation">)</span>  <span class="token comment">## 对行进行求和</span>cm <span class="token operator">=</span> colMeans<span class="token punctuation">(</span>worldphones<span class="token punctuation">)</span>  <span class="token comment">## 对列求平均</span>total <span class="token operator">=</span> cbind<span class="token punctuation">(</span>worldphones<span class="token punctuation">,</span>Total<span class="token operator">=</span>rs<span class="token punctuation">)</span>  <span class="token comment">## 添加一列</span>rbind<span class="token punctuation">(</span>total<span class="token punctuation">,</span>cm<span class="token punctuation">)</span>  <span class="token comment">## 添加一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apply函数,使用与数据框和矩阵,可以有多个功能参数</p><p>主要四两个参数,margin,fun;margin = 1表示对行进行求和,2表示对列进行求和.fun表示功能,要进行的操作</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?apply<span class="token comment">## 对行求和</span><span class="token operator">></span> apply<span class="token punctuation">(</span>WorldPhones<span class="token punctuation">,</span>MARGIN <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>FUN <span class="token operator">=</span> sum<span class="token punctuation">)</span><span class="token comment">## 对列求平均值</span><span class="token operator">></span> apply<span class="token punctuation">(</span>WorldPhones<span class="token punctuation">,</span>MARGIN <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>FUN <span class="token operator">=</span> mean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lapply 表示list apply ,适用于list列表</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> lapply<span class="token punctuation">(</span>state.center<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token operator">$</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">50</span><span class="token operator">$</span>y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sapply</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> sapply<span class="token punctuation">(</span>state.center<span class="token punctuation">,</span> length<span class="token punctuation">)</span> x  y <span class="token number">50</span> <span class="token number">50</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>tapply 用于处理因子数据,根据因子分组,然后根据因子分组进行处理</p><p>第一个参数问数据集,第三个参数是要使用的函数</p><p>没咋懂!!!</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> tapply<span class="token punctuation">(</span>state.name<span class="token punctuation">,</span>state.division<span class="token punctuation">,</span>FUN<span class="token operator">=</span>length<span class="token punctuation">)</span>       New England    Middle Atlantic                  <span class="token number">6</span>                  <span class="token number">3</span>     South Atlantic East South Central                  <span class="token number">8</span>                  <span class="token number">4</span> West South Central East North Central                  <span class="token number">4</span>                  <span class="token number">5</span> West North Central           Mountain                  <span class="token number">7</span>                  <span class="token number">8</span>            Pacific                  <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="R中数据的中心化与标准化处理"><a href="#R中数据的中心化与标准化处理" class="headerlink" title="R中数据的中心化与标准化处理"></a>R中数据的中心化与标准化处理</h3><p>数据的中心化,是指数据集中的各项数据减去数据集的均值</p><p>数据的标准化,是指在中心化后在除以数据集的标准差,即数据集中的各项数据减去数据集的均值再除以数据集的标准差.</p><p>R中实现中心化和标准化可以用scale函数,有两个参数,center和scale</p><p>比如state.x77这个数据集</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> x <span class="token operator">=</span> scale<span class="token punctuation">(</span>state.x77<span class="token punctuation">,</span>center <span class="token operator">=</span> T<span class="token punctuation">,</span>scale <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token operator">></span> heatmap<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="38-数据格式的转换-reshape2包"><a href="#38-数据格式的转换-reshape2包" class="headerlink" title="38-数据格式的转换(reshape2包)"></a>38-数据格式的转换(reshape2包)</h2><p>大概的过程相当于钢铁的制造过程,先把铁融化,然后在做成想要的形状.在数据的过程中,称为柔数据,很像是excel中的数据透视表.</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 这里是一组空气质量的数据</span><span class="token operator">></span> names<span class="token punctuation">(</span>airquality<span class="token punctuation">)</span> <span class="token operator">=</span> tolower<span class="token punctuation">(</span>names<span class="token punctuation">(</span>airquality<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 把首字母小写</span><span class="token operator">></span> melt<span class="token punctuation">(</span>airquality<span class="token punctuation">)</span>  <span class="token comment">## 融合数据</span><span class="token operator">></span> aql <span class="token operator">=</span> melt<span class="token punctuation">(</span>airquality<span class="token punctuation">)</span>  <span class="token comment">## 融合后数据变为三列</span><span class="token operator">></span> aql <span class="token operator">=</span> melt<span class="token punctuation">(</span>airquality<span class="token punctuation">,</span>id.vars <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span><span class="token string">"day"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 将月份和日期作为id变量.</span><span class="token operator">></span> aqw <span class="token operator">=</span> dcast<span class="token punctuation">(</span>aql<span class="token punctuation">,</span>month<span class="token operator">+</span>day <span class="token operator">~</span>variable<span class="token punctuation">)</span>  <span class="token comment">## 重铸数据,与variable相关联</span><span class="token operator">></span> aqw <span class="token operator">=</span> dcast<span class="token punctuation">(</span>aql<span class="token punctuation">,</span>month<span class="token operator">+</span>day <span class="token operator">~</span>variable<span class="token punctuation">,</span>fun.aggregate <span class="token operator">=</span> mean<span class="token punctuation">,</span>na.rm<span class="token operator">=</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没怎么听懂.  可以在右下的框框中找到reshape2的帮助包,找到acast和dcast把其中的案例都运行一边,</p><p>~ 表示有关联有关系 </p><h2 id="39-数据格式的转换-tidyr包"><a href="#39-数据格式的转换-tidyr包" class="headerlink" title="39-数据格式的转换(tidyr包)"></a>39-数据格式的转换(tidyr包)</h2><p>简洁数据中</p><ol><li>每一列代表一个变量</li><li>每一行代表一个观测</li><li>每一个观测的值在表中的一个单元格中 </li></ol><p>tidyr包中有四个重要的函数</p><ul><li>gather 主要是将宽数据转换成长数据,类似于reshape2包中的melt函数   </li><li>spread 将长数据转换成宽数据,类似于reshape中的cast函数</li><li>unite 是将多列合并为一列</li><li>separate 是将一列分成多列</li></ul><p>mtcars数据集为例,就是一个标准的tidydata数据集</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> tdata <span class="token operator">=</span> mtcars<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> tdata                   mpg cyl  dispMazda RX4         <span class="token number">21.0</span>   <span class="token number">6</span> <span class="token number">160.0</span>Mazda RX4 Wag     <span class="token number">21.0</span>   <span class="token number">6</span> <span class="token number">160.0</span>Datsun <span class="token number">710</span>        <span class="token number">22.8</span>   <span class="token number">4</span> <span class="token number">108.0</span>Hornet <span class="token number">4</span> Drive    <span class="token number">21.4</span>   <span class="token number">6</span> <span class="token number">258.0</span>Hornet Sportabout <span class="token number">18.7</span>   <span class="token number">8</span> <span class="token number">360.0</span>Valiant           <span class="token number">18.1</span>   <span class="token number">6</span> <span class="token number">225.0</span>Duster <span class="token number">360</span>        <span class="token number">14.3</span>   <span class="token number">8</span> <span class="token number">360.0</span>Merc <span class="token number">240</span>D         <span class="token number">24.4</span>   <span class="token number">4</span> <span class="token number">146.7</span>Merc <span class="token number">230</span>          <span class="token number">22.8</span>   <span class="token number">4</span> <span class="token number">140.8</span>Merc <span class="token number">280</span>          <span class="token number">19.2</span>   <span class="token number">6</span> <span class="token number">167.6</span><span class="token comment">## 以第一列的数据添加到数据集中</span><span class="token operator">></span> tdata <span class="token operator">=</span> data.frame<span class="token punctuation">(</span>names<span class="token operator">=</span>rownames<span class="token punctuation">(</span>tdata<span class="token punctuation">)</span><span class="token punctuation">,</span>tdata<span class="token punctuation">)</span><span class="token operator">></span> tdata                              names  mpg cyl  dispMazda RX4                 Mazda RX4 <span class="token number">21.0</span>   <span class="token number">6</span> <span class="token number">160.0</span>Mazda RX4 Wag         Mazda RX4 Wag <span class="token number">21.0</span>   <span class="token number">6</span> <span class="token number">160.0</span>Datsun <span class="token number">710</span>               Datsun <span class="token number">710</span> <span class="token number">22.8</span>   <span class="token number">4</span> <span class="token number">108.0</span>Hornet <span class="token number">4</span> Drive       Hornet <span class="token number">4</span> Drive <span class="token number">21.4</span>   <span class="token number">6</span> <span class="token number">258.0</span>Hornet Sportabout Hornet Sportabout <span class="token number">18.7</span>   <span class="token number">8</span> <span class="token number">360.0</span>Valiant                     Valiant <span class="token number">18.1</span>   <span class="token number">6</span> <span class="token number">225.0</span>Duster <span class="token number">360</span>               Duster <span class="token number">360</span> <span class="token number">14.3</span>   <span class="token number">8</span> <span class="token number">360.0</span>Merc <span class="token number">240</span>D                 Merc <span class="token number">240</span>D <span class="token number">24.4</span>   <span class="token number">4</span> <span class="token number">146.7</span>Merc <span class="token number">230</span>                   Merc <span class="token number">230</span> <span class="token number">22.8</span>   <span class="token number">4</span> <span class="token number">140.8</span>Merc <span class="token number">280</span>                   Merc <span class="token number">280</span> <span class="token number">19.2</span>   <span class="token number">6</span> <span class="token number">167.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gather函数,可以调整行列</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 对dyl,disp,mpg进行处理,如下</span><span class="token operator">></span> gather<span class="token punctuation">(</span>tdata<span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"Key"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"Value"</span><span class="token punctuation">,</span>cyl<span class="token punctuation">,</span>disp<span class="token punctuation">,</span>mpg<span class="token punctuation">)</span>               names  Key Value<span class="token number">1</span>          Mazda RX4  cyl   <span class="token number">6.0</span><span class="token number">2</span>      Mazda RX4 Wag  cyl   <span class="token number">6.0</span><span class="token number">3</span>         Datsun <span class="token number">710</span>  cyl   <span class="token number">4.0</span><span class="token number">4</span>     Hornet <span class="token number">4</span> Drive  cyl   <span class="token number">6.0</span><span class="token number">5</span>  Hornet Sportabout  cyl   <span class="token number">8.0</span><span class="token number">6</span>            Valiant  cyl   <span class="token number">6.0</span><span class="token number">7</span>         Duster <span class="token number">360</span>  cyl   <span class="token number">8.0</span><span class="token number">8</span>          Merc <span class="token number">240</span>D  cyl   <span class="token number">4.0</span><span class="token number">9</span>           Merc <span class="token number">230</span>  cyl   <span class="token number">4.0</span><span class="token number">10</span>          Merc <span class="token number">280</span>  cyl   <span class="token number">6.0</span><span class="token number">11</span>         Mazda RX4 disp <span class="token number">160.0</span><span class="token number">12</span>     Mazda RX4 Wag disp <span class="token number">160.0</span><span class="token number">13</span>        Datsun <span class="token number">710</span> disp <span class="token number">108.0</span><span class="token number">14</span>    Hornet <span class="token number">4</span> Drive disp <span class="token number">258.0</span><span class="token number">15</span> Hornet Sportabout disp <span class="token number">360.0</span><span class="token number">16</span>           Valiant disp <span class="token number">225.0</span><span class="token number">17</span>        Duster <span class="token number">360</span> disp <span class="token number">360.0</span><span class="token number">18</span>         Merc <span class="token number">240</span>D disp <span class="token number">146.7</span><span class="token number">19</span>          Merc <span class="token number">230</span> disp <span class="token number">140.8</span><span class="token number">20</span>          Merc <span class="token number">280</span> disp <span class="token number">167.6</span><span class="token number">21</span>         Mazda RX4  mpg  <span class="token number">21.0</span><span class="token number">22</span>     Mazda RX4 Wag  mpg  <span class="token number">21.0</span><span class="token number">23</span>        Datsun <span class="token number">710</span>  mpg  <span class="token number">22.8</span><span class="token number">24</span>    Hornet <span class="token number">4</span> Drive  mpg  <span class="token number">21.4</span><span class="token number">25</span> Hornet Sportabout  mpg  <span class="token number">18.7</span><span class="token number">26</span>           Valiant  mpg  <span class="token number">18.1</span><span class="token number">27</span>        Duster <span class="token number">360</span>  mpg  <span class="token number">14.3</span><span class="token number">28</span>         Merc <span class="token number">240</span>D  mpg  <span class="token number">24.4</span><span class="token number">29</span>          Merc <span class="token number">230</span>  mpg  <span class="token number">22.8</span><span class="token number">30</span>          Merc <span class="token number">280</span>  mpg  <span class="token number">19.2</span><span class="token comment">## 可用"-"号,将disp单独放入一列中,</span><span class="token operator">></span> gdata <span class="token operator">=</span> gather<span class="token punctuation">(</span>tdata<span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"Key"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"Value"</span><span class="token punctuation">,</span>cyl<span class="token punctuation">,</span><span class="token operator">-</span>disp<span class="token punctuation">,</span>mpg<span class="token punctuation">)</span><span class="token operator">></span> gdata               names  disp Key Value<span class="token number">1</span>          Mazda RX4 <span class="token number">160.0</span> cyl   <span class="token number">6.0</span><span class="token number">2</span>      Mazda RX4 Wag <span class="token number">160.0</span> cyl   <span class="token number">6.0</span><span class="token number">3</span>         Datsun <span class="token number">710</span> <span class="token number">108.0</span> cyl   <span class="token number">4.0</span><span class="token number">4</span>     Hornet <span class="token number">4</span> Drive <span class="token number">258.0</span> cyl   <span class="token number">6.0</span><span class="token number">5</span>  Hornet Sportabout <span class="token number">360.0</span> cyl   <span class="token number">8.0</span><span class="token number">6</span>            Valiant <span class="token number">225.0</span> cyl   <span class="token number">6.0</span><span class="token number">7</span>         Duster <span class="token number">360</span> <span class="token number">360.0</span> cyl   <span class="token number">8.0</span><span class="token number">8</span>          Merc <span class="token number">240</span>D <span class="token number">146.7</span> cyl   <span class="token number">4.0</span><span class="token number">9</span>           Merc <span class="token number">230</span> <span class="token number">140.8</span> cyl   <span class="token number">4.0</span><span class="token number">10</span>          Merc <span class="token number">280</span> <span class="token number">167.6</span> cyl   <span class="token number">6.0</span><span class="token number">11</span>         Mazda RX4 <span class="token number">160.0</span> mpg  <span class="token number">21.0</span><span class="token number">12</span>     Mazda RX4 Wag <span class="token number">160.0</span> mpg  <span class="token number">21.0</span><span class="token number">13</span>        Datsun <span class="token number">710</span> <span class="token number">108.0</span> mpg  <span class="token number">22.8</span><span class="token number">14</span>    Hornet <span class="token number">4</span> Drive <span class="token number">258.0</span> mpg  <span class="token number">21.4</span><span class="token number">15</span> Hornet Sportabout <span class="token number">360.0</span> mpg  <span class="token number">18.7</span><span class="token number">16</span>           Valiant <span class="token number">225.0</span> mpg  <span class="token number">18.1</span><span class="token number">17</span>        Duster <span class="token number">360</span> <span class="token number">360.0</span> mpg  <span class="token number">14.3</span><span class="token number">18</span>         Merc <span class="token number">240</span>D <span class="token number">146.7</span> mpg  <span class="token number">24.4</span><span class="token number">19</span>          Merc <span class="token number">230</span> <span class="token number">140.8</span> mpg  <span class="token number">22.8</span><span class="token number">20</span>          Merc <span class="token number">280</span> <span class="token number">167.6</span> mpg  <span class="token number">19.2</span><span class="token comment">## 也可以用列号</span>gather<span class="token punctuation">(</span>tdata<span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"Key"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"Value"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spread 函数,基本和gather相反</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> spdata <span class="token operator">=</span> spread<span class="token punctuation">(</span>gdata<span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"Key"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"Value"</span><span class="token punctuation">)</span><span class="token operator">></span> spdata               names cyl  disp  mpg<span class="token number">1</span>         Datsun <span class="token number">710</span>   <span class="token number">4</span> <span class="token number">108.0</span> <span class="token number">22.8</span><span class="token number">2</span>         Duster <span class="token number">360</span>   <span class="token number">8</span> <span class="token number">360.0</span> <span class="token number">14.3</span><span class="token number">3</span>     Hornet <span class="token number">4</span> Drive   <span class="token number">6</span> <span class="token number">258.0</span> <span class="token number">21.4</span><span class="token number">4</span>  Hornet Sportabout   <span class="token number">8</span> <span class="token number">360.0</span> <span class="token number">18.7</span><span class="token number">5</span>          Mazda RX4   <span class="token number">6</span> <span class="token number">160.0</span> <span class="token number">21.0</span><span class="token number">6</span>      Mazda RX4 Wag   <span class="token number">6</span> <span class="token number">160.0</span> <span class="token number">21.0</span><span class="token number">7</span>           Merc <span class="token number">230</span>   <span class="token number">4</span> <span class="token number">140.8</span> <span class="token number">22.8</span><span class="token number">8</span>          Merc <span class="token number">240</span>D   <span class="token number">4</span> <span class="token number">146.7</span> <span class="token number">24.4</span><span class="token number">9</span>           Merc <span class="token number">280</span>   <span class="token number">6</span> <span class="token number">167.6</span> <span class="token number">19.2</span><span class="token number">10</span>           Valiant   <span class="token number">6</span> <span class="token number">225.0</span> <span class="token number">18.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spread默认识别”.”分割符,sep可以指定分隔符如:</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> df <span class="token operator">=</span> data.frame<span class="token punctuation">(</span>x <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token keyword">NA</span><span class="token punctuation">,</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token string">"a.c"</span><span class="token punctuation">,</span><span class="token string">"b.c"</span><span class="token punctuation">)</span><span class="token operator">></span> df     x<span class="token number">1</span> <span class="token operator">&lt;</span><span class="token keyword">NA</span><span class="token operator">></span><span class="token number">2</span>  a.b<span class="token number">3</span>  a.c<span class="token number">4</span>  b.c<span class="token operator">></span> separate<span class="token punctuation">(</span>df<span class="token punctuation">,</span>col <span class="token operator">=</span> x<span class="token punctuation">,</span>into <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">)</span>     A    B<span class="token number">1</span> <span class="token operator">&lt;</span><span class="token keyword">NA</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">NA</span><span class="token operator">></span><span class="token number">2</span>    a    b<span class="token number">3</span>    a    c<span class="token number">4</span>    b    c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unite是一个相反的操作</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> unite<span class="token punctuation">(</span>x<span class="token punctuation">,</span>col <span class="token operator">=</span> <span class="token string">"CD"</span><span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">)</span>     CD<span class="token number">1</span> <span class="token keyword">NA</span><span class="token operator">-</span><span class="token keyword">NA</span><span class="token number">2</span>   a<span class="token operator">-</span>b<span class="token number">3</span>   a<span class="token operator">-</span>c<span class="token number">4</span>   b<span class="token operator">-</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="40-数据格式的转换-dplyr包"><a href="#40-数据格式的转换-dplyr包" class="headerlink" title="40-数据格式的转换(dplyr包)"></a>40-数据格式的转换(dplyr包)</h2><p>这是一个非常强大的包</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ls<span class="token punctuation">(</span><span class="token string">"package:dplyr"</span><span class="token punctuation">)</span>  <span class="token comment">## 可以列出包的所有的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dplyr::filer功能,根据给定条件,对数据进行过滤,例如</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## dplyr::是调用的这个包中的函数,因为函数太多所以可以防止出现奇异</span><span class="token operator">></span> dplyr<span class="token operator">::</span>filter<span class="token punctuation">(</span>iris<span class="token punctuation">,</span>Sepal.Length<span class="token operator">></span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">## 过滤出花萼长度大于7的</span>   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species<span class="token number">1</span>           <span class="token number">7.1</span>         <span class="token number">3.0</span>          <span class="token number">5.9</span>         <span class="token number">2.1</span> virginica<span class="token number">2</span>           <span class="token number">7.6</span>         <span class="token number">3.0</span>          <span class="token number">6.6</span>         <span class="token number">2.1</span> virginica<span class="token number">3</span>           <span class="token number">7.3</span>         <span class="token number">2.9</span>          <span class="token number">6.3</span>         <span class="token number">1.8</span> virginica<span class="token number">4</span>           <span class="token number">7.2</span>         <span class="token number">3.6</span>          <span class="token number">6.1</span>         <span class="token number">2.5</span> virginica<span class="token number">5</span>           <span class="token number">7.7</span>         <span class="token number">3.8</span>          <span class="token number">6.7</span>         <span class="token number">2.2</span> virginica<span class="token number">6</span>           <span class="token number">7.7</span>         <span class="token number">2.6</span>          <span class="token number">6.9</span>         <span class="token number">2.3</span> virginica<span class="token number">7</span>           <span class="token number">7.7</span>         <span class="token number">2.8</span>          <span class="token number">6.7</span>         <span class="token number">2.0</span> virginica<span class="token number">8</span>           <span class="token number">7.2</span>         <span class="token number">3.2</span>          <span class="token number">6.0</span>         <span class="token number">1.8</span> virginica<span class="token number">9</span>           <span class="token number">7.2</span>         <span class="token number">3.0</span>          <span class="token number">5.8</span>         <span class="token number">1.6</span> virginica<span class="token number">10</span>          <span class="token number">7.4</span>         <span class="token number">2.8</span>          <span class="token number">6.1</span>         <span class="token number">1.9</span> virginica<span class="token number">11</span>          <span class="token number">7.9</span>         <span class="token number">3.8</span>          <span class="token number">6.4</span>         <span class="token number">2.0</span> virginica<span class="token number">12</span>          <span class="token number">7.7</span>         <span class="token number">3.0</span>          <span class="token number">6.1</span>         <span class="token number">2.3</span> virginica<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dplyr::distinct用于去除重复行,相当于unic</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> dplyr<span class="token operator">::</span>distinct<span class="token punctuation">(</span>rbind<span class="token punctuation">(</span>iris<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>iris<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species<span class="token number">1</span>           <span class="token number">5.1</span>         <span class="token number">3.5</span>          <span class="token number">1.4</span>         <span class="token number">0.2</span>  setosa<span class="token number">2</span>           <span class="token number">4.9</span>         <span class="token number">3.0</span>          <span class="token number">1.4</span>         <span class="token number">0.2</span>  setosa<span class="token number">3</span>           <span class="token number">4.7</span>         <span class="token number">3.2</span>          <span class="token number">1.3</span>         <span class="token number">0.2</span>  setosa<span class="token number">4</span>           <span class="token number">4.6</span>         <span class="token number">3.1</span>          <span class="token number">1.5</span>         <span class="token number">0.2</span>  setosa<span class="token number">5</span>           <span class="token number">5.0</span>         <span class="token number">3.6</span>          <span class="token number">1.4</span>         <span class="token number">0.2</span>  setosa<span class="token number">6</span>           <span class="token number">5.4</span>         <span class="token number">3.9</span>          <span class="token number">1.7</span>         <span class="token number">0.4</span>  setosa<span class="token number">7</span>           <span class="token number">4.6</span>         <span class="token number">3.4</span>          <span class="token number">1.4</span>         <span class="token number">0.3</span>  setosa<span class="token number">8</span>           <span class="token number">5.0</span>         <span class="token number">3.4</span>          <span class="token number">1.5</span>         <span class="token number">0.2</span>  setosa<span class="token number">9</span>           <span class="token number">4.4</span>         <span class="token number">2.9</span>          <span class="token number">1.4</span>         <span class="token number">0.2</span>  setosa<span class="token number">10</span>          <span class="token number">4.9</span>         <span class="token number">3.1</span>          <span class="token number">1.5</span>         <span class="token number">0.1</span>  setosa<span class="token number">11</span>          <span class="token number">5.4</span>         <span class="token number">3.7</span>          <span class="token number">1.5</span>         <span class="token number">0.2</span>  setosa<span class="token number">12</span>          <span class="token number">4.8</span>         <span class="token number">3.4</span>          <span class="token number">1.6</span>         <span class="token number">0.2</span>  setosa<span class="token number">13</span>          <span class="token number">4.8</span>         <span class="token number">3.0</span>          <span class="token number">1.4</span>         <span class="token number">0.1</span>  setosa<span class="token number">14</span>          <span class="token number">4.3</span>         <span class="token number">3.0</span>          <span class="token number">1.1</span>         <span class="token number">0.1</span>  setosa<span class="token number">15</span>          <span class="token number">5.8</span>         <span class="token number">4.0</span>          <span class="token number">1.2</span>         <span class="token number">0.2</span>  setosa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dplyr::slice()用于切片</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> dplyr<span class="token operator">::</span>slice<span class="token punctuation">(</span>iris<span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species<span class="token number">1</span>          <span class="token number">4.9</span>         <span class="token number">3.1</span>          <span class="token number">1.5</span>         <span class="token number">0.1</span>  setosa<span class="token number">2</span>          <span class="token number">5.4</span>         <span class="token number">3.7</span>          <span class="token number">1.5</span>         <span class="token number">0.2</span>  setosa<span class="token number">3</span>          <span class="token number">4.8</span>         <span class="token number">3.4</span>          <span class="token number">1.6</span>         <span class="token number">0.2</span>  setosa<span class="token number">4</span>          <span class="token number">4.8</span>         <span class="token number">3.0</span>          <span class="token number">1.4</span>         <span class="token number">0.1</span>  setosa<span class="token number">5</span>          <span class="token number">4.3</span>         <span class="token number">3.0</span>          <span class="token number">1.1</span>         <span class="token number">0.1</span>  setosa<span class="token number">6</span>          <span class="token number">5.8</span>         <span class="token number">4.0</span>          <span class="token number">1.2</span>         <span class="token number">0.2</span>  setosa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>dplyr::filter(iris,Sepal.Length&gt;7)</code> 过滤出花萼长度大于7的花</li><li><code>dplyr::slice(iris,10:15)</code> 表示切出10:15的行</li><li><code>dplyr::sample_n(iris,10)</code> 表示随机抽取10行</li><li><code>dplyr::sample_frac(iris,0.1)</code> 按比例抽取10分之一的数据</li><li><code>dplyr::arrange(iris,Sepal.Length)</code> 表示安装花萼长度进行排序</li><li><code>dplyr::arrange(iris,desc(Sepal.Length))</code> 表示反向进行排序</li></ul><h4 id="dplyr中取子集的功能"><a href="#dplyr中取子集的功能" class="headerlink" title="dplyr中取子集的功能"></a>dplyr中取子集的功能</h4><p>介绍中<code>?select</code>中有大量的示例</p><h4 id="dplyr的统计函数"><a href="#dplyr的统计函数" class="headerlink" title="dplyr的统计函数"></a>dplyr的统计函数</h4><p>可以使用summarise进行统计</p><ul><li><code>summarise(iris,avg=mean(Sepal.Length))</code> 可以计算花萼的平均长度</li><li><code>summarise(iris,sum=sum(Sepal.Length))</code> 可以计算花萼的总长度</li></ul><h3 id="链式操作符-gt"><a href="#链式操作符-gt" class="headerlink" title="链式操作符%&gt;%"></a>链式操作符%&gt;%</h3><p>将一个函数的输出传递给下一个函数,用作下一个函数的输入,类似于linux中的管道,Rstudio中可以使用ctrl+shift+M调用</p><pre class="line-numbers language-r" data-language="r"><code class="language-r">iris 通过管道进行分组<span class="token punctuation">,</span>再通过管道计算平均值<span class="token punctuation">,</span>再通过管道进行排序<span class="token operator">></span> iris <span class="token percent-operator operator">%>%</span> group_by<span class="token punctuation">(</span>Species<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span> summarise<span class="token punctuation">(</span>avg<span class="token operator">=</span>mean<span class="token punctuation">(</span>Sepal.Width<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span> arrange<span class="token punctuation">(</span>avg<span class="token punctuation">)</span>`summarise<span class="token punctuation">(</span><span class="token punctuation">)</span>` ungrouping output <span class="token punctuation">(</span>override with `.groups` argument<span class="token punctuation">)</span><span class="token comment"># A tibble: 3 x 2</span>  Species      avg  <span class="token operator">&lt;</span>fct<span class="token operator">></span>      <span class="token operator">&lt;</span>dbl<span class="token operator">></span><span class="token number">1</span> versicolor  <span class="token number">2.77</span><span class="token number">2</span> virginica   <span class="token number">2.97</span><span class="token number">3</span> setosa      <span class="token number">3.43</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mutate可以添加新的变量</p><h3 id="dplyr中双表格的操控"><a href="#dplyr中双表格的操控" class="headerlink" title="dplyr中双表格的操控"></a>dplyr中双表格的操控</h3><p>整合方式包括左连接,有链接,内连接,全连接,半连接,反链接等.内连接是取交集,全连接是取并集.</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 建立两个数据框</span><span class="token operator">></span> a <span class="token operator">=</span> data.frame<span class="token punctuation">(</span>x1<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span> b <span class="token operator">=</span> data.frame<span class="token punctuation">(</span>x1<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>c<span class="token punctuation">(</span>T<span class="token punctuation">,</span>F<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 左连接,就是以左边的表为基础进行合并</span><span class="token operator">></span>  dplyr<span class="token operator">::</span>left_join<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">)</span>  x1 x2    x3<span class="token number">1</span>  A  <span class="token number">1</span>  <span class="token boolean">TRUE</span><span class="token number">2</span>  B  <span class="token number">2</span> <span class="token boolean">FALSE</span><span class="token number">3</span>  C  <span class="token number">3</span>    <span class="token keyword">NA</span><span class="token comment">## 右连接,就是以右边的表为基础进行合并</span><span class="token operator">></span>  dplyr<span class="token operator">::</span>right_join<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">)</span>  x1 x2    x3<span class="token number">1</span>  A  <span class="token number">1</span>  <span class="token boolean">TRUE</span><span class="token number">2</span>  B  <span class="token number">2</span> <span class="token boolean">FALSE</span><span class="token number">3</span>  D <span class="token keyword">NA</span>  <span class="token boolean">TRUE</span><span class="token comment">## 全连接取并集</span><span class="token operator">></span> dplyr<span class="token operator">::</span>full_join<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">)</span>  x1 x2    x3<span class="token number">1</span>  A  <span class="token number">1</span>  <span class="token boolean">TRUE</span><span class="token number">2</span>  B  <span class="token number">2</span> <span class="token boolean">FALSE</span><span class="token number">3</span>  C  <span class="token number">3</span>    <span class="token keyword">NA</span><span class="token number">4</span>  D <span class="token keyword">NA</span>  <span class="token boolean">TRUE</span><span class="token comment">## 半链接根据右侧表的内容于对左侧表进行过滤,不要交集,对a表进行操作.</span><span class="token operator">></span> dplyr<span class="token operator">::</span>semi_join<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">)</span>  x1 x2<span class="token number">1</span>  A  <span class="token number">1</span><span class="token number">2</span>  B  <span class="token number">2</span><span class="token comment">## 反链接也是根据右侧表进行操作,是将左侧表的补集取出来.对a表进行操作.</span><span class="token operator">></span> dplyr<span class="token operator">::</span>anti_join<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">)</span>  x1 x2<span class="token number">1</span>  C  <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="41-R函数"><a href="#41-R函数" class="headerlink" title="41-R函数"></a>41-R函数</h2><p>类似于linux中是命令</p><!--<img src="https://s1.ax1x.com/2020/06/09/t5F6gO.png" alt="t5F6gO.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/09/t5F6gO.png" alt="t5F6gO.png"></p><p>lm 是一个回归分析<br>老师强调的是多用.</p><h2 id="42-选项参数"><a href="#42-选项参数" class="headerlink" title="42-选项参数"></a>42-选项参数</h2><p>程序,选项,参数</p><p>选项参数:</p><ol><li>输入控制部分</li><li>输出控制部分</li><li>调节部分</li></ol><p>在linux中数据几个参数就被称作几元函数,R中也是一样的<br><a href="https://www.bilibili.com/video/BV19x411X7C6?p=42">视频</a><br>还是要不停的操作</p><h2 id="43-数学统计函数"><a href="#43-数学统计函数" class="headerlink" title="43-数学统计函数"></a>43-数学统计函数</h2><p>概率论是统计学的基础,R有许多处理概率的函数.可能涉及到,样本空间,对立与互斥,随机事件与必然事件,概率密度,概率分布等.这个要你有统计学相关的书籍 </p><ul><li>d 概率密度函数</li><li>p 分布函数</li><li>q 分布函数的反函数</li><li>r 产生相同分布的随机函数</li></ul><h4 id="正太分布相关的函数"><a href="#正太分布相关的函数" class="headerlink" title="正太分布相关的函数"></a>正太分布相关的函数</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 分别为正太概率密度函数,正太分布函数,正太分位数函数,正太分布的随机数函数</span>?Normaldnorm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> log <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>pnorm<span class="token punctuation">(</span>q<span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lower.tail <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> log.p <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>qnorm<span class="token punctuation">(</span>p<span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lower.tail <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> log.p <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>rnorm<span class="token punctuation">(</span>n<span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如随机生成100个随机的正太分布的数字</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> rnorm<span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>mean <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>sd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">18.82627</span> <span class="token number">14.48052</span> <span class="token number">15.64733</span> <span class="token number">17.10765</span> <span class="token number">16.69834</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token number">17.18229</span> <span class="token number">15.82709</span> <span class="token number">14.38638</span> <span class="token number">17.03382</span> <span class="token number">15.75992</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token number">15.62620</span> <span class="token number">15.91558</span> <span class="token number">16.44487</span> <span class="token number">12.72194</span> <span class="token number">15.26981</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token number">15.41339</span> <span class="token number">17.40237</span> <span class="token number">16.06431</span> <span class="token number">14.18183</span> <span class="token number">13.73592</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token number">14.57075</span> <span class="token number">14.18284</span> <span class="token number">15.91646</span> <span class="token number">15.79732</span> <span class="token number">12.86899</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token number">10.33624</span> <span class="token number">11.68006</span> <span class="token number">17.04716</span> <span class="token number">11.75353</span> <span class="token number">14.56665</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token number">19.45208</span> <span class="token number">10.68233</span> <span class="token number">13.43531</span> <span class="token number">13.47316</span> <span class="token number">14.27902</span> <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span> <span class="token number">19.29866</span> <span class="token number">12.14214</span> <span class="token number">15.09897</span> <span class="token number">12.73730</span> <span class="token number">14.76324</span> <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span> <span class="token number">13.53597</span> <span class="token number">19.82190</span> <span class="token number">18.34059</span> <span class="token number">14.48723</span> <span class="token number">16.30598</span> <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span> <span class="token number">12.61513</span> <span class="token number">15.49195</span> <span class="token number">14.33117</span> <span class="token number">15.56077</span> <span class="token number">15.10224</span> <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span> <span class="token number">18.87988</span> <span class="token number">10.82265</span> <span class="token number">17.50272</span> <span class="token number">16.03550</span> <span class="token number">13.69167</span> <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span> <span class="token number">15.53061</span> <span class="token number">14.92809</span> <span class="token number">13.31095</span> <span class="token number">16.12193</span> <span class="token number">13.37350</span> <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span> <span class="token number">14.97857</span> <span class="token number">17.93824</span> <span class="token number">15.81937</span> <span class="token number">15.14789</span> <span class="token number">15.02264</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span> <span class="token number">15.35681</span> <span class="token number">15.06818</span> <span class="token number">16.20024</span> <span class="token number">15.49239</span> <span class="token number">13.87530</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span> <span class="token number">15.07941</span> <span class="token number">11.02497</span> <span class="token number">15.94322</span> <span class="token number">15.67173</span> <span class="token number">12.82916</span> <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span> <span class="token number">14.49088</span> <span class="token number">15.23593</span> <span class="token number">14.89429</span> <span class="token number">15.39066</span> <span class="token number">17.03379</span> <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span> <span class="token number">15.07567</span> <span class="token number">13.72972</span> <span class="token number">15.06769</span> <span class="token number">16.03017</span> <span class="token number">18.25667</span> <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span> <span class="token number">11.01588</span> <span class="token number">12.57675</span> <span class="token number">17.13522</span> <span class="token number">16.01980</span> <span class="token number">10.52023</span> <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span> <span class="token number">19.66291</span> <span class="token number">13.17814</span> <span class="token number">17.31925</span> <span class="token number">14.03456</span> <span class="token number">16.18037</span> <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span> <span class="token number">15.59317</span> <span class="token number">12.31323</span> <span class="token number">16.43977</span> <span class="token number">16.09725</span> <span class="token number">14.29555</span>  <span class="token operator">></span> round<span class="token punctuation">(</span>rnorm<span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>mean <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>sd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 可用于取整数,每次运行都是不同正太分布的数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="与离散分布相关的函数"><a href="#与离散分布相关的函数" class="headerlink" title="与离散分布相关的函数"></a>与离散分布相关的函数</h4><!--<img src="https://s1.ax1x.com/2020/06/09/t5u0VU.png" alt="t5u0VU.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/09/t5u0VU.png" alt="t5u0VU.png"></p><p>比如几种分布</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 集合分布</span><span class="token operator">></span> ?Geometric<span class="token comment">## 超几何分布</span><span class="token operator">></span> ?Hypergeometric<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些函数的作用,,,</p><ul><li>可以生成这种函数的随机数,并绘制出对应的分布曲线来查看,比如<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> x <span class="token operator">=</span> rnorm<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>mean <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>sd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">></span> qqnorm<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="随机数的生成"><a href="#随机数的生成" class="headerlink" title="随机数的生成"></a>随机数的生成</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> runif<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token comment">## 生成50个最小为1最大为100的随机数</span><span class="token operator">></span> runif<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span>min<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>随机种子,要求复现,这时就要用到set.seed()如:</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 每次这样运行都可以得到同样的随机数</span><span class="token operator">></span> set.seed<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token operator">></span> runif<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">0.77436849</span> <span class="token number">0.19722419</span> <span class="token number">0.97801384</span> <span class="token number">0.20132735</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token number">0.36124443</span> <span class="token number">0.74261194</span> <span class="token number">0.97872844</span> <span class="token number">0.49811371</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token number">0.01331584</span> <span class="token number">0.25994613</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="44-描述性统计函数"><a href="#44-描述性统计函数" class="headerlink" title="44-描述性统计函数"></a>44-描述性统计函数</h2><h3 id="summary函数"><a href="#summary函数" class="headerlink" title="summary函数"></a>summary函数</h3><p>回归分析中大量的用到这个函数</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 提供了最小,四分位数,中位数,平均值,,最小值,,</span><span class="token operator">></span> myvare <span class="token operator">=</span> mtcars<span class="token punctuation">[</span>c<span class="token punctuation">(</span><span class="token string">"mpg"</span><span class="token punctuation">,</span><span class="token string">"hp"</span><span class="token punctuation">,</span><span class="token string">"wt"</span><span class="token punctuation">,</span><span class="token string">"am"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> summary<span class="token punctuation">(</span>myvare<span class="token punctuation">)</span>      mpg              hp              wt              am         Min.   <span class="token operator">:</span><span class="token number">10.40</span>   Min.   <span class="token operator">:</span> <span class="token number">52.0</span>   Min.   <span class="token operator">:</span><span class="token number">1.513</span>   Min.   <span class="token operator">:</span><span class="token number">0.0000</span>   <span class="token number">1</span>st Qu.<span class="token operator">:</span><span class="token number">15.43</span>   <span class="token number">1</span>st Qu.<span class="token operator">:</span> <span class="token number">96.5</span>   <span class="token number">1</span>st Qu.<span class="token operator">:</span><span class="token number">2.581</span>   <span class="token number">1</span>st Qu.<span class="token operator">:</span><span class="token number">0.0000</span>   Median <span class="token operator">:</span><span class="token number">19.20</span>   Median <span class="token operator">:</span><span class="token number">123.0</span>   Median <span class="token operator">:</span><span class="token number">3.325</span>   Median <span class="token operator">:</span><span class="token number">0.0000</span>   Mean   <span class="token operator">:</span><span class="token number">20.09</span>   Mean   <span class="token operator">:</span><span class="token number">146.7</span>   Mean   <span class="token operator">:</span><span class="token number">3.217</span>   Mean   <span class="token operator">:</span><span class="token number">0.4062</span>   <span class="token number">3</span>rd Qu.<span class="token operator">:</span><span class="token number">22.80</span>   <span class="token number">3</span>rd Qu.<span class="token operator">:</span><span class="token number">180.0</span>   <span class="token number">3</span>rd Qu.<span class="token operator">:</span><span class="token number">3.610</span>   <span class="token number">3</span>rd Qu.<span class="token operator">:</span><span class="token number">1.0000</span>   Max.   <span class="token operator">:</span><span class="token number">33.90</span>   Max.   <span class="token operator">:</span><span class="token number">335.0</span>   Max.   <span class="token operator">:</span><span class="token number">5.424</span>   Max.   <span class="token operator">:</span><span class="token number">1.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fivenum"><a href="#fivenum" class="headerlink" title="fivenum()"></a>fivenum()</h3><p>与summary类似可以返回五个数,最小值,四分位数,中位数</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> fivenum<span class="token punctuation">(</span>myvare<span class="token operator">$</span>hp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token number">52</span>  <span class="token number">96</span> <span class="token number">123</span> <span class="token number">180</span> <span class="token number">335</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pastecs包"><a href="#pastecs包" class="headerlink" title="pastecs包"></a>pastecs包</h3><p>这个可以计算种类繁多的统计量</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 默认的 basic=T 计算基础统计值</span><span class="token operator">></span> stat.desc<span class="token punctuation">(</span>myvare<span class="token punctuation">)</span>                     mpg           hp          wt          amnbr.val       <span class="token number">32.0000000</span>   <span class="token number">32.0000000</span>  <span class="token number">32.0000000</span> <span class="token number">32.00000000</span>nbr.null       <span class="token number">0.0000000</span>    <span class="token number">0.0000000</span>   <span class="token number">0.0000000</span> <span class="token number">19.00000000</span>nbr.na         <span class="token number">0.0000000</span>    <span class="token number">0.0000000</span>   <span class="token number">0.0000000</span>  <span class="token number">0.00000000</span>min           <span class="token number">10.4000000</span>   <span class="token number">52.0000000</span>   <span class="token number">1.5130000</span>  <span class="token number">0.00000000</span>max           <span class="token number">33.9000000</span>  <span class="token number">335.0000000</span>   <span class="token number">5.4240000</span>  <span class="token number">1.00000000</span>range         <span class="token number">23.5000000</span>  <span class="token number">283.0000000</span>   <span class="token number">3.9110000</span>  <span class="token number">1.00000000</span>sum          <span class="token number">642.9000000</span> <span class="token number">4694.0000000</span> <span class="token number">102.9520000</span> <span class="token number">13.00000000</span>median        <span class="token number">19.2000000</span>  <span class="token number">123.0000000</span>   <span class="token number">3.3250000</span>  <span class="token number">0.00000000</span>mean          <span class="token number">20.0906250</span>  <span class="token number">146.6875000</span>   <span class="token number">3.2172500</span>  <span class="token number">0.40625000</span>SE.mean        <span class="token number">1.0654240</span>   <span class="token number">12.1203173</span>   <span class="token number">0.1729685</span>  <span class="token number">0.08820997</span>CI.mean.<span class="token number">0.95</span>   <span class="token number">2.1729465</span>   <span class="token number">24.7195501</span>   <span class="token number">0.3527715</span>  <span class="token number">0.17990541</span>var           <span class="token number">36.3241028</span> <span class="token number">4700.8669355</span>   <span class="token number">0.9573790</span>  <span class="token number">0.24899194</span>std.dev        <span class="token number">6.0269481</span>   <span class="token number">68.5628685</span>   <span class="token number">0.9784574</span>  <span class="token number">0.49899092</span>coef.var       <span class="token number">0.2999881</span>    <span class="token number">0.4674077</span>   <span class="token number">0.3041285</span>  <span class="token number">1.22828533</span><span class="token comment">## 计算描述性统计</span><span class="token operator">></span> stat.desc<span class="token punctuation">(</span>myvare<span class="token punctuation">,</span>basic <span class="token operator">=</span> T<span class="token punctuation">)</span>                     mpg           hp          wt          amnbr.val       <span class="token number">32.0000000</span>   <span class="token number">32.0000000</span>  <span class="token number">32.0000000</span> <span class="token number">32.00000000</span>nbr.null       <span class="token number">0.0000000</span>    <span class="token number">0.0000000</span>   <span class="token number">0.0000000</span> <span class="token number">19.00000000</span>nbr.na         <span class="token number">0.0000000</span>    <span class="token number">0.0000000</span>   <span class="token number">0.0000000</span>  <span class="token number">0.00000000</span>min           <span class="token number">10.4000000</span>   <span class="token number">52.0000000</span>   <span class="token number">1.5130000</span>  <span class="token number">0.00000000</span>max           <span class="token number">33.9000000</span>  <span class="token number">335.0000000</span>   <span class="token number">5.4240000</span>  <span class="token number">1.00000000</span>range         <span class="token number">23.5000000</span>  <span class="token number">283.0000000</span>   <span class="token number">3.9110000</span>  <span class="token number">1.00000000</span>sum          <span class="token number">642.9000000</span> <span class="token number">4694.0000000</span> <span class="token number">102.9520000</span> <span class="token number">13.00000000</span>median        <span class="token number">19.2000000</span>  <span class="token number">123.0000000</span>   <span class="token number">3.3250000</span>  <span class="token number">0.00000000</span>mean          <span class="token number">20.0906250</span>  <span class="token number">146.6875000</span>   <span class="token number">3.2172500</span>  <span class="token number">0.40625000</span>SE.mean        <span class="token number">1.0654240</span>   <span class="token number">12.1203173</span>   <span class="token number">0.1729685</span>  <span class="token number">0.08820997</span>CI.mean.<span class="token number">0.95</span>   <span class="token number">2.1729465</span>   <span class="token number">24.7195501</span>   <span class="token number">0.3527715</span>  <span class="token number">0.17990541</span>var           <span class="token number">36.3241028</span> <span class="token number">4700.8669355</span>   <span class="token number">0.9573790</span>  <span class="token number">0.24899194</span>std.dev        <span class="token number">6.0269481</span>   <span class="token number">68.5628685</span>   <span class="token number">0.9784574</span>  <span class="token number">0.49899092</span>coef.var       <span class="token number">0.2999881</span>    <span class="token number">0.4674077</span>   <span class="token number">0.3041285</span>  <span class="token number">1.22828533</span><span class="token comment">## norm 就会计算一些统计值,如正太分布统计量,偏度,峰度等</span><span class="token operator">></span> stat.desc<span class="token punctuation">(</span>myvare<span class="token punctuation">,</span>norm <span class="token operator">=</span> T<span class="token punctuation">)</span>                     mpg            hp           wt            amnbr.val       <span class="token number">32.0000000</span>   <span class="token number">32.00000000</span>  <span class="token number">32.00000000</span>  <span class="token number">3.200000e+01</span>nbr.null       <span class="token number">0.0000000</span>    <span class="token number">0.00000000</span>   <span class="token number">0.00000000</span>  <span class="token number">1.900000e+01</span>nbr.na         <span class="token number">0.0000000</span>    <span class="token number">0.00000000</span>   <span class="token number">0.00000000</span>  <span class="token number">0.000000e+00</span>min           <span class="token number">10.4000000</span>   <span class="token number">52.00000000</span>   <span class="token number">1.51300000</span>  <span class="token number">0.000000e+00</span>max           <span class="token number">33.9000000</span>  <span class="token number">335.00000000</span>   <span class="token number">5.42400000</span>  <span class="token number">1.000000e+00</span>range         <span class="token number">23.5000000</span>  <span class="token number">283.00000000</span>   <span class="token number">3.91100000</span>  <span class="token number">1.000000e+00</span>sum          <span class="token number">642.9000000</span> <span class="token number">4694.00000000</span> <span class="token number">102.95200000</span>  <span class="token number">1.300000e+01</span>median        <span class="token number">19.2000000</span>  <span class="token number">123.00000000</span>   <span class="token number">3.32500000</span>  <span class="token number">0.000000e+00</span>mean          <span class="token number">20.0906250</span>  <span class="token number">146.68750000</span>   <span class="token number">3.21725000</span>  <span class="token number">4.062500e-01</span>SE.mean        <span class="token number">1.0654240</span>   <span class="token number">12.12031731</span>   <span class="token number">0.17296847</span>  <span class="token number">8.820997e-02</span>CI.mean.<span class="token number">0.95</span>   <span class="token number">2.1729465</span>   <span class="token number">24.71955013</span>   <span class="token number">0.35277153</span>  <span class="token number">1.799054e-01</span>var           <span class="token number">36.3241028</span> <span class="token number">4700.86693548</span>   <span class="token number">0.95737897</span>  <span class="token number">2.489919e-01</span>std.dev        <span class="token number">6.0269481</span>   <span class="token number">68.56286849</span>   <span class="token number">0.97845744</span>  <span class="token number">4.989909e-01</span>coef.var       <span class="token number">0.2999881</span>    <span class="token number">0.46740771</span>   <span class="token number">0.30412851</span>  <span class="token number">1.228285e+00</span>skewness       <span class="token number">0.6106550</span>    <span class="token number">0.72602366</span>   <span class="token number">0.42314646</span>  <span class="token number">3.640159e-01</span>skew.<span class="token number">2</span>SE       <span class="token number">0.7366922</span>    <span class="token number">0.87587259</span>   <span class="token number">0.51048252</span>  <span class="token number">4.391476e-01</span>kurtosis      <span class="token operator">-</span><span class="token number">0.3727660</span>   <span class="token operator">-</span><span class="token number">0.13555112</span>  <span class="token operator">-</span><span class="token number">0.02271075</span> <span class="token operator">-</span><span class="token number">1.924741e+00</span>kurt.<span class="token number">2</span>SE      <span class="token operator">-</span><span class="token number">0.2302812</span>   <span class="token operator">-</span><span class="token number">0.08373853</span>  <span class="token operator">-</span><span class="token number">0.01402987</span> <span class="token operator">-</span><span class="token number">1.189035e+00</span>normtest.W     <span class="token number">0.9475647</span>    <span class="token number">0.93341934</span>   <span class="token number">0.94325772</span>  <span class="token number">6.250744e-01</span>normtest.p     <span class="token number">0.1228814</span>    <span class="token number">0.04880824</span>   <span class="token number">0.09265499</span>  <span class="token number">7.836354e-08</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doBy包"><a href="#doBy包" class="headerlink" title="doBy包"></a>doBy包</h3><p>可以一次返回多个计算统计量</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 右边的变量是分组型的分组变量,data接一个数据框,fun接一个函数,可以是自定义函数</span><span class="token operator">></span> summaryBy<span class="token punctuation">(</span>mpg<span class="token operator">+</span>hp<span class="token operator">+</span>wt <span class="token operator">~</span> am<span class="token punctuation">,</span>data <span class="token operator">=</span> myvare<span class="token punctuation">,</span>FUN <span class="token operator">=</span> mean<span class="token punctuation">)</span>  am mpg.mean  hp.mean  wt.mean<span class="token number">1</span>  <span class="token number">0</span> <span class="token number">17.14737</span> <span class="token number">160.2632</span> <span class="token number">3.768895</span><span class="token number">2</span>  <span class="token number">1</span> <span class="token number">24.39231</span> <span class="token number">126.8462</span> <span class="token number">2.411000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="45-频数统计函数"><a href="#45-频数统计函数" class="headerlink" title="45-频数统计函数"></a>45-频数统计函数</h2><p>如果一个数据是因子,因子是直接可以进行分组的</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> mt_cyl <span class="token operator">=</span> as.factor<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>cyl<span class="token punctuation">)</span><span class="token operator">></span> mt_cyl <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">4</span>Levels<span class="token operator">:</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span><span class="token operator">></span> split<span class="token punctuation">(</span>mtcars<span class="token punctuation">,</span>mt_cyl<span class="token punctuation">)</span><span class="token comment">## 这样就可以根据气缸的个数对汽车进行分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不是一个明显的因子,可以用cut进行分割</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 10到50,以10为步长进行分组</span><span class="token operator">></span>  cut<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>mpg<span class="token punctuation">,</span>c<span class="token punctuation">(</span>seq<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>Levels<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token comment">## 然后直接使用table进行统计</span><span class="token operator">></span> table<span class="token punctuation">(</span>cut<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>mpg<span class="token punctuation">,</span>c<span class="token punctuation">(</span>seq<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>      <span class="token number">18</span>      <span class="token number">10</span>       <span class="token number">4</span>       <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="prop-table计算频率函数"><a href="#prop-table计算频率函数" class="headerlink" title="prop.table计算频率函数"></a>prop.table计算频率函数</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> prop.table<span class="token punctuation">(</span>table<span class="token punctuation">(</span>mtcars<span class="token operator">$</span>cyl<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token number">4</span>       <span class="token number">6</span>       <span class="token number">8</span> <span class="token number">0.34375</span> <span class="token number">0.21875</span> <span class="token number">0.43750</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vcd"><a href="#vcd" class="headerlink" title="vcd"></a>vcd</h4><p>如果是二维的数据框呢</p><ul><li>如果是用table的话<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 安慰剂和治疗组的区分,这个在实验的时候很常用</span><span class="token operator">></span> table<span class="token punctuation">(</span>Arthritis<span class="token operator">$</span>Treatment<span class="token punctuation">,</span>Arthritis<span class="token operator">$</span>Improved<span class="token punctuation">)</span>                   None Some Marked  Placebo   <span class="token number">29</span>    <span class="token number">7</span>      <span class="token number">7</span>  Treated   <span class="token number">13</span>    <span class="token number">7</span>     <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="xtabs"><a href="#xtabs" class="headerlink" title="xtabs"></a>xtabs</h4><p>这个函数是可以自定义公式</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> xtabs<span class="token punctuation">(</span><span class="token operator">~</span> Treatment <span class="token operator">+</span> Improved<span class="token punctuation">,</span>data <span class="token operator">=</span> Arthritis<span class="token punctuation">)</span>         ImprovedTreatment None Some Marked  Placebo   <span class="token number">29</span>    <span class="token number">7</span>      <span class="token number">7</span>  Treated   <span class="token number">13</span>    <span class="token number">7</span>     <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二维列联表可以用margin.table</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 这里的1代表的是行</span><span class="token operator">></span> x <span class="token operator">=</span> xtabs<span class="token punctuation">(</span><span class="token operator">~</span> Treatment <span class="token operator">+</span> Improved<span class="token punctuation">,</span>data <span class="token operator">=</span> Arthritis<span class="token punctuation">)</span><span class="token operator">></span> margin.table<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">84</span><span class="token operator">></span> margin.table<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>TreatmentPlacebo Treated      <span class="token number">43</span>      <span class="token number">41</span><span class="token comment">## 频率占比统计</span><span class="token operator">></span> prop.table<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>         ImprovedTreatment      None      Some    Marked  Placebo <span class="token number">0.6744186</span> <span class="token number">0.1627907</span> <span class="token number">0.1627907</span>  Treated <span class="token number">0.3170732</span> <span class="token number">0.1707317</span> <span class="token number">0.5121951</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>addmargins()可以直接将算出的和添加到表中,也可以设置1和2,只添加行或列.</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> addmargins<span class="token punctuation">(</span>x<span class="token punctuation">)</span>         ImprovedTreatment None Some Marked Sum  Placebo   <span class="token number">29</span>    <span class="token number">7</span>      <span class="token number">7</span>  <span class="token number">43</span>  Treated   <span class="token number">13</span>    <span class="token number">7</span>     <span class="token number">21</span>  <span class="token number">41</span>  Sum       <span class="token number">42</span>   <span class="token number">14</span>     <span class="token number">28</span>  <span class="token number">84</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三维列联表的计算"><a href="#三维列联表的计算" class="headerlink" title="三维列联表的计算"></a>三维列联表的计算</h3><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> x <span class="token operator">=</span> xtabs<span class="token punctuation">(</span><span class="token operator">~</span> Treatment <span class="token operator">+</span> Improved <span class="token operator">+</span> Sex<span class="token punctuation">,</span>data <span class="token operator">=</span> Arthritis<span class="token punctuation">)</span><span class="token operator">></span> x<span class="token punctuation">,</span> <span class="token punctuation">,</span> Sex <span class="token operator">=</span> Female         ImprovedTreatment None Some Marked  Placebo   <span class="token number">19</span>    <span class="token number">7</span>      <span class="token number">6</span>  Treated    <span class="token number">6</span>    <span class="token number">5</span>     <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> Sex <span class="token operator">=</span> Male         ImprovedTreatment None Some Marked  Placebo   <span class="token number">10</span>    <span class="token number">0</span>      <span class="token number">1</span>  Treated    <span class="token number">7</span>    <span class="token number">2</span>      <span class="token number">5</span><span class="token comment">## 这样的表可能不是很好看,ftable()可以将表转换成评估式的列联表</span><span class="token operator">></span> ftable<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                   Sex Female MaleTreatment Improved                Placebo   None             <span class="token number">19</span>   <span class="token number">10</span>          Some              <span class="token number">7</span>    <span class="token number">0</span>          Marked            <span class="token number">6</span>    <span class="token number">1</span>Treated   None              <span class="token number">6</span>    <span class="token number">7</span>          Some              <span class="token number">5</span>    <span class="token number">2</span>          Marked           <span class="token number">16</span>    <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="46-R中的独立性检验函数"><a href="#46-R中的独立性检验函数" class="headerlink" title="46-R中的独立性检验函数"></a>46-R中的独立性检验函数</h2><p>独立检验是根据频数信息判断两类因子彼此相关或相互独立的假设检.所谓独立就是看看变量之间是否是独立的.</p><p>主要有三个检验方法</p><ol><li>卡方检验</li><li>Fisher检验</li><li>Cochran-Mantel-Haenszel检验</li></ol><h3 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h3><p>假设检验是梳理统计学中根据一定假设条件由样本推断总体的一种方法.</p><p>原假设–没有发生;</p><p>备择假设–发生了;</p><p>具体作法是:根据问题的需要对所研究的总体作某种假设,记作HO ;选取合适的统计量,这个统计量的选取要使得在假设H0成立时,其分布为已知;由实测的样本,计算出统计量的值,并根据预先给定的显著性水平进行检验,作出拒绝或接受假设HO的判断。</p><h3 id="p-value-probability的值"><a href="#p-value-probability的值" class="headerlink" title="p-value probability的值"></a>p-value probability的值</h3><p>是一个通过计算得到的概率值,也就是原假设为真时,得到最大的或者超出所得到的检验统计量的概率.</p><p>一般将p值定位到0.05,当p &lt; 0.05拒绝原假设,p &gt; 0.05,不拒绝原假设.</p><p>简单的理解就是p值越小原假设越不靠谱,拒绝它,p值越大,说明原假设越靠谱,不拒绝它</p><p>p值越小相关性越大</p><p>以上次药物的有效性为例,进行卡方检验</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> mytable <span class="token operator">=</span> table<span class="token punctuation">(</span>Arthritis<span class="token operator">$</span>Treatment<span class="token punctuation">,</span>Arthritis<span class="token operator">$</span>Improved<span class="token punctuation">)</span><span class="token operator">></span> chisq.test<span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>Pearson's Chi<span class="token operator">-</span>squared testdata<span class="token operator">:</span>  mytableX<span class="token operator">-</span>squared <span class="token operator">=</span> <span class="token number">13.055</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">0.001463</span><span class="token comment">## p值为0.001463说明两个变量之间是有关系的,说明药物是有效果的</span><span class="token operator">></span> mytable2 <span class="token operator">=</span> table<span class="token punctuation">(</span>Arthritis<span class="token operator">$</span>Sex<span class="token punctuation">,</span>Arthritis<span class="token operator">$</span>Improved<span class="token punctuation">)</span><span class="token operator">></span> chisq.test<span class="token punctuation">(</span>mytable2<span class="token punctuation">)</span>Pearson's Chi<span class="token operator">-</span>squared testdata<span class="token operator">:</span>  mytable2X<span class="token operator">-</span>squared <span class="token operator">=</span> <span class="token number">4.8407</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">0.08889</span><span class="token comment">## 这里检测的是性别与改善之间的关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fisher-精确检验"><a href="#fisher-精确检验" class="headerlink" title="fisher 精确检验"></a>fisher 精确检验</h3><p>也是独立性检验,原理是行和列是独立</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> fisher.test<span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>Fisher's Exact Test <span class="token keyword">for</span> Count Datadata<span class="token operator">:</span>  mytablep<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">0.001393</span>alternative hypothesis<span class="token operator">:</span> two.sided<span class="token comment">## 与卡方检验是一致的,计算的也是P值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mantelhaen-test-检测"><a href="#mantelhaen-test-检测" class="headerlink" title="mantelhaen.test 检测"></a>mantelhaen.test 检测</h3><p>两个名义变量在第三个变量每一层中都是条件独立的,需要三个变量</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> mytable3 <span class="token operator">=</span> xtabs<span class="token punctuation">(</span><span class="token operator">~</span>Treatment <span class="token operator">+</span> Improved <span class="token operator">+</span> Sex<span class="token punctuation">,</span>data <span class="token operator">=</span> Arthritis<span class="token punctuation">)</span><span class="token operator">></span> mytable3<span class="token punctuation">,</span> <span class="token punctuation">,</span> Sex <span class="token operator">=</span> Female         ImprovedTreatment None Some Marked  Placebo   <span class="token number">19</span>    <span class="token number">7</span>      <span class="token number">6</span>  Treated    <span class="token number">6</span>    <span class="token number">5</span>     <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> Sex <span class="token operator">=</span> Male         ImprovedTreatment None Some Marked  Placebo   <span class="token number">10</span>    <span class="token number">0</span>      <span class="token number">1</span>  Treated    <span class="token number">7</span>    <span class="token number">2</span>      <span class="token number">5</span><span class="token operator">></span> mantelhaen.test<span class="token punctuation">(</span>mytable3<span class="token punctuation">)</span>Cochran<span class="token operator">-</span>Mantel<span class="token operator">-</span>Haenszel testdata<span class="token operator">:</span>  mytable3Cochran<span class="token operator">-</span>Mantel<span class="token operator">-</span>Haenszel M<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">14.632</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">0.0006647</span><span class="token comment">## 这里的p值很小,因为列联表的结果是以性别来区分的,这里表示药物的治疗在性别的每一个水平上不独立.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的独立性检验的顺序是很总要的</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 这里变量的顺序是很重要的</span><span class="token operator">></span> mytable3 <span class="token operator">=</span> xtabs<span class="token punctuation">(</span><span class="token operator">~</span>Treatment <span class="token operator">+</span> Sex <span class="token operator">+</span> Improved <span class="token punctuation">,</span>data <span class="token operator">=</span> Arthritis<span class="token punctuation">)</span><span class="token operator">></span> mantelhaen.test<span class="token punctuation">(</span>mytable3<span class="token punctuation">)</span>Mantel<span class="token operator">-</span>Haenszel chi<span class="token operator">-</span>squared test with continuity correctiondata<span class="token operator">:</span>  mytable3Mantel<span class="token operator">-</span>Haenszel X<span class="token operator">-</span>squared <span class="token operator">=</span> <span class="token number">2.0863</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token operator">-</span>value <span class="token operator">=</span> <span class="token number">0.1486</span>alternative hypothesis<span class="token operator">:</span> true common odds ratio is not equal to <span class="token number">1</span><span class="token number">95</span> percent confidence interval<span class="token operator">:</span> <span class="token number">0.8566711</span> <span class="token number">8.0070521</span>sample estimates<span class="token operator">:</span>common odds ratio          <span class="token number">2.619048</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也由很多的包可以进行独立性检验</p><h2 id="47-相关性分析函数"><a href="#47-相关性分析函数" class="headerlink" title="47-相关性分析函数"></a>47-相关性分析函数</h2><p>相关性分析是指对两个或多个具备相关性的变量元素进行分析,从而衡量两个变量因素的相关密切程度。相关性的元素之间需要存在一定的联系或者概率才可以进行相关性分析。</p><p>简单来说就是变量之间是否有关系。</p><p>两个变量如果不独立就可以进行相关性检验,可能是正相关用”+”表示,也可能是负相关”-“,</p><p>相关性衡量指标,指标表示是都是同一个东西,只是表示的方法指标不同而已</p><ul><li>Pearson相关系数</li><li>Spearman相关系数</li><li>Kendall相关系数</li><li>偏相关系数</li><li>多分格相关系数</li><li>多系列相关系数</li></ul><p>计算相关性系数都是使用同一个函数cor(),可以计算三种相关系数,pearson,kendall,spearman,默认是pearson</p><h4 id="cor函数"><a href="#cor函数" class="headerlink" title="cor函数"></a>cor函数</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 这里计算一下谋杀率和什么有关</span><span class="token operator">></span> ?cor<span class="token operator">></span> state.x77<span class="token operator">></span> cor<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span>            Population     Income  Illiteracy    Life Exp     Murder     HS Grad      Frost        AreaPopulation  <span class="token number">1.00000000</span>  <span class="token number">0.2082276</span>  <span class="token number">0.10762237</span> <span class="token operator">-</span><span class="token number">0.06805195</span>  <span class="token number">0.3436428</span> <span class="token operator">-</span><span class="token number">0.09848975</span> <span class="token operator">-</span><span class="token number">0.3321525</span>  <span class="token number">0.02254384</span>Income      <span class="token number">0.20822756</span>  <span class="token number">1.0000000</span> <span class="token operator">-</span><span class="token number">0.43707519</span>  <span class="token number">0.34025534</span> <span class="token operator">-</span><span class="token number">0.2300776</span>  <span class="token number">0.61993232</span>  <span class="token number">0.2262822</span>  <span class="token number">0.36331544</span>Illiteracy  <span class="token number">0.10762237</span> <span class="token operator">-</span><span class="token number">0.4370752</span>  <span class="token number">1.00000000</span> <span class="token operator">-</span><span class="token number">0.58847793</span>  <span class="token number">0.7029752</span> <span class="token operator">-</span><span class="token number">0.65718861</span> <span class="token operator">-</span><span class="token number">0.6719470</span>  <span class="token number">0.07726113</span>Life Exp   <span class="token operator">-</span><span class="token number">0.06805195</span>  <span class="token number">0.3402553</span> <span class="token operator">-</span><span class="token number">0.58847793</span>  <span class="token number">1.00000000</span> <span class="token operator">-</span><span class="token number">0.7808458</span>  <span class="token number">0.58221620</span>  <span class="token number">0.2620680</span> <span class="token operator">-</span><span class="token number">0.10733194</span>Murder      <span class="token number">0.34364275</span> <span class="token operator">-</span><span class="token number">0.2300776</span>  <span class="token number">0.70297520</span> <span class="token operator">-</span><span class="token number">0.78084575</span>  <span class="token number">1.0000000</span> <span class="token operator">-</span><span class="token number">0.48797102</span> <span class="token operator">-</span><span class="token number">0.5388834</span>  <span class="token number">0.22839021</span>HS Grad    <span class="token operator">-</span><span class="token number">0.09848975</span>  <span class="token number">0.6199323</span> <span class="token operator">-</span><span class="token number">0.65718861</span>  <span class="token number">0.58221620</span> <span class="token operator">-</span><span class="token number">0.4879710</span>  <span class="token number">1.00000000</span>  <span class="token number">0.3667797</span>  <span class="token number">0.33354187</span>Frost      <span class="token operator">-</span><span class="token number">0.33215245</span>  <span class="token number">0.2262822</span> <span class="token operator">-</span><span class="token number">0.67194697</span>  <span class="token number">0.26206801</span> <span class="token operator">-</span><span class="token number">0.5388834</span>  <span class="token number">0.36677970</span>  <span class="token number">1.0000000</span>  <span class="token number">0.05922910</span>Area        <span class="token number">0.02254384</span>  <span class="token number">0.3633154</span>  <span class="token number">0.07726113</span> <span class="token operator">-</span><span class="token number">0.10733194</span>  <span class="token number">0.2283902</span>  <span class="token number">0.33354187</span>  <span class="token number">0.0592291</span>  <span class="token number">1.00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个对角矩阵对角线是自己与自己的相关性,都是1,最大相关系数.正的就是正相关,负的就是不相关,或反着来.</p><h4 id="cov函数"><a href="#cov函数" class="headerlink" title="cov函数"></a>cov函数</h4><p>可以用来计算协方差,基本与cor是一致的</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> cov<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span>              Population        Income   Illiteracy      Life Exp       Murder       HS Grad        Frost          AreaPopulation <span class="token number">19931683.7588</span>   <span class="token number">571229.7796</span>  <span class="token number">292.8679592</span> <span class="token operator">-</span><span class="token number">4.078425e+02</span>  <span class="token number">5663.523714</span>  <span class="token operator">-</span><span class="token number">3551.509551</span> <span class="token operator">-</span><span class="token number">77081.97265</span>  <span class="token number">8.587917e+06</span>Income       <span class="token number">571229.7796</span>   <span class="token number">377573.3061</span> <span class="token operator">-</span><span class="token number">163.7020408</span>  <span class="token number">2.806632e+02</span>  <span class="token operator">-</span><span class="token number">521.894286</span>   <span class="token number">3076.768980</span>   <span class="token number">7227.60408</span>  <span class="token number">1.904901e+07</span>Illiteracy      <span class="token number">292.8680</span>     <span class="token operator">-</span><span class="token number">163.7020</span>    <span class="token number">0.3715306</span> <span class="token operator">-</span><span class="token number">4.815122e-01</span>     <span class="token number">1.581776</span>     <span class="token operator">-</span><span class="token number">3.235469</span>    <span class="token operator">-</span><span class="token number">21.29000</span>  <span class="token number">4.018337e+03</span>Life Exp       <span class="token operator">-</span><span class="token number">407.8425</span>      <span class="token number">280.6632</span>   <span class="token operator">-</span><span class="token number">0.4815122</span>  <span class="token number">1.802020e+00</span>    <span class="token operator">-</span><span class="token number">3.869480</span>      <span class="token number">6.312685</span>     <span class="token number">18.28678</span> <span class="token operator">-</span><span class="token number">1.229410e+04</span>Murder         <span class="token number">5663.5237</span>     <span class="token operator">-</span><span class="token number">521.8943</span>    <span class="token number">1.5817755</span> <span class="token operator">-</span><span class="token number">3.869480e+00</span>    <span class="token number">13.627465</span>    <span class="token operator">-</span><span class="token number">14.549616</span>   <span class="token operator">-</span><span class="token number">103.40600</span>  <span class="token number">7.194043e+04</span>HS Grad       <span class="token operator">-</span><span class="token number">3551.5096</span>     <span class="token number">3076.7690</span>   <span class="token operator">-</span><span class="token number">3.2354694</span>  <span class="token number">6.312685e+00</span>   <span class="token operator">-</span><span class="token number">14.549616</span>     <span class="token number">65.237894</span>    <span class="token number">153.99216</span>  <span class="token number">2.298732e+05</span>Frost        <span class="token operator">-</span><span class="token number">77081.9727</span>     <span class="token number">7227.6041</span>  <span class="token operator">-</span><span class="token number">21.2900000</span>  <span class="token number">1.828678e+01</span>  <span class="token operator">-</span><span class="token number">103.406000</span>    <span class="token number">153.992163</span>   <span class="token number">2702.00857</span>  <span class="token number">2.627039e+05</span>Area        <span class="token number">8587916.9494</span> <span class="token number">19049013.7510</span> <span class="token number">4018.3371429</span> <span class="token operator">-</span><span class="token number">1.229410e+04</span> <span class="token number">71940.429959</span> <span class="token number">229873.192816</span> <span class="token number">262703.89306</span>  <span class="token number">7.280748e+09</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要精准的显示谋杀率和哪些指数有关</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> colnames<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"Population"</span> <span class="token string">"Income"</span>     <span class="token string">"Illiteracy"</span> <span class="token string">"Life Exp"</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token string">"Murder"</span>     <span class="token string">"HS Grad"</span>    <span class="token string">"Frost"</span>      <span class="token string">"Area"</span>      <span class="token operator">></span> x <span class="token operator">=</span> state.x77<span class="token punctuation">[</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> y <span class="token operator">=</span> state.x77<span class="token punctuation">[</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> cor<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>              Life Exp     MurderPopulation <span class="token operator">-</span><span class="token number">0.06805195</span>  <span class="token number">0.3436428</span>Income      <span class="token number">0.34025534</span> <span class="token operator">-</span><span class="token number">0.2300776</span>Illiteracy <span class="token operator">-</span><span class="token number">0.58847793</span>  <span class="token number">0.7029752</span>HS Grad     <span class="token number">0.58221620</span> <span class="token operator">-</span><span class="token number">0.4879710</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cor函数只能计算三种算法,例如偏相关系数,多分隔系数,多系列系数,等.</p><h4 id="偏相关系数"><a href="#偏相关系数" class="headerlink" title="偏相关系数"></a>偏相关系数</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 第一个参数是(前两个是要计算数值的下标,其余的是条件变量的下标),第二个参数是cov计算出来的协方差结果.</span><span class="token operator">></span> ?pcor<span class="token operator">></span> colnames<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"Population"</span> <span class="token string">"Income"</span>     <span class="token string">"Illiteracy"</span> <span class="token string">"Life Exp"</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token string">"Murder"</span>     <span class="token string">"HS Grad"</span>    <span class="token string">"Frost"</span>      <span class="token string">"Area"</span> <span class="token operator">></span> pcor<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cov<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">0.3462724</span><span class="token comment">## 计算出偏相关系数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言与数据分析（一）</title>
      <link href="/2020/06/26/r-shu-ju-fen-xi/r-yu-yan-ru-men-yu-shu-ju-fen-xi-bi-ji-yi/"/>
      <url>/2020/06/26/r-shu-ju-fen-xi/r-yu-yan-ru-men-yu-shu-ju-fen-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">喜欢一件事就去争取吧。</blockquote><span id="more"></span><h2 id="1-课程介绍"><a href="#1-课程介绍" class="headerlink" title="1. 课程介绍"></a>1. 课程介绍</h2><h2 id="2-数据分析"><a href="#2-数据分析" class="headerlink" title="2. 数据分析"></a>2. 数据分析</h2><p>数据就是事物进行记录可鉴别的符号，是对客观事物性质状态以及相互关系等进行记载的物理符号。</p><p><strong>数据分析过程</strong>：</p><ol><li>数据的采集</li><li>数据的存储</li><li>数据统计：使用统计方法，有目的的对收集的数据进行分析处理，并解读分析结果。结绳、算盘、计算器、excel</li><li>数据挖掘：一般是指从大量的数据中通过算法搜索隐藏于其中的信息的过程。挖掘是一个探索的过程，统计是有目的的。</li><li>数据的可视化 </li><li>进行决策，利用统计结果进行有目的的决策</li></ol><h2 id="3-数据挖掘"><a href="#3-数据挖掘" class="headerlink" title="3. 数据挖掘"></a>3. 数据挖掘</h2><p>介绍了数据挖掘的重要性。</p><h2 id="4-数据可视化"><a href="#4-数据可视化" class="headerlink" title="4. 数据可视化"></a>4. 数据可视化</h2><p>人是视觉动物</p><h2 id="5-R语言介绍"><a href="#5-R语言介绍" class="headerlink" title="5. R语言介绍"></a>5. R语言介绍</h2><ol><li>有效的数据处理和保存机制。</li><li>拥有一整套数组和矩阵的操作运算符</li><li>一系列连贯而又完整的数据分析中间工具</li><li>图形统计可以对数据直接进行分析和显示，可用于多种图形设备</li><li>一种相当完善、简介和搞笑的程序设计语言</li><li>R语言是彻底的面向对象的统计编程语言</li><li>R语言和其他变成语言、数据库之有很好的接口</li><li>R语言是自由 的软件，功能不比任何其他同列软件差</li><li>R语言的网上资源丰富</li></ol><p>Rebolutions R 已经被微软收购了，该命为Microsoft R </p><h2 id="6-R应用的案例"><a href="#6-R应用的案例" class="headerlink" title="6. R应用的案例"></a>6. R应用的案例</h2><p>一个维生素C与牙齿生长的关系</p><p>在官网上面下载R语言的安装包，</p><h2 id="7-R语言的安装"><a href="#7-R语言的安装" class="headerlink" title="7. R语言的安装"></a>7. R语言的安装</h2><p>不着急，这个在网络上有大量的资源</p><h2 id="8-R-运行与设置"><a href="#8-R-运行与设置" class="headerlink" title="8. R 运行与设置"></a>8. R 运行与设置</h2><p>讲述了R自带的GUI</p><h2 id="9-Rstudio"><a href="#9-Rstudio" class="headerlink" title="9. Rstudio"></a>9. Rstudio</h2><p>一般都是用到了这个软件， 介绍了各种界面的操作。</p><h2 id="10-基本操作"><a href="#10-基本操作" class="headerlink" title="10 基本操作"></a>10 基本操作</h2><p>设定工作目录，查看工作目录</p><blockquote><p>getwd() </p></blockquote><p>设置工作目录，填入你的工作目录</p><blockquote><p>setwd(dir = “”)</p></blockquote><p>列出每个变量的所有信息</p><blockquote><p>ls.str() </p></blockquote><h2 id="11-R扩展包"><a href="#11-R扩展包" class="headerlink" title="11. R扩展包"></a>11. R扩展包</h2><p>查看扩展包的位置</p><blockquote><p>.libPaths()</p></blockquote><p>查看安装了哪些安装包</p><blockquote><p>library()</p></blockquote><p>一次安装多个包</p><blockquote><p>install.packages(c(“AER”,”ca”,””)</p></blockquote><h2 id="12-R包的使用"><a href="#12-R包的使用" class="headerlink" title="12 R包的使用"></a>12 R包的使用</h2><p>R软件包的组成</p><ul><li>base</li><li>datasets 存放R内置的数据集</li><li>utils R语言的工具函数</li><li>grDevices 基于base 和greph的图形设备，与绘图相关的函数都在这个包里</li><li>graphics 基于base图形的R默认的绘图函数都在这个包里</li><li>stats 存放与统计相关的函数，</li><li>methods R对象一般的定义方法和类</li><li>splines 基础包</li><li>stats4 基础包</li><li>tcltk 基础包</li></ul><p>广州,兰州,的镜像是可以用的,兰州是比较快的.</p><p>加载包</p><blockquote><p>require(vcd)</p></blockquote><p>移除加载</p><blockquote><p>detach(“package:vcd”)</p></blockquote><p>删除包</p><blockquote><p>remove.package(“vcd”)</p></blockquote><p>查看以安装的包</p><blockquote><p>installed.packages()</p></blockquote><p>查看工具包的帮助信息</p><blockquote><p>help(package=”vcd”)</p></blockquote><p>也可以用library来查看帮助信息</p><blockquote><p>library(help=”vcd”)</p></blockquote><p>列出vcd中所有包含的函数</p><blockquote><p>ls(“package:vcd”)</p></blockquote><p>列出vcd中所有的数据集</p><blockquote><p>data(package=”vcd”)</p></blockquote><h3 id="R包的批量移植"><a href="#R包的批量移植" class="headerlink" title="R包的批量移植"></a>R包的批量移植</h3><p>一种方案:</p><blockquote><p>Rpackage &lt;- installed.packages()[,1]<br>save(Rpackage,file=”Rpack.Rdata)</p></blockquote><p>列出安装包的第一列,导出到一个文本中,在另一个电脑上load加载到一个变量中,</p><blockquote><p>for (i in Rpack) install.packages(i)<br>这样就可以批量安装包了.</p></blockquote><h2 id="13-获取帮助"><a href="#13-获取帮助" class="headerlink" title="13 获取帮助"></a>13 获取帮助</h2><p>比如help()会在浏览器中打开帮助信息,和?sum一个意思</p><blockquote><p>help(sum)</p></blockquote><blockquote><p>?(sum)</p></blockquote><p>快速了解函数的参数,而不想去看文档args函数</p><blockquote><p>args(plot)</p></blockquote><p>还可以用esample 函数去示例一个函数的使用</p><blockquote><p>example(hist)</p></blockquote><p>也可以用demo 这种示例</p><blockquote><p>demo(graphic)</p></blockquote><p>用help查看包的帮助,这个是在网上查看帮助信息</p><blockquote><p>help(package=vcd)</p></blockquote><p>用vignette()函数,这个一些库可能没有这个文档,</p><blockquote><p>vignette(“vcd”)</p></blockquote><blockquote><p>??qplot</p></blockquote><p>网络搜索相关的函数</p><blockquote><p>RSiteSearch(“matlab”)</p></blockquote><p>rseek.org 是一个与R相关的论坛</p><h2 id="14-excel-案例"><a href="#14-excel-案例" class="headerlink" title="14 excel 案例"></a>14 excel 案例</h2><p>主要是excel 数据透视表的使用案例,没有数据不是很懂,老师也说了,excel也是一种很强大的数据分析工具,也可以学习excel的使用</p><h2 id="15-内置数据集"><a href="#15-内置数据集" class="headerlink" title="15 内置数据集"></a>15 内置数据集</h2><p>R内置了很多的数据集,存在于datasets这个包中</p><p>直接<code>data()</code>就可以列出很多的数据集,<code>rivers</code>可以列出北美141条河流的长度</p><p>可以用<code>help(&quot;mtcars&quot;)</code>这样的去查看数据的帮助信息</p><p>加载数据集</p><blockquote><p>data(package=”MASS”)</p></blockquote><p>这样只是加载数据集,而包就不用加载进来</p><blockquote><p>data(Chile,Package=”car”)</p></blockquote><h2 id="16-数据结构"><a href="#16-数据结构" class="headerlink" title="16 数据结构"></a>16 数据结构</h2><p>数据结构式计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素集合。</p><p>这个是很重要的，知道是什么，知道为什么。</p><p>R中数据类型</p><ol><li>数值型，数值可以用于直接计算。</li><li>字符串型，可以进行连接，转换，提取等。</li><li>逻辑型，真假。</li><li>日期型等。</li></ol><p>这个跟Python差不多。</p><p>普通的数据结构：向量，标量，列表，数组，多维数组。</p><p>特殊数据结构：perl中的哈希，python中的字典，c语言中的指针等。</p><p>R对象：object, 他是指可以赋值给变量的任何事物，包括常量，数据结构，函数，甚至图形。对象都拥有某种模式，描述了此对象是如何存储的，以及某个类。</p><h2 id="17-向量"><a href="#17-向量" class="headerlink" title="17 向量"></a>17 向量</h2><p>向量，vector, 是R中最重要的一个概念，它是构成其他数据结构的基础，R中的向量概念和数学中的向量是不同的，类似于数学上的集合，有一个或多个元素所构成。向量其实是用于存储数值型，字符型或逻辑型数据的一维数组。</p><p>R中用函数 “c ”来创建向量。如：</p><blockquote><p>c &lt;- c(1,2,3,4)<br>z &lt;- c(TRUE,T,F)</p></blockquote><p>R中 <code>euro</code>,<code>rivers</code>,<code>state.abb</code>,<code>state.area</code>都是向量的数据结构。</p><p>等差数列,输出1到100的等差数列</p><blockquote><p>c(1:100)</p></blockquote><p>输出步长为2的等差数列</p><blockquote><p>seq (from=1,to=100,by=2)</p></blockquote><p>输出重复序列,x重复5次</p><blockquote><p>rep (“x”,5)<br>rep (x,5)</p></blockquote><p>可以用each来控制一个元素的重复次数。如下可以吧x中的元素重复5次，times可以把整数组重复2次。</p><blockquote><p>rep(x,each=5,times=2)</p></blockquote><p>如何查看数据类型，</p><blockquote><p>mode(z)</p></blockquote><p>R中向量化编程</p><blockquote><p>x &lt;- c(1,2,3,4,5)<br>y &lt;- c(6,7,8,9,10)<br>x*2+y<br>8 11 14 17 20</p></blockquote><p>在x中取出x&gt;3的值</p><blockquote><p>x[x&gt;3]</p></blockquote><p>使用rep来控制每个元素的出现次数</p><blockquote><p>rep(x,c(2,4,6,1,3))<br>输出[1] 1 1 2 2 2 2 3 3 3 3 3 3 4 5 5 5</p></blockquote><h2 id="18-向量索引"><a href="#18-向量索引" class="headerlink" title="18 向量索引"></a>18 向量索引</h2><p>在R中元素的第一个值是从 “1” 开始，不是0<code>length(x)</code>可以算出元素的个数。<br>如：x为1-100的元组</p><blockquote><p>x[c(1,23,55,32,78)]<br>[1]  1 23 54 65 输出</p></blockquote><p><strong>重要</strong>使用逻辑向量的值来进行向量的索引。比如：</p><blockquote><p>y &lt;- c(1:10)<br>y[c(T,F,T,F,T,F,T,T,T,T,T)]<br>[1]  1  3  5  7  8  9 10 NA 输出为真的数字 NA为缺失值</p></blockquote><p>又比如</p><blockquote><p>z &lt;- c(“one”,”two”, “three”, “four”, “five”)<br>z<br>[1] “one”   “two”   “three” “four”  “five”<br>z %in% c(“one”,”two”) 判断是否在z中有这个字符。<br>[1]  TRUE  TRUE FALSE FALSE FALSE</p></blockquote><p>使用元素名称进行访问，相当于字典中的键值对</p><pre class="line-numbers language-none"><code class="language-none">&gt; y &lt;- c(1:6)&gt; names(y) &#x3D; c(&quot;noe&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)&gt; y  noe   two three  four  five   six     1     2     3     4     5     6 &gt; names(y)[1] &quot;noe&quot;   &quot;two&quot;   &quot;three&quot; &quot;four&quot;  &quot;five&quot;  &quot;six&quot; &gt; y[&quot;two&quot;]two   2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>append函数，可以指定在那个位置进行插值。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; x &lt;- c(1:100)&gt; v &lt;- c(1:3)&gt; v[15] &lt;- 15&gt; v [1]  1  2  3 NA NA NA NA NA NA NA NA NA NA NA 15&gt; append(x &#x3D; v, values &#x3D; 50,after &#x3D; 12) [1]  1  2  3 NA NA NA NA NA NA NA NA NA 50 NA NA 15&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除向量可以用<code>rm()</code>函数，也可以在索引中加负号，但只是暂时的，但是可以传回原来的值</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; rm(y)&gt; y &lt;- c(1:10)&gt; y[-c(1:3)][1]  4  5  6  7  8  9 10&gt; y &lt;- y[-c(1:3)]&gt; y[1]  4  5  6  7  8  9 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-向量的运算"><a href="#19-向量的运算" class="headerlink" title="19 向量的运算"></a>19 向量的运算</h2><p>“**”为幂运算<br>“%%”求余运算<br>“%/%”为整除运算</p><p>两个元素的相加必须是相同的元素个数。python中这个还是很好解决的</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; x &#x3D; c(1,2,3)&gt; y &#x3D; c(1,2,4,5,6)&gt; x&gt;y[1] FALSE FALSE FALSE FALSE FALSEWarning message:In x &gt; y : 长的对象长度不是短的对象长度的整倍数&gt; c(1,2,3) %in% c(1,2,4,5,6)[1]  TRUE  TRUE FALSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的函数运算</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; abs(-6) 为绝对值[1] 6&gt; sqrt(25)  开方[1] 5&gt; log(16,base&#x3D;2)[1] 4&gt; log2(16)  对数函数[1] 4&gt; ceiling(c(-2.3,3.1415))  返回整数部分[1] -2  4&gt; sin(x)  三角函数[1] 0.8414710 0.9092974 0.1411200&gt; vec &#x3D; 1:100&gt; sum(vec)  求和函数[1] 5050&gt; range(vec)  范围，最大值和最小值[1]   1 100&gt; max(vec)  最大值[1] 100&gt; min(vec)  最小值[1] 1&gt; mean(vec)  均值[1] 50.5&gt; var(vec)  方差[1] 841.6667&gt; sd(vec)  标准差[1] 29.01149&gt; median(vec)  中位数[1] 50.5&gt; round(var(vec),digits &#x3D; 2)  round默认是整数digits设置小数位数[1] 841.67&gt; prod(vec)  各元素连续乘积[1] 9.332622e+157&gt; quantile(vec,c(0.5,0.4,0.8))  分位数 50%  40%  80% 50.5 40.6 80.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻找元素位置which,返回索引</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; t &#x3D; c(1,5,4,7,2,9,6)&gt; which.max(t)[1] 6&gt; which(t&#x3D;&#x3D;7)[1] 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-矩阵与数组"><a href="#20-矩阵与数组" class="headerlink" title="20 矩阵与数组"></a>20 矩阵与数组</h2><p>矩阵式一个按照长方阵列排列的复数或实数集合.向量是一维的,而矩阵式二维的,需要有行列.基本就跟excel中的数据表差不多.</p><p>内置矩阵数据集</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; iris3&gt; state.x77&gt; heatmap(state.x77)  热图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用<code>matrix()</code>创建矩阵</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; m &#x3D; matrix(1:20,4,5)  1到20,4行5列的矩阵&gt; m     [,1] [,2] [,3] [,4] [,5][1,]    1    5    9   13   17[2,]    2    6   10   14   18[3,]    3    7   11   15   19[4,]    4    8   12   16   20&gt; m &#x3D; matrix(1:20,4,5,byrow &#x3D; T&#x2F;F) 通过行或列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改行列名称</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; rname &#x3D; c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;)&gt; cname &#x3D; c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;)&gt; dimnames(m) &#x3D; list(rname,cname)&gt; m  1 2  3  4  51 1 5  9 13 172 2 6 10 14 183 3 7 11 15 194 4 8 12 16 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dim()</code>向量设定函数</p><p>设定为一个2行2列的3高的三维数组</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; x &#x3D; c(1:12)&gt; x [1]  1  2  3  4  5  6  7  8  9 10 11 12 &gt; dim(x)NULL&gt; dim(x) &#x3D; c(2,2,3)&gt; x, , 1     [,1] [,2][1,]    1    3[2,]    2    4, , 2     [,1] [,2][1,]    5    7[2,]    6    8, , 3     [,1] [,2][1,]    9   11[2,]   10   12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何访问二维数组的值</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; m     [,1] [,2] [,3] [,4] [,5][1,]    1    5    9   13   17[2,]    2    6   10   14   18[3,]    3    7   11   15   19[4,]    4    8   12   16   20&gt; m[2,2]  二行二列[1] 6&gt; m[2,]  二行[1]  2  6 10 14 18&gt; m[,2]  二列[1] 5 6 7 8&gt; m[-1,2]  &quot;-&quot;为去除第一列[1] 6 7 8&gt; m+1  每个元素加一     [,1] [,2] [,3] [,4] [,5][1,]    2    6   10   14   18[2,]    3    7   11   15   19[3,]    4    8   12   16   20[4,]    5    9   13   17   21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行列的计算</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; colSums(m)  计算每一列的和[1] 10 26 42 58 74&gt; rowSums(m)  计算每一行的和[1] 45 50 55 60&gt; colMeans(m)  列的平均值[1]  2.5  6.5 10.5 14.5 18.5&gt; rowMeans(m)  行的平均值[1]  9 10 11 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>矩阵的内外积</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; n &#x3D; matrix(1:9,3,3)&gt; t &#x3D; matrix(2:10,3,3)&gt; n     [,1] [,2] [,3][1,]    1    4    7[2,]    2    5    8[3,]    3    6    9&gt; t     [,1] [,2] [,3][1,]    2    5    8[2,]    3    6    9[3,]    4    7   10&gt; n*t  内积     [,1] [,2] [,3][1,]    2   20   56[2,]    6   30   72[3,]   12   42   90&gt; n %*% t  外积     [,1] [,2] [,3][1,]   42   78  114[2,]   51   96  141[3,]   60  114  168<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; diag(n)  对角线[1] 1 5 9&gt; diag(t)[1]  2  6 10&gt; m     [,1] [,2] [,3] [,4] [,5][1,]    1    5    9   13   17[2,]    2    6   10   14   18[3,]    3    7   11   15   19[4,]    4    8   12   16   20&gt; t(m)  行列转换     [,1] [,2] [,3] [,4][1,]    1    2    3    4[2,]    5    6    7    8[3,]    9   10   11   12[4,]   13   14   15   16[5,]   17   18   19   20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-列表"><a href="#21-列表" class="headerlink" title="21-列表"></a>21-列表</h2><p>列表顾名思义就是用来存储很多内容的集合,列表和数组基本是等同的,但是在R中,列表是最复杂的一种数据结构,也是非常重要的一种数据结构.</p><p>列表中可以存储若干个向量,矩阵,数据框,甚至其他的列表组合.</p><p>向量只能存储一种数据类型,列表却可以存储多种数据类型.</p><p>比如: 其实跟Python中的list是一样的</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; a &#x3D; 1:20&gt; b &#x3D; matrix(1:20,4)&gt; c &#x3D; mtcars&gt; d &#x3D; &quot;This is a test list&quot;&gt; mlist &#x3D; list(a,b,c,d)&gt; mlist[[1]] [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20[[2]]     [,1] [,2] [,3] [,4] [,5][1,]    1    5    9   13   17[2,]    2    6   10   14   18[3,]    3    7   11   15   19[4,]    4    8   12   16   20[[3]]                     mpg cyl  disp  hp drat    wt  qsec vs am gear carbMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3[[4]][1] &quot;This is a test list&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mlist[[1]]</code> 访问的数据本身,如果是一个中括号,则数据类型是一个list.所以给列表赋值的时候要两个中括号.</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; mlist[[5]] &#x3D; iris  &gt; mlist[-5]  就可以删除这个索引的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="22-数据框"><a href="#22-数据框" class="headerlink" title="22 数据框"></a>22 数据框</h2><p>数据框是一种表格式的数据结构,</p><p>数据集通常是由数据构成的一个矩形数组,行表示观测,列表示变量.不同的行业对于数据集的行列叫法不同.</p><p>数据框实际上是一个列表.列表中的元素就是向量,这些向量构成数据框的列,每一列的长度相同,数据框的列是必须命名的.</p><p>比如excel中的数据表就是一个数据框,其中的每一列的元素格式可以不同.</p><p>矩阵的数据必须是一个类型,数据框可以不同,数据框的每一列必须是同一类型,每一行可以不同.</p><p>生成数据框</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">state &#x3D; data.frame(state.name,state.abb,state.region,state.x77)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据框的访问,基本是一样的</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; state[1] 输出第一列&gt; state[c(2,4)]  输出2和4列&gt; state[,&quot;state.abb&quot;]&gt; state$state.abb  采用$符号的方式访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与plot函数使用的实例,绘制women的身高体重散点图</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">plot(women$height,women$weight) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><!--<img src="https://s1.ax1x.com/2020/05/28/teuy7t.png" alt="teuy7t.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/05/28/teuy7t.png" alt="teuy7t.png"></p><h4 id="不使用-符号的各种操作"><a href="#不使用-符号的各种操作" class="headerlink" title="不使用$符号的各种操作"></a>不使用$符号的各种操作</h4><p><code>attach</code>加载与<code>detach</code>取消加载;可以在终端中直接敲数据框的名字就可以了,就可以摆脱$符号</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; attach(mtcars)&gt; mpg  数据框的名称 [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7[31] 15.0 21.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>with</code>函数,不过要一个一个的加载,一般还是推荐使用$符号</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; with(mtcars,&#123;hp&#125;)&gt; hp [1] 110 110  93 110 175 105 245  62  95 123 123 180 180 180 205 215 230  66  52[20]  65  97 150 150 245 175  66  91 113 264 175 335 109<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>关于单双括号的解释,就像使火车,单括号还是访问的火车中的车厢,双括号就相当于把车厢取出来单独使用.</p><h2 id="23-因子"><a href="#23-因子" class="headerlink" title="23 因子"></a>23 因子</h2><p>R中的因子使不好理解的</p><p>变量的分类</p><ol><li>名义型变量:一般为字符串</li><li>有序型变量</li><li>连续型变量:一般为数值型</li></ol><p>在R中名义型变量和有序型变量称为因子,factor. 这些分类变量的可能值称为一个水平,level,例如good,better,best,都称为一个level. 有这些水平值构成的向量就称为因子.</p><p>因子的应用</p><ul><li>计算频数</li><li>独立性检验</li><li>相关性检验</li><li>方差分析</li><li>主成分分析</li><li>因子分析等</li></ul><p>table频数统计.cyl就是一个因子,4,6,8就是水平</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; mtcars$cyl [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4&gt; table(cyl)cyl 4  6  8 11  7 14 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>factor 函数可以将向量函数转换成因子,按照顺序排列</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; week &#x3D; factor(c(&quot;Mon&quot;,&quot;Fri&quot;,&quot;Tuh&quot;,&quot;Wed&quot;,&quot;Mon&quot;,&quot;Fri&quot;,&quot;Sun&quot;),ordered &#x3D; T,levels &#x3D; c(&quot;Mon&quot;,&quot;Tue&quot;,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;,&quot;Sat&quot;,&quot;Sun&quot;))&gt; week[1] Mon  Fri  &lt;NA&gt; Wed  Mon  Fri  Sun Levels: Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat &lt; Sun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>水平</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; fcyl &#x3D; factor(mtcars$cyl)&gt; fcyl  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8[32] 4Levels: 4 6 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过水平绘制柱状图,可以很好的进行频数统计</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; fcyl &#x3D; factor(mtcars$cyl)&gt; fcyl  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8[32] 4Levels: 4 6 8&gt; plot(fcyl )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!--<img src="https://s1.ax1x.com/2020/06/01/t861js.png" alt="t861js.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/01/t861js.png" alt="t861js.png"></p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; num &#x3D; 1:100&gt; cut(num,c(seq(0,100,10)))  [1] (0,10]   (0,10]   (0,10]   (0,10]   (0,10]   (0,10]   (0,10]   (0,10]   (0,10]   (0,10]   (10,20]  (10,20]  (10,20]  (10,20]  (10,20]  [16] (10,20]  (10,20]  (10,20]  (10,20]  (10,20]  (20,30]  (20,30]  (20,30]  (20,30]  (20,30]  (20,30]  (20,30]  (20,30]  (20,30]  (20,30]  ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>state.divsion和state.region,也是factor的内置数据</p><h2 id="24-缺失数据"><a href="#24-缺失数据" class="headerlink" title="24-缺失数据"></a>24-缺失数据</h2><p>缺失数据可分为</p><ul><li>完全随机缺失</li><li>随机缺失</li><li>非随机缺失<br>缺失可能是设备故障,测量的问题导致的</li></ul><p><code>NA</code>表示缺失not available的简称,不是没有值,知识未知的数值.</p><p>统计的时候跳过缺失值,但是平均值的时候还是按照全部的值的个数计算的.</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; a &#x3D; c(NA,1:49)&gt; sum(a)[1] NA&gt; sum(a,na.rm &#x3D; TRUE)[1] 1225&gt; mean(a,na.rm &#x3D; TRUE)[1] 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>na.omit()</code>去除缺失值</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; c &#x3D; c(NA,1:20,NA,NA)&gt; c [1] NA  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20[22] NA NA&gt; d &#x3D; na.omit(c)&gt; d [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20attr(,&quot;na.action&quot;)[1]  1 22 23attr(,&quot;class&quot;)[1] &quot;omit&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他缺失数据"><a href="#其他缺失数据" class="headerlink" title="其他缺失数据"></a>其他缺失数据</h4><ol><li>缺失数据NaN,代表不可能的值;</li><li>Inf表示无穷,分为正无穷Inf和负无穷Inf,代表无穷大或者无穷小.</li><li>Inf存在,是无穷大后者无穷小,但是表示不可能的值.</li></ol><ul><li>可以用<code>is.nan()</code>来识别不可能值</li><li>可以用<code>is.infinite()</code>来识别无穷值</li></ul><h2 id="25-字符串"><a href="#25-字符串" class="headerlink" title="25-字符串"></a>25-字符串</h2><p>R中可用的正则表达式</p><!--<img src="https://s1.ax1x.com/2020/06/01/tJHIUS.png" alt="tJHIUS.png" border="0" />--><p><img src="https://s1.ax1x.com/2020/06/01/tJHIUS.png" alt="tJHIUS.png"></p><p>统计字符串的长度,包括字符串</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; nchar(&quot;hello world&quot;)[1] 11&gt; nchar(month.name)  ## 可以返回向量的每个元素的长度,length不可以 [1] 7 8 5 5 3 4 4 6 9 7 8 8&gt; length(month.name)[1] 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>paste()</code>可以把字符串相连</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">### paste() 后面的参数都会与变量的每个元素连接&gt; name &#x3D; c(&quot;Moe&quot;,&quot;Larry&quot;,&quot;Curly&quot;)&gt; paste(name,&quot;loves stats&quot;)[1] &quot;Moe loves stats&quot;   &quot;Larry loves stats&quot; &quot;Curly loves stats&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>substr()</code>提取字符,可以提取每一个元素的字符</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">### start 表示起始位置,stop表示终止位置&gt; substr(x &#x3D; month.name,start &#x3D; 1,stop &#x3D; 3) [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot;[11] &quot;Nov&quot; &quot;Dec&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>大小写<code>tolower()</code>和<code>toupper()</code>和首字母大写</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; temp &#x3D; substr(x &#x3D; month.name,start &#x3D; 1,stop &#x3D; 3)&gt; temp [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot;[11] &quot;Nov&quot; &quot;Dec&quot;&gt; tolower(temp) [1] &quot;jan&quot; &quot;feb&quot; &quot;mar&quot; &quot;apr&quot; &quot;may&quot; &quot;jun&quot; &quot;jul&quot; &quot;aug&quot; &quot;sep&quot; &quot;oct&quot;[11] &quot;nov&quot; &quot;dec&quot;&gt; toupper(temp) [1] &quot;JAN&quot; &quot;FEB&quot; &quot;MAR&quot; &quot;APR&quot; &quot;MAY&quot; &quot;JUN&quot; &quot;JUL&quot; &quot;AUG&quot; &quot;SEP&quot; &quot;OCT&quot;[11] &quot;NOV&quot; &quot;DEC&quot;### 首字母大写不是很好解决,可以用正则替换，perl &#x3D; T表示支持perl语言的正则表达式&gt; gsub(&quot;^(\\w)&quot;,&quot;\\L\\1&quot;,tolower(temp),perl &#x3D; T) [1] &quot;jan&quot; &quot;feb&quot; &quot;mar&quot; &quot;apr&quot; &quot;may&quot; &quot;jun&quot; &quot;jul&quot; &quot;aug&quot; &quot;sep&quot; &quot;oct&quot;[11] &quot;nov&quot; &quot;dec&quot;&gt; gsub(&quot;^(\\w)&quot;,&quot;\\U\\1&quot;,tolower(temp),perl &#x3D; T) [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot;[11] &quot;Nov&quot; &quot;Dec&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>grep()</code>可以用来搜索字符串,其次还有<code>match()</code></p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; x &#x3D; c(&quot;b&quot;,&quot;A+&quot;,&quot;AC&quot;)&gt; grep(&quot;b&quot;,x,fixed &#x3D; T)[1] 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>strsplit()</code>可以用来分割字符串,返回一个列表,跟Python一个意思</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; path &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;R&quot;&gt; strsplit(path,&quot;&#x2F;&quot;)[[1]][1] &quot;&quot;      &quot;usr&quot;   &quot;local&quot; &quot;bin&quot;   &quot;R&quot;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>后语:正则表达式是很重要的技能</p><p>附赠技能:随机字符串,比如生成一副扑克牌</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> face <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">13</span><span class="token operator">></span> suit <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"spades"</span><span class="token punctuation">,</span><span class="token string">"clubs"</span><span class="token punctuation">,</span><span class="token string">"hearts"</span><span class="token punctuation">,</span><span class="token string">"diamonds"</span><span class="token punctuation">)</span><span class="token comment">### FUN表示接一个函数,这里是连接函数,sep表示连接符号</span><span class="token operator">></span> outer<span class="token punctuation">(</span>suit<span class="token punctuation">,</span>face<span class="token punctuation">,</span>FUN <span class="token operator">=</span> paste<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"spades-1"</span>   <span class="token string">"spades-2"</span>   <span class="token string">"spades-3"</span>   <span class="token string">"spades-4"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"clubs-1"</span>    <span class="token string">"clubs-2"</span>    <span class="token string">"clubs-3"</span>    <span class="token string">"clubs-4"</span>   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"hearts-1"</span>   <span class="token string">"hearts-2"</span>   <span class="token string">"hearts-3"</span>   <span class="token string">"hearts-4"</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"diamonds-1"</span> <span class="token string">"diamonds-2"</span> <span class="token string">"diamonds-3"</span> <span class="token string">"diamonds-4"</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"spades-5"</span>   <span class="token string">"spades-6"</span>   <span class="token string">"spades-7"</span>   <span class="token string">"spades-8"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"clubs-5"</span>    <span class="token string">"clubs-6"</span>    <span class="token string">"clubs-7"</span>    <span class="token string">"clubs-8"</span>   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"hearts-5"</span>   <span class="token string">"hearts-6"</span>   <span class="token string">"hearts-7"</span>   <span class="token string">"hearts-8"</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"diamonds-5"</span> <span class="token string">"diamonds-6"</span> <span class="token string">"diamonds-7"</span> <span class="token string">"diamonds-8"</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"spades-9"</span>   <span class="token string">"spades-10"</span>   <span class="token string">"spades-11"</span>   <span class="token string">"spades-12"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"clubs-9"</span>    <span class="token string">"clubs-10"</span>    <span class="token string">"clubs-11"</span>    <span class="token string">"clubs-12"</span>   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"hearts-9"</span>   <span class="token string">"hearts-10"</span>   <span class="token string">"hearts-11"</span>   <span class="token string">"hearts-12"</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"diamonds-9"</span> <span class="token string">"diamonds-10"</span> <span class="token string">"diamonds-11"</span> <span class="token string">"diamonds-12"</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"spades-13"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"clubs-13"</span>   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"hearts-13"</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token string">"diamonds-13"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-日期和时间"><a href="#26-日期和时间" class="headerlink" title="26-日期和时间"></a>26-日期和时间</h2><p><strong>主要两点</strong>:</p><ol><li>对时间序列的描述;一段时间内发生了什么.</li><li>利用前面的结果预测,预测接下来要发生什么.</li></ol><p>R包的分类中Task Views有很多的处理时间分析的包</p><p><code>airmiles</code>内置数据集就是一个专门的Time Series:的时间数据集.</p><p><code>Sys.Date()</code>可以显示现在的时间</p><p>格式化日期类型</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">"2017-01-01"</span>  <span class="token comment">## 这是一个字符串类型</span><span class="token operator">></span> as.Date<span class="token punctuation">(</span>a<span class="token punctuation">,</span>format <span class="token operator">=</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2017-01-01"</span><span class="token operator">></span> class<span class="token punctuation">(</span>as.Date<span class="token punctuation">(</span>a<span class="token punctuation">,</span>format <span class="token operator">=</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"Date"</span>  <span class="token comment">## 这是一个日期类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多格式化日期的参数可以查看<code>?strftime</code></p><p>可以用<code>seq()</code>创建一个连续的时间序列，创建连续的时间点:</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> seq<span class="token punctuation">(</span>as.Date<span class="token punctuation">(</span><span class="token string">"2017-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>as.Date<span class="token punctuation">(</span><span class="token string">"2017-07-05"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>by<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2017-01-01"</span> <span class="token string">"2017-01-06"</span> <span class="token string">"2017-01-11"</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token string">"2017-01-16"</span> <span class="token string">"2017-01-21"</span> <span class="token string">"2017-01-26"</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token string">"2017-01-31"</span> <span class="token string">"2017-02-05"</span> <span class="token string">"2017-02-10"</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token string">"2017-02-15"</span> <span class="token string">"2017-02-20"</span> <span class="token string">"2017-02-25"</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token string">"2017-03-02"</span> <span class="token string">"2017-03-07"</span> <span class="token string">"2017-03-12"</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token string">"2017-03-17"</span> <span class="token string">"2017-03-22"</span> <span class="token string">"2017-03-27"</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token string">"2017-04-01"</span> <span class="token string">"2017-04-06"</span> <span class="token string">"2017-04-11"</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token string">"2017-04-16"</span> <span class="token string">"2017-04-21"</span> <span class="token string">"2017-04-26"</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token string">"2017-05-01"</span> <span class="token string">"2017-05-06"</span> <span class="token string">"2017-05-11"</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token string">"2017-05-16"</span> <span class="token string">"2017-05-21"</span> <span class="token string">"2017-05-26"</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token string">"2017-05-31"</span> <span class="token string">"2017-06-05"</span> <span class="token string">"2017-06-10"</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token string">"2017-06-15"</span> <span class="token string">"2017-06-20"</span> <span class="token string">"2017-06-25"</span><span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token string">"2017-06-30"</span> <span class="token string">"2017-07-05"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随机生成48个数字</p><p>介绍了ts函数</p><h2 id="27-常见错误"><a href="#27-常见错误" class="headerlink" title="27-常见错误"></a>27-常见错误</h2><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><ul><li>等号问题,复制操作,<code>==</code>表示判断是否相等</li><li>赋值问题</li><li>c函数问题</li><li>括号的问题</li><li>引号问题,引号内的一边为字符</li><li>安装包的时候要加引号<code>install.packages(&quot;gclus&quot;)</code></li><li>逗号问题,起一个分割作用</li><li>在windows中路径<code>/</code>为R中的转义符</li><li>包是需要载入的,</li><li>R中严格区分大小写</li></ul><h4 id="解决问题方法"><a href="#解决问题方法" class="headerlink" title="解决问题方法"></a>解决问题方法</h4><ul><li>google</li><li>Rblogger</li><li>quickR</li><li>stackoverflow等</li></ul><h2 id="28-获取数据"><a href="#28-获取数据" class="headerlink" title="28-获取数据"></a>28-获取数据</h2><p>获取途径:</p><ul><li>利用键盘来输入数据;</li><li>读取存储在外部的数据;</li><li>通过访问数据框系统来获取数据;</li></ul><p>前面的都不主流,主要是访问外部的文件,或者数据框的信息</p><p>通过ODBC 访问数据库,相当于数据库的一个驱动.<br><code>install.packages(&quot;RODBC&quot;)</code>就可以安装了,但是我这里报错了</p><p>这里讲的不是很详细</p><h2 id="29-读取文件-一"><a href="#29-读取文件-一" class="headerlink" title="29-读取文件(一)"></a>29-读取文件(一)</h2><p>R几乎可以读取所有的数据文件</p><p><code>setwd(dir)</code>来设置工作目录;<br>在工作目录下<code>x = read.table(&quot;input.txt&quot;)</code>就可以读取文件了,这里只是读取到内存中.</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> x <span class="token operator">=</span> read.table<span class="token punctuation">(</span><span class="token string">"c:/Users/theing/Desktop/input.txt"</span><span class="token punctuation">)</span>  <span class="token comment">## 这样也可以读取文件信息</span><span class="token operator">></span> head<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">## 显示头部的信息</span><span class="token operator">></span> tail<span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">## 显示尾部的10行信息</span><span class="token operator">></span> x <span class="token operator">=</span> read.table<span class="token punctuation">(</span><span class="token string">"input.csv"</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span>  <span class="token comment">## 可以读取以","分割的csv文件</span><span class="token operator">></span> x <span class="token operator">=</span> read.csv<span class="token punctuation">(</span><span class="token string">"input.csv"</span><span class="token punctuation">)</span>  <span class="token comment">## 这个一样的效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>read.table()</code>的参数</p><ul><li>skip=5 可以跳过前面的行,从第六行读取数据</li><li>nrows=100 这样可以只读取前面100行.可以和skip 配合使用</li><li>na.strings 处理缺失值,</li><li>stringsAsFactors=False 用来控制字符串是否转换成因子,R会默认的将字符串转换成因子.所以要设置成false</li></ul><h2 id="30-读取文件-二"><a href="#30-读取文件-二" class="headerlink" title="30-读取文件(二)"></a>30-读取文件(二)</h2><p>read.table 也可以读取网络连接</p><p>老师展示了很多被墙了的链接,估计也是在暗示着什么</p><p>其次还介绍了foreign包,</p><p>如何搜索R的相关包</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> RSiteSearch<span class="token punctuation">(</span><span class="token string">"Matlab"</span><span class="token punctuation">)</span>檢索查詢疑問已被提交给http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>search.r<span class="token operator">-</span>project.org计算结果应很快就在瀏覽器里打开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读取剪切板的内容,</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 比如你在excel中复制了一部分内容,就可以用这个功能</span><span class="token comment">## readCliboard() 就是读取剪切板的内容.</span><span class="token operator">></span> x <span class="token operator">=</span> read.table<span class="token punctuation">(</span><span class="token string">"clipboard"</span><span class="token punctuation">,</span>header <span class="token operator">=</span> T<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读取一个压缩文本的文件,R也是可以直接读取的</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> read.table<span class="token punctuation">(</span>gzfile<span class="token punctuation">(</span><span class="token string">"input.txt.gz"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果遇到不标准的文件格式,可以用<code>readlines</code>和<code>scan</code></p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 可以限制读入的行数</span><span class="token operator">></span> readLines<span class="token punctuation">(</span><span class="token string">"input.csv"</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">></span> ?scan可以查看帮助<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="31-写入文件"><a href="#31-写入文件" class="headerlink" title="31-写入文件"></a>31-写入文件</h2><p>基本就是使用<code>write</code>函数</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> write<span class="token punctuation">(</span>x<span class="token punctuation">,</span>file <span class="token operator">=</span> <span class="token string">"x.txt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用,基本和Python类似。</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## sep 表示分隔符，row.name 表示行号</span><span class="token operator">></span> write.table<span class="token punctuation">(</span>x<span class="token punctuation">,</span>file <span class="token operator">=</span> <span class="token string">"c:/sld/sdl/x.csv"</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">,</span>row.name <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接写成压缩文件,比如</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> write.table<span class="token punctuation">(</span>mtcars<span class="token punctuation">,</span>gzfile<span class="token punctuation">(</span><span class="token string">"newfile.txt.gz"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="32-读取excel文件"><a href="#32-读取excel文件" class="headerlink" title="32-读取excel文件"></a>32-读取excel文件</h2><p>excel也是一个很好的数据统计文件,大多时候别人都是excel,所以还是应该掌握处理excel的能力.</p><p>excel倒过来的时候用的csv格式</p><p>XLConnect包,excel包含工作簿和工作表,称为workbook,可以直接打开xlsx的文件, 注意这个包是需要安装java环境.个人觉得这个没必要,能用excel处理就用excel处理.</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ex <span class="token operator">=</span> loadWorkbook<span class="token punctuation">(</span><span class="token string">"data.xlsx"</span><span class="token punctuation">)</span><span class="token operator">></span> readWorksheet<span class="token punctuation">(</span>ex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 1表示查看的第一个工作表</span><span class="token operator">></span> ?readWorksheet  <span class="token comment">##查看具体的功能介绍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑excel</p><p>分四步法</p><ul><li>用loadWorkbook创建一个工作簿</li><li>工作簿中创建工作表</li><li>用writeWorksheet工具把数据保存到工作表中</li><li>用seveWorkbook保存为excel文件<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> wb <span class="token operator">=</span> loadWorkbook<span class="token punctuation">(</span><span class="token string">"file.xlsx"</span><span class="token punctuation">,</span>create <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token operator">></span> createSheet<span class="token punctuation">(</span>wb<span class="token punctuation">,</span><span class="token string">"Sheet 1"</span><span class="token punctuation">)</span><span class="token operator">></span> wtiteWorksheet<span class="token punctuation">(</span>wb<span class="token punctuation">,</span>data<span class="token operator">=</span>mtcars<span class="token punctuation">,</span>sheet <span class="token operator">=</span> <span class="token string">"Sheet1"</span><span class="token punctuation">)</span><span class="token operator">></span> seveWorkbook<span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>查看XLConnet的详细介绍<pre class="line-numbers language-r" data-language="r"><code class="language-r">vignette<span class="token punctuation">(</span><span class="token string">"XLConnect"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>xlsx包的使用</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 读取第一个工作表的1到100行的内容,sheetName指明工作表的名称.append是否追加写入(新的文件,还是更改表格).</span><span class="token operator">></span> library<span class="token punctuation">(</span>xlsx<span class="token punctuation">)</span><span class="token operator">></span> read.xlsx<span class="token punctuation">(</span><span class="token string">"data.xlsx"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>startRow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>endRow <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">></span> write.xlsx<span class="token punctuation">(</span>x<span class="token punctuation">,</span>file <span class="token operator">=</span> <span class="token string">"rdata.xlsx"</span><span class="token punctuation">,</span>sheetName <span class="token operator">=</span> <span class="token string">"Sheet 1"</span><span class="token punctuation">,</span>append <span class="token operator">=</span> F<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-读写R格式的文档"><a href="#33-读写R格式的文档" class="headerlink" title="33-读写R格式的文档"></a>33-读写R格式的文档</h2><p>R有两种格式的文件,Rdata和RDS</p><p>RDS文件</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> saveRDS<span class="token punctuation">(</span>iris<span class="token punctuation">,</span>file<span class="token operator">=</span><span class="token string">"iris.RDS"</span><span class="token punctuation">)</span><span class="token operator">></span> readRDS<span class="token punctuation">(</span><span class="token string">"iris.RDS"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Rdata 文件,项目文件,使用load()加载,一般双击就可以打开了.</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 示例</span><span class="token operator">></span> load<span class="token punctuation">(</span><span class="token string">".RData"</span><span class="token punctuation">)</span><span class="token operator">></span> save<span class="token punctuation">(</span>iris<span class="token punctuation">,</span>iris3<span class="token punctuation">,</span>file <span class="token operator">=</span> <span class="token string">"c:/Users/theing/Desktop/iris.Rdata"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存镜像</p><pre class="line-numbers language-r" data-language="r"><code class="language-r">save.image<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="34-数据转换"><a href="#34-数据转换" class="headerlink" title="34-数据转换"></a>34-数据转换</h2><p>数据的收集和存储已经会了,这里开始数据的转换,转换后就可以分析数据了.</p><p>前面介绍是向量,矩阵,数组,数据框,列表,因子,时间序列,等的增删改查</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> cars32 <span class="token operator">=</span> read.csv<span class="token punctuation">(</span><span class="token string">"mtcars.csv"</span><span class="token punctuation">)</span><span class="token operator">></span> is.data.frame<span class="token punctuation">(</span>cars32<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token boolean">TRUE</span>  <span class="token comment">## 表示是一个矩阵</span><span class="token operator">></span> is.data.frame<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token boolean">FALSE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换为数据框</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> dstate.x77 <span class="token operator">=</span> as.data.frame<span class="token punctuation">(</span>state.x77<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转换为矩阵,变为字符串类型的矩阵</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> as.matrix<span class="token punctuation">(</span>data.frame<span class="token punctuation">(</span>state.region<span class="token punctuation">,</span>state.x77<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>methods查看内容</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> methods<span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token operator">></span> methods<span class="token punctuation">(</span>as<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="向量是R种基本的数据类型-加上一个维度就是数组或者矩阵"><a href="#向量是R种基本的数据类型-加上一个维度就是数组或者矩阵" class="headerlink" title="向量是R种基本的数据类型,加上一个维度就是数组或者矩阵"></a>向量是R种基本的数据类型,加上一个维度就是数组或者矩阵</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## > is.data.frame(state.x77)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token boolean">FALSE</span><span class="token operator">></span> x <span class="token operator">=</span> state.abb<span class="token operator">></span> dim<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">## 向量变因子</span><span class="token operator">></span> x <span class="token operator">=</span> state.babb<span class="token operator">></span> as.factor<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">## 变为列表</span><span class="token operator">></span> as.list<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一个数据框</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> state <span class="token operator">=</span> data.frame<span class="token punctuation">(</span>x<span class="token punctuation">,</span>state.region<span class="token punctuation">,</span>state.x77<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="35-数据转换-二"><a href="#35-数据转换-二" class="headerlink" title="35-数据转换(二)"></a>35-数据转换(二)</h2><p>讲一个取子集的操作</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 这是一个数据框</span><span class="token operator">></span> who <span class="token operator">=</span> read.csv<span class="token punctuation">(</span><span class="token string">"WHO.csv"</span><span class="token punctuation">,</span>header <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token operator">></span> who1 <span class="token operator">=</span> who<span class="token punctuation">[</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> who2 <span class="token operator">=</span> who<span class="token punctuation">[</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取出CountryID 在50到100的国家,似乎不知道怎么去理解</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> who4 <span class="token operator">=</span> who<span class="token punctuation">[</span>which<span class="token punctuation">,</span><span class="token punctuation">(</span>who<span class="token operator">$</span>CountryID <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&amp;</span> who<span class="token operator">$</span>CountryID <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> who4 <span class="token operator">=</span> subset<span class="token punctuation">(</span>who<span class="token punctuation">,</span>who<span class="token operator">$</span>CountryID <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&amp;</span> who<span class="token operator">$</span>CountryID <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>sample抽样,机器学习中抽取两份样本,一份用来建模,一份用来验证模型的有效性</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> ?sample<span class="token comment">## 例子,第一个参数为是选择那个向量,第二个是要抽取的个数,replace 表示是否放回式的抽样.</span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">100</span><span class="token operator">></span> sample<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>replace <span class="token operator">=</span> T<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">39</span> <span class="token number">23</span> <span class="token number">11</span> <span class="token number">26</span> <span class="token number">50</span> <span class="token number">86</span> <span class="token number">86</span> <span class="token number">71</span> <span class="token number">26</span>  <span class="token number">6</span> <span class="token number">10</span> <span class="token number">93</span> <span class="token number">81</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">87</span> <span class="token number">98</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span>  <span class="token number">6</span> <span class="token number">17</span> <span class="token number">87</span> <span class="token number">10</span> <span class="token number">69</span> <span class="token number">51</span> <span class="token number">24</span> <span class="token number">22</span> <span class="token number">70</span> <span class="token number">33</span> <span class="token number">68</span> <span class="token number">97</span> <span class="token number">82</span><span class="token operator">></span> sort<span class="token punctuation">(</span>sample<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>replace <span class="token operator">=</span> T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token number">8</span> <span class="token number">19</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">28</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">42</span> <span class="token number">50</span> <span class="token number">50</span> <span class="token number">50</span> <span class="token number">51</span> <span class="token number">52</span> <span class="token number">55</span> <span class="token number">58</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token number">60</span> <span class="token number">63</span> <span class="token number">70</span> <span class="token number">73</span> <span class="token number">77</span> <span class="token number">78</span> <span class="token number">83</span> <span class="token number">83</span> <span class="token number">84</span> <span class="token number">85</span> <span class="token number">89</span> <span class="token number">93</span> <span class="token number">96</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sample对数据框进行抽样,取子集</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> who<span class="token punctuation">[</span>sample<span class="token punctuation">(</span>who<span class="token operator">$</span>CountryID<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>replace <span class="token operator">=</span> F<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除固定行的数据</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 注意逗号的位置</span><span class="token operator">></span> mtcars<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment">## 清空这一行的数据</span><span class="token operator">></span> mtcars<span class="token operator">$</span>mpg <span class="token operator">=</span> <span class="token keyword">NULL</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果遇到几个数据表进行汇总,这里要用到数据框的合并,可以使用cbind和rbind函数,cbind添加一列,rbind添加一行.</p><p>cbind合并列</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## USArrests是一个数据集,state.division是一个因子</span><span class="token operator">></span> cbind<span class="token punctuation">(</span>USArrests<span class="token punctuation">,</span>state.division<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>rbind合并行,这个比较麻烦,需要所有的列有源数据集有相同的列名</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">## 取出前20行和尾20行合并</span><span class="token operator">></span> data1 <span class="token operator">=</span> head<span class="token punctuation">(</span>USArrests<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">></span> data2 <span class="token operator">=</span> head<span class="token punctuation">(</span>USArrests<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">></span> b <span class="token operator">=</span> rbind<span class="token punctuation">(</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>cbind和rbind也可以用于矩阵</p><p>回顾rownames可以取出行名</p><p>判断向量和数据框中哪些是重复值</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> duplicated<span class="token punctuation">(</span>who<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用unique(data4)可以一步取出重复项</p><h2 id="36-收据转换-三"><a href="#36-收据转换-三" class="headerlink" title="36-收据转换(三)"></a>36-收据转换(三)</h2><p>R中行列的调换,excel中可以复制后选择性粘贴.R中可以用<code>t()</code>函数实现转换</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> sractm <span class="token operator">=</span> t<span class="token punctuation">(</span>mtcars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独一行的反转,生物序列中很常见,主要是反向互补,可以使用rev函,reverse的意思 </p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> letters <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"a"</span> <span class="token string">"b"</span> <span class="token string">"c"</span> <span class="token string">"d"</span> <span class="token string">"e"</span> <span class="token string">"f"</span> <span class="token string">"g"</span> <span class="token string">"h"</span> <span class="token string">"i"</span> <span class="token string">"j"</span> <span class="token string">"k"</span> <span class="token string">"l"</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token string">"m"</span> <span class="token string">"n"</span> <span class="token string">"o"</span> <span class="token string">"p"</span> <span class="token string">"q"</span> <span class="token string">"r"</span> <span class="token string">"s"</span> <span class="token string">"t"</span> <span class="token string">"u"</span> <span class="token string">"v"</span> <span class="token string">"w"</span> <span class="token string">"x"</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token string">"y"</span> <span class="token string">"z"</span><span class="token operator">></span> rev<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"z"</span> <span class="token string">"y"</span> <span class="token string">"x"</span> <span class="token string">"w"</span> <span class="token string">"v"</span> <span class="token string">"u"</span> <span class="token string">"t"</span> <span class="token string">"s"</span> <span class="token string">"r"</span> <span class="token string">"q"</span> <span class="token string">"p"</span> <span class="token string">"o"</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token string">"n"</span> <span class="token string">"m"</span> <span class="token string">"l"</span> <span class="token string">"k"</span> <span class="token string">"j"</span> <span class="token string">"i"</span> <span class="token string">"h"</span> <span class="token string">"g"</span> <span class="token string">"f"</span> <span class="token string">"e"</span> <span class="token string">"d"</span> <span class="token string">"c"</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token string">"b"</span> <span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据框中的数据反转,思路就是,提取行名,反转,以反转后的行名为索引</p><pre><code>&gt; rowname(women)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda常用命令</title>
      <link href="/2020/02/26/bei-wang/anaconda-chang-yong-ming-ling/"/>
      <url>/2020/02/26/bei-wang/anaconda-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">anaconda 一些常用命令和设置，如有不全请告知添加。</blockquote><span id="more"></span><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><pre class="line-numbers language-none"><code class="language-none">conda update condaconda update anacondaconda update anaconda-navigator    &#x2F;&#x2F;update最新版本的anaconda-navigator   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>用户权限在自己用户目录下删除anaconda生成的文件夹就可以了。</p><p>root用户要在/root/中找到anaconda 生成的文件夹，提权删掉。<br><code>rm -rf anaconda</code></p><h3 id="conda-基本命令"><a href="#conda-基本命令" class="headerlink" title="conda 基本命令"></a>conda 基本命令</h3><pre class="line-numbers language-none"><code class="language-none">conda update -n base conda        &#x2F;&#x2F;update最新版本的condaconda create -n xxxx python&#x3D;3.5   &#x2F;&#x2F;创建python3.5的xxxx虚拟环境conda activate xxxx               &#x2F;&#x2F;开启xxxx环境conda deactivate                  &#x2F;&#x2F;关闭环境conda env list                    &#x2F;&#x2F;显示所有的虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导出该环境依赖"><a href="#导出该环境依赖" class="headerlink" title="导出该环境依赖"></a>导出该环境依赖</h3><p>名字随意，但是要用yml为扩展名，xml事另一种语言</p><blockquote><p>conda env export &gt; environment.yml </p></blockquote><p>安装环境依赖包，需要输入yml文件的路径</p><blockquote><p>conda env create -f environment.yml</p></blockquote><h3 id="conda-导出依赖包"><a href="#conda-导出依赖包" class="headerlink" title="conda 导出依赖包"></a>conda 导出依赖包</h3><p>conda批量导出包含环境中所有组件的requirements.txt文件</p><blockquote><p>conda list -e &gt; requirements.txt</p></blockquote><p>pip批量安装requirements.txt文件中包含的组件依赖</p><blockquote><p>conda install –yes –file requirements.txt</p></blockquote><h3 id="conda环境种更新包"><a href="#conda环境种更新包" class="headerlink" title="conda环境种更新包"></a>conda环境种更新包</h3><blockquote><p>conda update “包”</p></blockquote><blockquote><p>conda update –all</p></blockquote><h3 id="conda更换国内源"><a href="#conda更换国内源" class="headerlink" title="conda更换国内源"></a>conda更换国内源</h3><p>我一般都是用清华源，因为anaconda禁用过一段时间，清华是第一个恢复使用的，留下了好印象</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">连接</a></p><h3 id="pip-导出包"><a href="#pip-导出包" class="headerlink" title="pip 导出包"></a>pip 导出包</h3><p>pip 导出与安装依赖包<br>导出依赖包</p><blockquote><p>pip freeze &gt; requirements.txt</p></blockquote><p>安装依赖包</p><blockquote><p>pip install -r requirements.txt</p></blockquote><h3 id="pip临时源应用"><a href="#pip临时源应用" class="headerlink" title="pip临时源应用"></a>pip临时源应用</h3><blockquote><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> docker-compose</p></blockquote><h3 id="pip设置国内源"><a href="#pip设置国内源" class="headerlink" title="pip设置国内源"></a>pip设置国内源</h3><blockquote><p>pip config set global.index-url <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></p></blockquote><h3 id="其他pip源"><a href="#其他pip源" class="headerlink" title="其他pip源"></a>其他pip源</h3><pre class="line-numbers language-none"><code class="language-none"># 豆瓣https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F;# 阿里云    https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;# 清华大学https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;simple&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新卸载安装包"><a href="#更新卸载安装包" class="headerlink" title="更新卸载安装包"></a>更新卸载安装包</h3><h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><pre class="line-numbers language-none"><code class="language-none">conda remove -n xxxx --all &#x2F;&#x2F;创建xxxx虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="清理（conda瘦身）"><a href="#清理（conda瘦身）" class="headerlink" title="清理（conda瘦身）"></a>清理（conda瘦身）</h3><p><code>conda clean</code>就可以轻松搞定！第一步：通过<code>conda clean -p</code>来删除一些没用的包，这个命令会检查哪些包没有在包缓存中被硬依赖到其他地方，并删除它们。第二步：通过<code>conda clean -t</code>可以将conda保存下来的tar包。</p><pre class="line-numbers language-none"><code class="language-none">conda clean -p      &#x2F;&#x2F;删除没有用的包conda clean -t      &#x2F;&#x2F;tar打包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="jupyter-notebook默认工作目录设置"><a href="#jupyter-notebook默认工作目录设置" class="headerlink" title="jupyter notebook默认工作目录设置"></a>jupyter notebook默认工作目录设置</h3><p>1）在Anaconda Prompt终端中输入下面命令，查看你的notebook配置文件在哪里：</p><pre class="line-numbers language-none"><code class="language-none">jupyter notebook --generate-config&#x2F;&#x2F;会生成文件C:\Users\用户\.jupyter\jupyter_notebook_config.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）打开<code>jupyter_notebook_config.py</code>文件通过搜索关键词：<code>c.NotebookApp.notebook_dir</code>，修改如下</p><pre class="line-numbers language-none"><code class="language-none">c.NotebookApp.notebook_dir &#x3D; &#39;E:\\tf_models&#39;     &#x2F;&#x2F;修改到自定义文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）然后重启notebook服务器就可以了<br>注：其它方法直接命令到指定目录，Anaconda Prompt终端中输：jupyter notebook 目录地址</p><h3 id="使用conda-base环境为系统环境"><a href="#使用conda-base环境为系统环境" class="headerlink" title="使用conda base环境为系统环境"></a>使用conda base环境为系统环境</h3><p>conda config –set report_errors false/true</p>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于营养</title>
      <link href="/2020/02/26/he-jiu-chi-rou/guan-yu-ying-yang/"/>
      <url>/2020/02/26/he-jiu-chi-rou/guan-yu-ying-yang/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">这个问题也思考了很久，藏在心底也很久，但是一直没有时间去理解思考。</blockquote><span id="more"></span><p>从这个我就想到了一个问题，就是关于营养和发育的问题，以前基本是忽视了这个问题，在老师提来起来的时候我才想到，逐渐的发现这个营养是很重要的，有些东西并不是努力才可以实现的</p><p>就像王者荣耀里陈咬金的台词，强壮的身体和精神，有没有发现不吃早饭的人意志力都是比较差的，同时这些人身体和肤色也不是很好。</p><h2 id="观察中的问题"><a href="#观察中的问题" class="headerlink" title="观察中的问题"></a>观察中的问题</h2><h3 id="对初中的时候"><a href="#对初中的时候" class="headerlink" title="对初中的时候"></a>对初中的时候</h3><p>因为我每天都要锻炼，确实是这样，我相比于班上的一些人是比较活跃的，回答问题也是比较积极的，初中的时候因为爸爸的一句话，“每天晚上做几个俯卧撑，一天多做一个”，我坚持锻炼了好几年，每天晚上都会做俯卧撑，到最后甚至一晚上做200多个俯卧撑，然后就有了极限，当时并不知道怎么科学的锻炼，只知道做的越多越好，具体哪里好也不知道。因为我每天都要锻炼，我相比于班上的一些人是比较活跃的，但是也出现了一些问题就是，我因为过度的锻炼身体而耗去了大量的营养，导致身体发育不良。</p><h3 id="高中读书的时候"><a href="#高中读书的时候" class="headerlink" title="高中读书的时候"></a>高中读书的时候</h3><p>在我高中读书的的时候，因为一些原因，，，<br>由于营养没有跟上，经常上课精神恍惚，不能集中注意力，<br>记得读书的时候，明明精神很好，但是一张卷子做不完，做到最后的时候眼睛就乱转，模糊，不能很好的集中注意力，当时不知道为什么，只是觉得自己好笨啊，但是当我精神好的时候去做最后的题目又觉得不是很难，，</p><h3 id="大学读书的时候"><a href="#大学读书的时候" class="headerlink" title="大学读书的时候"></a>大学读书的时候</h3><p>就是我在杨职读书的时候发现的一个问题：</p><p>就是西农的学生普遍是比较高大的，少部分身材比较矮瘦。说白了就是整体素质比较高，杨凌这个地方学生还是很多的，当一群人走过来的时候，你通过眼神气势就可以看出西农的学生和杨职的学生，差别是很大的，西农的学生普遍很高大，观察人的时候眼神是不一样；然后我就开始思考这个问题了，真的这么巧合？真的是我没有努力？真的是我很笨？真的是基因问题？</p><h2 id="对于营养的思考"><a href="#对于营养的思考" class="headerlink" title="对于营养的思考"></a>对于营养的思考</h2><h3 id="动物的共性"><a href="#动物的共性" class="headerlink" title="动物的共性"></a>动物的共性</h3><p>以前也经常看人与自然，为什么我们见到的动物领袖总是身材高大的，要战胜领袖就要进行挑战，挑战无非就只有打架，打架当然就是身材高大的哪一方更容易赢，赢了后就更有威慑性，这是刻在我们基因里的东西，所以当我们面对一个四肢发达头脑简单的人和你对峙的时候，身材瘦小却智商高的人会立即认怂，顶多会在背后嘟囔“四肢发达头脑简单的呆瓜”</p><h3 id="瘦小的人更喜欢思考"><a href="#瘦小的人更喜欢思考" class="headerlink" title="瘦小的人更喜欢思考"></a>瘦小的人更喜欢思考</h3><p>其实很多时候我也会观察到，就是身体瘦小的人似乎活动量更多，经过查阅，实际上身体瘦小的人确实是普遍比肥胖者智商更高，神经系统更发达，更喜欢思考问题，这是一个很复杂的问题，，可以简单的理解为，因为找不到食物，而刺激大脑思考如何得到食物，大脑生成更多的神经突出，，，相比用剩下的营养去漫无目的的寻找食物，生成更多的神经突出，思考食物的出处，有目的的去寻找食物显然更加合算。</p><h3 id="关于武术"><a href="#关于武术" class="headerlink" title="关于武术"></a>关于武术</h3><p>前段时间有一个武术打假的徐晓东，其实我也是一样的，我并不相信武术这种东西，更相信搏击，真正的肉体搏击。<br>技巧只能少部分的提升你的攻击性，更多的是你的身高，体重，爆发，肌肉强度，甚至无关与智力。当你具有一定的攻击性的时候，说话就有了底气（气场这个东西很虚，但是确实存在，最主要的是前额叶高级神经中枢），你营养跟上后，就相当于有了一个大电池，可以源源不断的给大脑提供营养，此时你智力也会有更好的发展，所以不要觉得哪些可恶的人很笨，实际上是你占不到优势，很气愤才会觉得这个人很可恶。</p><h3 id="能量的吞金兽"><a href="#能量的吞金兽" class="headerlink" title="能量的吞金兽"></a>能量的吞金兽</h3><p>大脑消耗的能量和肌肉消耗的能量不是一个量级，几乎是十倍的差距，作为营养主要的消耗地方“大脑”得不到足够的营养能量来源而发育迟缓，表现出来就是当你集中精神去学习做事情的时候就会很恍惚，脑子不灵光，眼睛乱转，会本能的避开眼前正在集中精神思考的事情，会忽然的感觉大脑很难受，大脑发胀发热，或者忽然冷一下；这时候大脑疲劳，得不到足够的营养支撑，体内的血糖很低导致的，此时应该立即停止思考，深呼吸，眺望远方，补充个能量。</p><h3 id="沟通上的唯诺"><a href="#沟通上的唯诺" class="headerlink" title="沟通上的唯诺"></a>沟通上的唯诺</h3><p>当一个人身材瘦小的时候，总是很自卑的，得不到别人的认同，所以很少沟通，所以大脑的活跃量很少，神经突触就很少，表现出来就是不会说话，大家都会排斥，产生一个负向的循环。<br>别人一开口你都插不上嘴的情况你是否有经历过，即使别人讨论的是你擅长的领域，但你仍然说不过别人，你肚子里面有东西，但就是表达不出来，你很着急，但此时别人是一脸鄙视的。<br>所以当一个人营养跟上的时候，这个人应该是开朗的，健谈的，身材比例匀称的，肤色正常的，所以人不可貌相应当是错误的。</p><h3 id="奇怪的结论"><a href="#奇怪的结论" class="headerlink" title="奇怪的结论"></a>奇怪的结论</h3><p>那么得到一个结论就是，身体不是锻炼出来的，聪明不是学习出来的，而是吃出来的，这时候得到另一个结论就是，你身体的消化系统对你以后的发展起着至关重要的作用，所以吃就成了一个问题。怎么吃，怎么锻炼你的胃，怎么有效吸收，怎么使你的身体得到足够的养分，怎么调动你的身体积极吸收这些养分，，，，</p><h2 id="发育问题"><a href="#发育问题" class="headerlink" title="发育问题"></a>发育问题</h2><p><em>真是一个复杂的问题啊</em></p><h3 id="想吃什么吃什么"><a href="#想吃什么吃什么" class="headerlink" title="想吃什么吃什么"></a>想吃什么吃什么</h3><p>很多人会提起母乳的重要性，知道母乳是很重要的，但是为什么重要却不知道，母乳中含有婴幼儿的必须氨基酸，和人体中很多的益生菌种类，人体的健康就是被这些细菌操控着的，这些益生菌就像是有生命的酶一样，能够吸收转化很多物质。一些细菌甚至对你的身体是有微毒的，但是，只要你供的好就不会对你的身体造成伤害，当你吃的食物中长期缺乏一种食物的时候，一些细菌对这种食物又有特殊嗜好的时候，这个时候这些细菌就会抱怨，会恨你没给他吃这种食物，这时就会释放毒素刺激神经，让大脑知道“我”需要这种食物，这其实是有益的，这会平衡人体所需，</p><h3 id="维生，，素"><a href="#维生，，素" class="headerlink" title="维生，，素"></a>维生，，素</h3><p>很多人都知道维生素，但是维生素是什么又不知道，维生素分为脂溶性和水溶性，水溶性需求量大，无毒；脂溶性的需求量小，过量导致维生素中毒。维生素也是维他命是vitamin的谐音，为什么维生素重要呢？从字面上就可以理解了，维持生命，咳咳，，抽象理解就可以了；因为人体自身是无法自己合成的，所以被称为维生素，维生素的作用主要是用于合成体内特定的酶，作为酶的活性中心，或者特定酶的激活结构，人体就是一个巨大的化学工厂，每时每刻都进行着巨量的化学反应，化学反应的驱动就是酶，缺少了酶化学反应就受阻，生命活动就不能进行，，所以平衡饮食是非常重要的，，</p><h3 id="运动的好处"><a href="#运动的好处" class="headerlink" title="运动的好处"></a>运动的好处</h3><p>体型中把人体分为外胚型，中胚型，和内胚型，外胚型特征为高瘦，中胚型比较匀称，内胚型体型宽阔，</p><p>这样看来我应该使外胚型的体质，但是由于初中过度锻炼原因，身体营养没有跟上，瘦不说，身高也不足，甚至没有父亲的身高。外胚型体制基础代谢率比较高，就是由于基因的缘故，身体本身就处于一个代谢率高于平均水平的状态，所以营养大部分都拿来代谢掉了，只有少部分营养拿来构建身体，所以有吃不胖的瘦子，表面上哪些瘦子吃的比哪些胖子都多，但是就是不胖，都是拿来消耗了啊，</p><p>运动能加快身体循环，使身体加快代谢，这样你的身体和大脑都会更加的活跃，所需的营养也会更多，会促进食欲的增长与吸收。</p><p>大脑就像身体的cpu，身体就像ram运存，食物就像rom硬盘，当ram过小，即使cpu再强也会卡机，当ram向rom读取数据的时候如果读取的太慢也会感觉很卡，，，</p>]]></content>
      
      
      <categories>
          
          <category> 喝酒吃肉 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode 远程开发</title>
      <link href="/2020/02/22/bian-ji-qi/vscode-yuan-cheng-kai-fa/"/>
      <url>/2020/02/22/bian-ji-qi/vscode-yuan-cheng-kai-fa/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">如何用vscode 进行线上开发,开发后即可部署。</blockquote><span id="more"></span><p>在插件中安装  Remote-SSH 远程工具<br><img src="https://s2.ax1x.com/2020/02/22/3QKJu4.png" alt="3QKJu4.png"></p><p>添加服务器<br><img src="https://s2.ax1x.com/2020/02/23/3lr4aR.png" alt="3lr4aR.png"></p><p>在顶部会出现一个需要输入ssh连接的命令，根据提示输入你远端的账户和地址<br><img src="https://s2.ax1x.com/2020/02/22/3QKeBj.png" alt="3QKeBj.png"></p><p>或者按F1，输入 Remote-SSH 选择 Connect to Host - Configure SSH Hosts：<br><img src="https://s2.ax1x.com/2020/02/22/3QMKqH.png" alt="3QMKqH.png"></p><p>直接编辑ssh config 文件<br><img src="https://s2.ax1x.com/2020/02/22/3QMgQU.png" alt="3QMgQU.png"><br><img src="https://s2.ax1x.com/2020/02/22/3QMoJx.png" alt="3QMoJx.png"></p><p>依次填写服务器的别名、主机名（ IP 或者域名）、用户名，保存。<br><img src="https://s2.ax1x.com/2020/02/22/3QQPl8.png" alt="3QQPl8.png"></p><p>然后就可以在左端面板上看见你添加的ssh 远端服务器，右击选择连接就可以了，中间vscode出现防火墙提示请通过。</p><p>如果出现以下问题，可能是你的ssh config文件的路径有问题，因为windows的路径切换用的是”\“,而linux 用的”/“,在vscode中配置的时候会用”/“ ,所以在windows中可能会出现以下问题，<br><img src="https://s2.ax1x.com/2020/02/22/3QlLad.png" alt="3QlLad.png"></p><p>这时候应该手动设置ssh 配置文件路径<br>在设置中搜索<code>remote ssh config file</code></p><p>ssh配置文件一般是在你的用户目录下，为隐藏文件，没有的话就自己新建一个<br><img src="https://s2.ax1x.com/2020/02/22/3QBIDs.png" alt="3QBIDs.png"></p><p>退出保存后就可以登录服务器了，这时候是用的密码的方式登录，连接后会在编辑器顶部出现输入框，输入密码连接。</p><p>进去后就是熟悉的模式，熟悉的vscode的味道，但是连接的终端服务器却是云服务器。</p><p>此后你也可以配置密匙对进行安全连接，后期更。</p>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js初级算法合集</title>
      <link href="/2020/02/15/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-chu-ji-suan-fa-ji-he/"/>
      <url>/2020/02/15/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-chu-ji-suan-fa-ji-he/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">js初级算法合集</blockquote><span id="more"></span><h2 id="一、翻转字符串"><a href="#一、翻转字符串" class="headerlink" title="一、翻转字符串"></a>一、翻转字符串</h2><p>自己写出来的丑陋代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> turn <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    turn <span class="token operator">=</span> turn <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> turn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-none"><code class="language-none">olleh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、阶乘算法"><a href="#二、阶乘算法" class="headerlink" title="二、阶乘算法"></a>二、阶乘算法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorialize</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">=</span> sum <span class="token operator">*</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">factorialize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-none"><code class="language-none">120<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、判断文字是否为回文"><a href="#三、判断文字是否为回文" class="headerlink" title="三、判断文字是否为回文"></a>三、判断文字是否为回文</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 删除文字中的空格，符号，留下字母</span><span class="token keyword">var</span> newstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把大写的字母转换成小写字符</span>newstr <span class="token operator">=</span> newstr<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把原有的字符串回文</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> newstr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>newstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!==</span> newstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//逐个字符比较，不匹配返回false</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">"eye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-none"><code class="language-none">true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、寻找最长的单词算法"><a href="#四、寻找最长的单词算法" class="headerlink" title="四、寻找最长的单词算法"></a>四、寻找最长的单词算法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> str_list <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据空格进行单词分割，放入列表</span>    <span class="token keyword">var</span> word_lenght <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str_list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>str_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> word_lenght<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            word_lenght <span class="token operator">=</span> str_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//遇见长度大的赋值</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> word_lenght<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、设置首字母大写算法"><a href="#五、设置首字母大写算法" class="headerlink" title="五、设置首字母大写算法"></a>五、设置首字母大写算法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">titleCase</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>newStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    newStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> newStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用切片和转化大小写函数实现</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> newStr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使列表用空格生成句子</span><span class="token punctuation">&#125;</span><span class="token function">titleCase</span><span class="token punctuation">(</span><span class="token string">"I'm a little tea pot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-none"><code class="language-none">I&#39;m A Little Tea Pot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、寻找数组中的最大值"><a href="#六、寻找数组中的最大值" class="headerlink" title="六、寻找数组中的最大值"></a>六、寻找数组中的最大值</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">largestOfFour</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arr_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> u<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> u<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> max_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">></span>arr_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                arr_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> arr_list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">largestOfFour</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">857</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-none"><code class="language-none">[5,27,39,1001]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、确认末尾字符"><a href="#七、确认末尾字符" class="headerlink" title="七、确认末尾字符"></a>七、确认末尾字符</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">confirmEnding</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//截取与判断字符相同的字符</span><span class="token keyword">var</span> tar_length <span class="token operator">=</span> target<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">var</span> str_last <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span>tar_length<span class="token punctuation">)</span><span class="token comment">//与判断字符比较</span><span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">==</span> str_last <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// return target==str_last;</span><span class="token function">confirmEnding</span><span class="token punctuation">(</span><span class="token string">"Bastian"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、重复操作算法"><a href="#八、重复操作算法" class="headerlink" title="八、重复操作算法"></a>八、重复操作算法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> newStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newStr <span class="token operator">=</span> newStr <span class="token operator">+</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、字符串截取算法"><a href="#九、字符串截取算法" class="headerlink" title="九、字符串截取算法"></a>九、字符串截取算法</h2><p>显示约定多的字符，多余的字符用…表示</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">></span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span>  <span class="token punctuation">&#125;</span><span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">"A-tisket a-tasket A green and yellow basket"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、数组分割算法"><a href="#十、数组分割算法" class="headerlink" title="十、数组分割算法"></a>十、数组分割算法</h2><p>基本上就是字符串分割算法，这个还是不太合理，需要更加合理的底层算法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">chunk</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">var</span> chunk<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   chunk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">return</span> chunk<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、数组截断算法"><a href="#十一、数组截断算法" class="headerlink" title="十一、数组截断算法"></a>十一、数组截断算法</h2><p>第一个参数从第二个参数开始截断</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">slasher</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> howMany</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>howMany <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>howMany<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">slasher</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、数组查询算法"><a href="#十二、数组查询算法" class="headerlink" title="十二、数组查询算法"></a>十二、数组查询算法</h2><p>[“hello”, “Hello”]应该返回true，在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。</p><p>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mutation</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> str1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> strArr <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> pos <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>strArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">////indexOf用于从头到尾检测字符串是否含有字串，它对大小写敏感</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mutation</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"hey"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、删除数组中特定值算法"><a href="#十三、删除数组中特定值算法" class="headerlink" title="十三、删除数组中特定值算法"></a>十三、删除数组中特定值算法</h2><p>删除数组中的所有的假值。<br>在JavaScript中，假值有false、null、0、””、undefined 和 NaN。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bouncer</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//直接转换成布尔值if来判断。</span>       t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、去除数组中任意多个值算法"><a href="#十四、去除数组中任意多个值算法" class="headerlink" title="十四、去除数组中任意多个值算法"></a>十四、去除数组中任意多个值算法</h2><p>实现一个 destroyer 函数，第一个参数是初始数组，后跟一个或多个参数。从初始数组中删除与这些参数具有相同值的所有元素。</p><p>destroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].</p><p>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].</p><p>这个暂时不太理解，摘自[<a href="https://blog.csdn.net/qq_42044073/article/details/82491676]">https://blog.csdn.net/qq_42044073/article/details/82491676]</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">destroyer</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> e <span class="token operator">!==</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">destroyer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十五、数组排序并插入值算法"><a href="#十五、数组排序并插入值算法" class="headerlink" title="十五、数组排序并插入值算法"></a>十五、数组排序并插入值算法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">where</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//首先进行数组的排序</span>   <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//遍历数字找到对应的索引</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果没有适合的插入点，直接插入到最后</span>            <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js算法合集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不管怎样</title>
      <link href="/2019/12/24/he-jiu-chi-rou/bu-guan-zen-yang/"/>
      <url>/2019/12/24/he-jiu-chi-rou/bu-guan-zen-yang/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">———— 特蕾莎修女</blockquote><span id="more"></span><p>这是我在看陈果《善与德》视频的时候摘抄的，其中我也不知道为什么我会觉得善良很重要，也许是奶奶从小教导我要从善，要做一个好人，不求大富大贵的思想吧。</p><p>为什么好人不作为？<br>我记得在上高中的时候，一天中午往常一样去上课，路过滨河路的时候看见有一位老人，走路的时候明显就是不对的，他是杵着一个拐杖，但是他却使劲的，努力的想把重量分单在拐杖上，走两步停两步。我看着背影就觉得不太对，就放慢了脚步跟在了后面，果不其然那老人，就在我前面几米的地方，头向着天上仰去，两腿就软了下来，双手使劲的拽着拐杖，倒了下来。想都没想，疾步上去就揽住了那位老人，由于太重重心不稳，我也一起摔倒在地，但是好在老人没有磕在地面，我也没有受伤，我扶起了老人，此时老人神智似乎还有些模糊，我猜估计是低血糖，就没有让老人起来，让他坐着，此时周围的人就围了过来，但，，，也就只是围了过来，没有一个人上来帮忙，我也犹豫了下，似乎我不应该摊上这事啊，我还要上课，难道我还要送老人去医院？我一激灵，环顾了下四周，发现了个似乎很有钱的胖子，“ 哈哈，就是你了，你不上来，我让你上来 ”，我就对着这个中年人讲“ 叔叔，你可以帮个忙叫下120吗？我还要上课，能帮忙把这位老人送去医院不？” 说着我起身就要离开了，同时在我的请求下也上来了些人扶着老人，给老人遮阳（那时是中午，吃了饭去学校的途中），然后我就离开了，至于后来老人怎么样了我就不太清楚了，这是我也没跟其他人提起过，每天也是照常上课。<br>我在看他们眼神的时候并不是不想上前，而都是在顾虑，，，</p><p>为什么想起了这件事，我并没有拿这件事来吹嘘自己，但是拿现在的我来说，如果遇到同样的事情，我依然会上前，那些人不动，我就让他们动，那些人不行善，我就让他们行善，即使他们是不情愿的，但是你帮他们做了件好事。</p><p>其中我觉得很珍贵的一句话就是：知行合一，身心一致，以身载道，践行真理。</p><p>以下摘自特蕾莎修女的名言：</p><p>People are often unreasonable， irrational， and self-centered.</p><p>Forgive them anyway.</p><p>If your are kind, people may accuse you of selfishness, ulterior motives.</p><p>Be kind anyway.</p><p>If you are successful, you will win some unfaithful friends and some genuine enemies.</p><p>Succeed anyway.</p><p>If you are honest and sincere, people may decieve you.</p><p>Be honest and sincere anyway.</p><p>What you spend years creating , others could destroy overnight.</p><p>Create anyway</p><p>If you find serenity and happiness, some may be jealous.</p><p>Be happy anyway.</p><p>The good you do today, will often be forgotten.</p><p>Do good anyway.</p><p>Give the best you have, and it will never be enough.</p><p>Give your best anyway.</p><p>In the final analysis, it is between you and God. It is never between you and them anyway.</p><h3 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h3><p>人们经常是不讲道理的，没有逻辑的，和自我为中心的。</p><p>不管怎样，你要原谅他们。</p><p>即使你是友善的，人们可能时还是会说你自私和动机不良的。</p><p>不管怎样，还是要友善。</p><p>当你有一天功成名就，你会有很多虚假的朋友和一些真实的敌人。</p><p>不管怎样，你要取得成功。</p><p>即使你是诚实的和直率的，人们可能还是会欺骗你。</p><p>不管怎样，还是要诚实，还是要率直。</p><p>你多年来营造的东西，有人在一夜之间将它摧毁。</p><p>不管怎样，还是要去营造。</p><p>如果有一天，你找到了平静和幸福，他们可能会忌妒你。</p><p>不管怎样，还是要快乐。</p><p>你今天做的善事，人们往往明天就会忘记。</p><p>不管怎样，你还是要做善事。</p><p>即使你把最好的东西都给了这个世界，也许这些东西永远都还不够。</p><p>不管怎样，把你最好的东西给这个世界。</p><p>所以说，这只是关于你和上帝之间的事，绝对不是关于其他人的事。</p>]]></content>
      
      
      <categories>
          
          <category> 喝酒吃肉 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>寻找最长单词算法</title>
      <link href="/2019/12/20/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-xun-zhao-zui-chang-dan-ci-suan-fa/"/>
      <url>/2019/12/20/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-xun-zhao-zui-chang-dan-ci-suan-fa/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">用split函数把字符串分割成列表，然后判断列表中字符串的长度，进行比较。</blockquote><span id="more"></span><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> str_list <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> word_lenght <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str_list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> word_lenght<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            word_lenght <span class="token operator">=</span> str_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> word_lenght<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js最长单词算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js判断字符是否为回文</title>
      <link href="/2019/12/20/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-pan-duan-zi-fu-shi-fou-wei-hui-wen/"/>
      <url>/2019/12/20/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-pan-duan-zi-fu-shi-fou-wei-hui-wen/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">palindrome(回文)是指一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样。</blockquote><span id="more"></span><p>其中涉及到正则表达式，，，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 删除文字中的空格，符号，留下字母</span><span class="token keyword">var</span> newstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把大写的字母转换成小写字符</span>newstr <span class="token operator">=</span> newstr<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把原有的字符串回文</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> newstr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>newstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!==</span> newstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//逐个字符比较，不匹配返回false</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">"eye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs异步回调的理解</title>
      <link href="/2019/12/20/nodejs/nodejs-yi-bu-hui-diao-de-li-jie/"/>
      <url>/2019/12/20/nodejs/nodejs-yi-bu-hui-diao-de-li-jie/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">nodejs中异步编程的体现就是回调。</blockquote><span id="more"></span><p>所谓异步编程体现的就是回调。</p><p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。</p><p>同步操作一般是先读取文件，读取完成后给到一个变量，然后继续执行程序，程序执行到需要这个文件数据的时候填入变量，这样一步一步的操作，相对于异步同时读取文件的时候就执行其他命令，节约了读取文件数据的时间，这样大大提高了nodejs的性能，在处理高并发请求的时候有着显著的性能提升。</p><h3 id="同步阻塞代码实例"><a href="#同步阻塞代码实例" class="headerlink" title="同步阻塞代码实例"></a>同步阻塞代码实例</h3><p>创建一个input.txt文件,写入“hello world”</p><pre class="line-numbers language-none"><code class="language-none">var fs &#x3D; require(&quot;fs&quot;);var data &#x3D; fs.readFileSync(&#39;input.txt&#39;);console.log(data.toString());console.log(&quot;程序执行结束!&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">$ node main.jshello world程序执行结束!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步非阻塞代码实例"><a href="#异步非阻塞代码实例" class="headerlink" title="异步非阻塞代码实例"></a>异步非阻塞代码实例</h3><p>创建一个input.txt文件,写入“hello world”</p><pre class="line-numbers language-none"><code class="language-none">var fs &#x3D; require(&quot;fs&quot;);fs.readFile(&#39;input.txt&#39;, function (err, data) &#123;    if (err) return console.error(err);    console.log(data.toString());&#125;);console.log(&quot;程序执行结束!&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">$ node main.js程序执行结束!hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>代码来自菜鸟教程</em></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 异步回调 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>colemak dvorak norman 键盘布局</title>
      <link href="/2019/12/18/linux/colemak-dvorak-norman-jian-pan-bu-ju/"/>
      <url>/2019/12/18/linux/colemak-dvorak-norman-jian-pan-bu-ju/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">以前看了一片文章，说现在的qwerty键盘布局很低效，我也只是看了下。后来在谈论键盘布局的时候和室友起了争执，室友说现在的键盘布局是根据字母使用频率来排布的，“很科学”，我当时很惊奇！！还没怎么争论还口，室友就又活在了自己的世界里，唉，实在争不过啊！！这个事件后我对这个键盘布局产生了一丝兴趣。下面这篇文章来介绍下主要的几个键盘布局。</blockquote><span id="more"></span><p><strong>我参照了现在比较热门的键盘布局，有colemak layout; Dvorak layout; norman layout;</strong></p><h3 id="qwerty-英文下的热力图"><a href="#qwerty-英文下的热力图" class="headerlink" title="qwerty 英文下的热力图"></a>qwerty 英文下的热力图</h3><p><img src="https://s2.ax1x.com/2019/12/19/Qq31pT.png" alt="Qq31pT.png"></p><h3 id="qwerty中文下的热力图"><a href="#qwerty中文下的热力图" class="headerlink" title="qwerty中文下的热力图"></a>qwerty中文下的热力图</h3><p><img src="https://s2.ax1x.com/2019/12/18/QHizLQ.png" alt="QHizLQ.png"></p><p>可以看出不只是英文输入，中文拼音输入时也是一样的，使用频率高的几个键都跑偏，说qwerty真的是效率杀手一点也不为过，，，</p><h2 id="dvorak-键盘布局"><a href="#dvorak-键盘布局" class="headerlink" title="dvorak 键盘布局"></a>dvorak 键盘布局</h2><p>这个布局丑的一批，似乎这种布局在以前很流行，但是现在基本没有多少人用了，</p><!-- ![Q7xFTf.png](https://s2.ax1x.com/2019/12/18/Q7xFTf.png) --><!-- ![QHNkfx.png](https://s2.ax1x.com/2019/12/18/QHNkfx.png) --><h3 id="在英文下的热力图"><a href="#在英文下的热力图" class="headerlink" title="在英文下的热力图"></a>在英文下的热力图</h3><p><img src="https://s2.ax1x.com/2019/12/19/Qq8D5q.png" alt="Qq8D5q.png"></p><h3 id="在中文拼音下的热力图"><a href="#在中文拼音下的热力图" class="headerlink" title="在中文拼音下的热力图"></a>在中文拼音下的热力图</h3><p><img src="https://s2.ax1x.com/2019/12/19/Qq8hZ9.png" alt="Qq8hZ9.png"></p><p>这种键盘的主要弊端就是<code>z,x,c,v</code>这几个键位都偏到了不知道的地方，在windows操作系统中非常的不合适，但是在linux系统中可以设置快捷键来改变。</p><h2 id="最后说下-colemak-layout"><a href="#最后说下-colemak-layout" class="headerlink" title="最后说下 colemak layout"></a>最后说下 colemak layout</h2><!-- ![Q7jzq0.png](https://s2.ax1x.com/2019/12/18/Q7jzq0.png) --><p>我个人是比较喜欢这个键盘布局的，因为这个键盘布局保留了<code>z,x,c,v</code>这几个键位，这几个键位在win10中的作用不用多说，“撤销”，“剪切”，“复制”，“粘贴”。其次在使用中把使用频率最高的字母放在了中间的，使得手指不用频繁的离开原来的位置而打字。</p><h3 id="下面是英文的使用热力图"><a href="#下面是英文的使用热力图" class="headerlink" title="下面是英文的使用热力图"></a><strong>下面是英文的使用热力图</strong></h3><!-- ![Q7zc5T.png](https://s2.ax1x.com/2019/12/18/Q7zc5T.png) --><p><img src="https://s2.ax1x.com/2019/12/18/QHUFbQ.png" alt="QHUFbQ.png"></p><p>其中使用英文的时候基本所有的使用频率高的字母都是排列在了中间的一排位置。这样在使用英文的时候可以极大的提高打字的速度。</p><h3 id="这个是我把中文转换为拼音后的热力图"><a href="#这个是我把中文转换为拼音后的热力图" class="headerlink" title="这个是我把中文转换为拼音后的热力图"></a><strong>这个是我把中文转换为拼音后的热力图</strong></h3><!-- ![Q7zxsA.png](https://s2.ax1x.com/2019/12/18/Q7zxsA.png) --><p><img src="https://s2.ax1x.com/2019/12/18/QHU8a9.png" alt="QHU8a9.png"><br>我们在输入中文的时候使用频率最高的是“<code>i</code>”这个键，可以看到，这个键盘布局在输入中文的时候相比qwerty键盘布局是要高效很多的，其中使用频率相对较高的<code>g</code>和<code>z</code>是没有在中间的位置，还有就是右手的负担有点过大。</p><h2 id="再介绍下这个-norman-键盘布局"><a href="#再介绍下这个-norman-键盘布局" class="headerlink" title="再介绍下这个 norman 键盘布局"></a>再介绍下这个 norman 键盘布局</h2><h3 id="下面是英文输入时的热力图"><a href="#下面是英文输入时的热力图" class="headerlink" title="下面是英文输入时的热力图"></a>下面是英文输入时的热力图</h3><!-- ![QH9RG8.png](https://s2.ax1x.com/2019/12/18/QH9RG8.png) --><p><img src="https://s2.ax1x.com/2019/12/18/QHNqDe.png" alt="QHNqDe.png"><br>不用多说，看着就挺美的</p><h3 id="这个是输入中文拼音时的热力图"><a href="#这个是输入中文拼音时的热力图" class="headerlink" title="这个是输入中文拼音时的热力图"></a>这个是输入中文拼音时的热力图</h3><!-- ![QHp07q.png](https://s2.ax1x.com/2019/12/18/QHp07q.png) --><p><img src="https://s2.ax1x.com/2019/12/18/QHN6jU.png" alt="QHN6jU.png">  </p><p>这样的布局我觉得是比较合适的，相比于<code>colemak</code>他把<code>e</code>键移到了左手，<code>i</code>键挪到了右手中指，同时把<code>g</code>键从一个比较偏的位置挪到了中间一排，使得右手的负担大大减小，左右手可以协同输入。</p><p>最后说下，我先开始是没有了解到这个<code>normen</code> 布局的，我先开始上手的是<code>colemak</code> 键盘布局，用了半个多月，在输入英文的时候感觉这个布局是比<code>qwerty</code>键盘明显高效很多的，有一种很奇怪的就把子打完了的感觉。在输入中文的时候个人感觉不是很顺滑，右手的使用频率很高，而且左右手不是在协同操作，总是感觉一个手打了很多的字。其中热力图就显示出来了，右手的使用要明显高于左手的。使用了半个多月后我还是换回了<code>qwerty</code>键盘布局，主要原因还是觉得我如果用其他人电脑的时候没法使用键盘。</p><p>在学习<code>colemak</code>键盘布局的时候我也花费了很多的时间去适应，大概花费了一星期左右大概达到了原有的水平，想学习的小朋友还是要斟酌斟酌了，毕竟是改变原有的操作习惯，而且还是潜意识的操作习惯，其中的学习代价是很高的，学完后，还有弊端就是，大家都跟你不一样，别人没法用你的电脑，你也基本也没法操作别人的电脑，如果你换回原有的键盘布局也有一到两天的适应时间。 </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘布局 </tag>
            
            <tag> colemak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现翻转字符串</title>
      <link href="/2019/12/10/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-shi-xian-fan-zhuan-zi-fu-chuan-suan-fa/"/>
      <url>/2019/12/10/ji-suan-ji-yu-yan/suan-fa/js-suan-fa/js-shi-xian-fan-zhuan-zi-fu-chuan-suan-fa/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">通过对字符列表的for循环倒着添加到一个字符列表，即字符串。</blockquote><span id="more"></span><h3 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h3><p>自己写出来的丑陋代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> rstr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rstr <span class="token operator">=</span> rstr <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> rstr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为olleh</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>云端ide配置</title>
      <link href="/2019/12/08/bian-ji-qi/yun-duan-ide-pei-zhi-anaconda3-huan-jing/"/>
      <url>/2019/12/08/bian-ji-qi/yun-duan-ide-pei-zhi-anaconda3-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">使用Cloud studio 配置anaconda3环境的时候要设置.zshrc文件配置环境变量。</blockquote><span id="more"></span><h2 id="什么是Cloud-studio"><a href="#什么是Cloud-studio" class="headerlink" title="什么是Cloud studio"></a>什么是Cloud studio</h2><p>不用多说给出官方链接(<a href="https://studio.dev.tencent.com/">https://studio.dev.tencent.com/</a>)</p><p>为什么我开始使用Cloud studio ,因为这个webIDE提供了完整的Linux环境，其次是提供了webIDE协同开发这种模式，这个IDE应该就可以看作是云端的一个vscode.</p><p><strong>弊端</strong><br>每个用户每日只可以使用两小时。</p><h2 id="注册Cloud-studio"><a href="#注册Cloud-studio" class="headerlink" title="注册Cloud studio"></a>注册Cloud studio</h2><p>点击上方链接注册coding账号<br><img src="https://s2.ax1x.com/2019/12/08/QaFbYd.png" alt="QaFbYd.png"><br><img src="https://s2.ax1x.com/2019/12/08/QaFXlt.png" alt="QaFXlt.png"><br>完成注册后就可以进入编辑工具了</p><p><a href="https://imgse.com/i/Qakn7F"><img src="https://s2.ax1x.com/2019/12/08/Qakn7F.md.png" alt="Qakn7F.md.png"></a></p><p>点击跳过</p><p><strong>按照提示新建项目或导入项目,或者直接跳过</strong><br><img src="https://s2.ax1x.com/2019/12/08/Qak311.png" alt="Qak311.png"></p><p><strong>在右上方，点击code的图标，就可以进入Cloud studio</strong><br><img src="https://s2.ax1x.com/2019/12/08/QakN7D.png" alt="QakN7D.png"></p><p><strong>创建一个环境，仓库可以选空，如果有可以填上你的仓库地址</strong><br><img src="https://s2.ax1x.com/2019/12/08/QakgHS.png" alt="QakgHS.png"></p><p>基本就是熟悉的vscode的界面了，然后选择终端更新apt</p><blockquote><p>apt update<br>apt upgrade</p></blockquote><p>安装wget 和vim 并下载anaconda3</p><blockquote><p>apt install -y wget vim<br>wget <a href="https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh">https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh</a></p></blockquote><p>在下载的anaconda目录下</p><blockquote><p>zsh Anaconda3-2019.10-Linux-x86_64.sh</p></blockquote><p>然后同意协议<code>yes</code>，是否使用使用conda做为默认环境(这里看你喜好，我是选的yes,默认是no)</p><p>不过可以通过<code>conda config --set auto_activate_base false/true</code>进行更改</p><p>然后进入<code>.bashrc</code>跳到最后复制conda的环境配置变量到<code>.zshrc</code>文件中</p><blockquote><p>vim ~/.bashrc<br><img src="https://s2.ax1x.com/2019/12/08/QaEbY4.png" alt="QaEbY4.png"></p></blockquote><p>进入.zshrc文件中粘贴到末尾保存</p><blockquote><p>vim ~/.zshrc</p></blockquote><p>注意这是在.zshrc配置文件中<br><img src="https://s2.ax1x.com/2019/12/08/QaEj61.png" alt="QaEj61.png"></p><p>使用.zshrc配置文件作为源</p><blockquote><p>source ~/.zshrc</p></blockquote><p>这时候发现conda命令就可以使用了 python也是使用的anaconda3的环境</p><p>===</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a><em>后记</em></h3><h4 id="关于bash-和-zsh-两种shell"><a href="#关于bash-和-zsh-两种shell" class="headerlink" title="关于bash 和 zsh 两种shell"></a>关于bash 和 zsh 两种shell</h4><p>一般Linux默认使用的是<code>bash</code>这种shell</p><p>Zsh具有以下主要功能：</p><ul><li>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项。</li><li>在用户启动的所有shell中共享命令历史。</li><li>通过扩展的文件通配符，可以不利用外部命令达到find命令一般展开文件名。</li><li>改进的变量与数组处理。</li><li>在缓冲区中编辑多行命令。</li><li>多种兼容模式，例如使用/bin/sh运行时可以伪装成Bourne shell。</li><li>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏。</li><li>可加载的模块，提供其他各种支持：完整的TCP与Unix域套接字控制，FTP客户端与扩充过的数- 学函数。</li><li>完全可定制化。</li></ul><p>切换两种<code>shell</code>命令</p><blockquote><p>chsh -s /bin/bash</p></blockquote><blockquote><p>chsh -s /bin/zsh</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的误区</title>
      <link href="/2019/12/07/he-jiu-chi-rou/bo-ke-de-wu-qu/"/>
      <url>/2019/12/07/he-jiu-chi-rou/bo-ke-de-wu-qu/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">关于写博客的一些误区</blockquote><span id="more"></span><h2 id="敢于写，敢于尝试，敢于分享"><a href="#敢于写，敢于尝试，敢于分享" class="headerlink" title="敢于写，敢于尝试，敢于分享"></a><strong>敢于写，敢于尝试，敢于分享</strong></h2><p>以前总觉得写博客一定是要写的很正式，写的有技术含量，但我接触的都是写没有技术含量的东西，所以一直都没有怎么写博客。现在想起来，真是犯了一个大错，以前学东西总是学什么忘什么，自己也不以为然，到现在猛然醒悟，学习是一个学与习的过程，学完东西是要去用的，用的时候才会加深映像。</p><h2 id="人生应留下些东西，走过的路应有痕迹"><a href="#人生应留下些东西，走过的路应有痕迹" class="headerlink" title="人生应留下些东西，走过的路应有痕迹"></a>人生应留下些东西，走过的路应有痕迹</h2><p>我想我的博客平台应该是一个人身宝库，不管是踩坑、感悟、还是code，我都应该去记录，毕竟应该留下些什么东西。</p><h2 id="总盯着过去你会瞎掉一只眼，忘却过去会双目失明。"><a href="#总盯着过去你会瞎掉一只眼，忘却过去会双目失明。" class="headerlink" title="总盯着过去你会瞎掉一只眼，忘却过去会双目失明。"></a>总盯着过去你会瞎掉一只眼，忘却过去会双目失明。</h2><p>我讨厌过去，因为在我小时候的经历，因为一些阴影总会想去忘却这些事情，也许是因为逃避，我总是想要忘记过去的一些事情，不愿去提及，但是想着忘记的时候又映像更加深刻，久而久之成了疾。</p><h2 id="当下即最好"><a href="#当下即最好" class="headerlink" title="当下即最好"></a>当下即最好</h2><p>在《围城》中说到，城外的人想进去，城里的人想出来，虽是讲婚姻，但是放到大的环境中也是如此的；这和《蓝，另一种蓝》中的思想是差不多的，即当下即最好，我们要做的就是让当下变得更好。</p><h2 id="傻是一种福气"><a href="#傻是一种福气" class="headerlink" title="傻是一种福气"></a>傻是一种福气</h2><p><em>坚持最重要，保留一颗敬畏之心</em></p>]]></content>
      
      
      <categories>
          
          <category> 喝酒吃肉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 误区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、矩阵链乘法</title>
      <link href="/2019/12/03/ji-suan-ji-yu-yan/suan-fa/python-suan-fa/er-ju-zhen-lian-cheng-fa/"/>
      <url>/2019/12/03/ji-suan-ji-yu-yan/suan-fa/python-suan-fa/er-ju-zhen-lian-cheng-fa/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">矩阵乘法是一个满足结合律的运算。矩阵A、B、C来说，(AB)C 与 A(BC) 是等价的，但是计算机不可以。</blockquote><span id="more"></span><h2 id="矩阵链算法"><a href="#矩阵链算法" class="headerlink" title="矩阵链算法"></a>矩阵链算法</h2><p>矩阵乘法是一个满足结合律的运算。显然，对于矩阵A、B、C来说，(AB)C 与 A(BC) 是等价的，我们可以根据自己的心情选择任意的运算顺序，总之，结果都是一样的。</p><p>糟糕的是，对计算机来说可不是这么回事，若我们假定矩阵 A=[10,20], B=[20,30], C=[30,40]，那么在以下两种运算顺序中，标量相乘的次数是天差地别：</p><p>(AB)C = 10<em>20</em>30 + 10<em>30</em>40 = 18000</p><p>A(BC) = 20<em>30</em>40 + 10<em>20</em>40 = 32000</p><p>我们可以使用递归关系来找到我们需要的最优解法，首先，我们要用一个函数MCM来得到最小标量相乘次数，那么MCM也可用来定义在所有情况下的最优子段，则：</p><p>再使用动态规划和备忘录法即可得到结果，时间复杂度为O(n³)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mult</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span>        <span class="token comment"># single matrix chain has zero cost</span>    aux <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">+</span> chain<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token comment"># i: length of subchain</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># j: starting index of subchain</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            best <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token comment"># k: splitting point of subchain</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># multiply subchains at splitting point</span>                lcost<span class="token punctuation">,</span> lname<span class="token punctuation">,</span> lrow<span class="token punctuation">,</span> lcol <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token punctuation">,</span> k<span class="token punctuation">]</span>                rcost<span class="token punctuation">,</span> rname<span class="token punctuation">,</span> rrow<span class="token punctuation">,</span> rcol <span class="token operator">=</span> aux<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span>                cost <span class="token operator">=</span> lcost <span class="token operator">+</span> rcost <span class="token operator">+</span> lrow <span class="token operator">*</span> lcol <span class="token operator">*</span> rcol                var <span class="token operator">=</span> <span class="token string">'(%s%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>lname<span class="token punctuation">,</span> rname<span class="token punctuation">)</span>                <span class="token comment"># pick the best one</span>                <span class="token keyword">if</span> cost <span class="token operator">&lt;</span> best<span class="token punctuation">:</span>                    best <span class="token operator">=</span> cost                    aux<span class="token punctuation">[</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">,</span> var<span class="token punctuation">,</span> lrow<span class="token punctuation">,</span> rcol    <span class="token keyword">return</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cost'</span><span class="token punctuation">,</span> <span class="token string">'order'</span><span class="token punctuation">,</span> <span class="token string">'rows'</span><span class="token punctuation">,</span> <span class="token string">'cols'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> aux<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">## 测试代码</span>mult<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵链乘法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、汉诺塔的递归</title>
      <link href="/2019/12/03/ji-suan-ji-yu-yan/suan-fa/python-suan-fa/yi-han-nuo-ta-de-di-gui/"/>
      <url>/2019/12/03/ji-suan-ji-yu-yan/suan-fa/python-suan-fa/yi-han-nuo-ta-de-di-gui/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">汉诺塔问题一直都是经典的递归问题。</blockquote><span id="more"></span><p>大概的思想就是将最大的圆盘移动到右边的柱子上，所以我们需要将其他的圆盘移动到中间的柱子上；</p><p>所以这个问题就变成了如何将 N-1 个圆盘移动到中间的柱子上。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li>要将 N 个圆盘从左边柱子移动到右边柱子：</li></ul><ol><li>将 N-1 个圆盘从左边柱子移动到中间柱子。</li><li>将最大的圆盘从左边柱子移动到右边柱子。</li><li>将 N-1 个圆盘从中间柱子移动到右边柱子。</li></ol><h4 id="递归的定义："><a href="#递归的定义：" class="headerlink" title="递归的定义："></a>递归的定义：</h4><ul><li>链条：递归的链条比如n*(n-1)就是链条，简单的说就是循环的部分。</li><li>基例：存在一个或多个不需要递归的基例。</li></ul><p>这里left =&gt; right为基例</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">,</span> middle<span class="token operator">=</span><span class="token string">'middle'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> height<span class="token punctuation">:</span>  <span class="token comment"># 如果</span>        hanoi<span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token string">'=>'</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        hanoi<span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">,</span> left<span class="token punctuation">)</span>hanoi<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的一些常用命令</title>
      <link href="/2019/12/02/bei-wang/git-de-yi-xie-chang-yong-ming-ling/"/>
      <url>/2019/12/02/bei-wang/git-de-yi-xie-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">git的一些常用命令和协作流程</blockquote><span id="more"></span><h3 id="1-远程仓库相关命令"><a href="#1-远程仓库相关命令" class="headerlink" title="1. 远程仓库相关命令"></a>1. 远程仓库相关命令</h3><table><thead><tr><th align="left">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">$ git clone</td><td align="center">克隆仓库</td></tr><tr><td align="left">$ git clone url –branch 分支名</td><td align="center">克隆指定的分支</td></tr><tr><td align="left">$ git remote -v</td><td align="center">查看远程仓库</td></tr><tr><td align="left">$ git remote add [name] [url]</td><td align="center">添加远程仓库</td></tr><tr><td align="left">$ git remote rm [name]</td><td align="center">删除远程仓库</td></tr><tr><td align="left">$ git remote set-url –push [name] [newUrl]</td><td align="center">修改远程仓库</td></tr><tr><td align="left">$ git remote set-url –add origin [url]</td><td align="center">增加远程链接</td></tr><tr><td align="left">$ git pull [remoteName] [localBranchName]</td><td align="center">拉取远程仓库</td></tr><tr><td align="left">$ git push [remoteName] [localBranchName]</td><td align="center">推送到远端仓库</td></tr></tbody></table><h3 id="2-本地的一些命令"><a href="#2-本地的一些命令" class="headerlink" title="2. 本地的一些命令"></a>2. 本地的一些命令</h3><table><thead><tr><th align="left">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">$ git clone</td><td align="center">克隆仓库</td></tr><tr><td align="left">$ git add .</td><td align="center">添加文件到stage</td></tr><tr><td align="left">$ git commit -m ‘comments here’</td><td align="center">把stage中的修改提交到本地仓库</td></tr><tr><td align="left">$ git merge master</td><td align="center">master分支合并到当前分支</td></tr><tr><td align="left">$ git merge tool</td><td align="center">调用merge工具</td></tr><tr><td align="left">$ git stash</td><td align="center">把未完成的修改缓存到栈容器中</td></tr><tr><td align="left">$ git stash list</td><td align="center">查看所有缓存</td></tr><tr><td align="left">$ git stash pop</td><td align="center">恢复本地分支到缓存状态</td></tr><tr><td align="left">$ git blame someFile</td><td align="center">查看某个文件的每一行的修改记录（谁在什么时候修改的）</td></tr><tr><td align="left">$ git log</td><td align="center">查看当前分支上面的日志信息</td></tr><tr><td align="left">$ git diff</td><td align="center">查看当前没有add的内容</td></tr><tr><td align="left">$ git diff –cache</td><td align="center">查看已经add但是没有commit的内容</td></tr><tr><td align="left">$ git diff HEAD</td><td align="center">上面两个内容的合并</td></tr><tr><td align="left">$ git reset –hard HEAD</td><td align="center">撤销本地修改</td></tr><tr><td align="left">$ echo $HOME</td><td align="center">查看git config的HOME路径</td></tr><tr><td align="left">$ export $HOME=/c/gitconfig</td><td align="center">配置git config的HOME路径</td></tr></tbody></table><h3 id="3-分支-branch-操作相关命令"><a href="#3-分支-branch-操作相关命令" class="headerlink" title="3. 分支(branch)操作相关命令"></a>3. 分支(branch)操作相关命令</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">$ git branch</td><td align="left">查看本地分支</td></tr><tr><td align="left">$ git branch -r</td><td align="left">查看远端分支</td></tr><tr><td align="left">$ git branch [name]</td><td align="left">创建本地分支</td></tr><tr><td align="left">$ git branch -d [name]</td><td align="left">删除分支</td></tr><tr><td align="left">$ git chechout [name]</td><td align="left">切换到这个分支</td></tr><tr><td align="left">$ git chechout -b [name]</td><td align="left">创建并切换到新的分支</td></tr><tr><td align="left">$ git push origin [name]</td><td align="left">创建远程分支(本地分支push到远程)</td></tr><tr><td align="left">$ git push origin test:master</td><td align="left">提交本地test分支作为远程的master分支</td></tr><tr><td align="left">$ git push origin test:test</td><td align="left">提交本地test分支作为远程的test分支</td></tr><tr><td align="left">$ git push origin :test</td><td align="left">刚提交到远程的test将被删除，但是本地还会保存的，不用担心</td></tr></tbody></table><h3 id="4-版本-tag-操作相关命令"><a href="#4-版本-tag-操作相关命令" class="headerlink" title="4. 版本(tag)操作相关命令"></a>4. 版本(tag)操作相关命令</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git tag</td><td align="left">查看版本</td></tr><tr><td align="left">git tag [name]</td><td align="left">创建版本</td></tr><tr><td align="left">git tag -d [name]</td><td align="left">删除版本</td></tr><tr><td align="left">git tag -r</td><td align="left">查看远端版本</td></tr><tr><td align="left">git push origin [name]</td><td align="left">创建远程版本(本地版本push到远程)</td></tr><tr><td align="left">git push origin :refs/tags/[name]</td><td align="left">删除远程版本</td></tr></tbody></table><h3 id="团队协作的一般流程"><a href="#团队协作的一般流程" class="headerlink" title="团队协作的一般流程"></a>团队协作的一般流程</h3><h4 id="克隆一个全新的项目，完成新功能并且提交："><a href="#克隆一个全新的项目，完成新功能并且提交：" class="headerlink" title="克隆一个全新的项目，完成新功能并且提交："></a>克隆一个全新的项目，完成新功能并且提交：</h4><ol><li>git clone XXX   //克隆代码库</li><li>git checkout -b test   //新建分支</li><li>modify some files   //完成修改</li><li>git add .   //把修改加入stage中</li><li>git commit -m ‘’  //提交修改到test分支</li><li>review代码</li><li>git checkout master   //切换到master分支</li><li>git pull   //更新代码</li><li>git checkout test     //切换到test分支</li><li>git meger master   //把master分支的代码merge到test分支</li><li>git push origin 分支名  //把test分支的代码push到远程库</li></ol><h4 id="目前正在test分支上面开发某个功能，但是没有完成。突然一个紧急的bug需要处理"><a href="#目前正在test分支上面开发某个功能，但是没有完成。突然一个紧急的bug需要处理" class="headerlink" title="目前正在test分支上面开发某个功能，但是没有完成。突然一个紧急的bug需要处理"></a>目前正在test分支上面开发某个功能，但是没有完成。突然一个紧急的bug需要处理</h4><ol><li>git add .</li><li>git stash</li><li>git checkout bugFixBranch</li><li>git pull –rebase origin master</li><li>fix the bug</li><li>it add .</li><li>git commit -m ‘’</li><li>git push</li><li>git checkout test</li><li>g2. it stash pop</li><li>continue new feature’s developmen</li></ol>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 常用命令 备忘</title>
      <link href="/2019/11/29/bei-wang/hexo-chang-yong-ming-ling-bei-wang/"/>
      <url>/2019/11/29/bei-wang/hexo-chang-yong-ming-ling-bei-wang/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">如果忘了hexo的命令怎么办呢？？？</blockquote><span id="more"></span><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 新建一个新的稿件</span>hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建时 layout  Post layout. Use post, page, draft or whatever you want.<br>post 表示发布，page 单独一个页面 ，draft草稿</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-p, –path</td><td>自定义新文章的路径</td></tr><tr><td>-r, –replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s, –slug</td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>比如在用 -p 时<code>hexo new page --path about/me &quot;About me&quot;</code></p><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 生成静态文件</span>hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-d, –deploy</td><td>文件生成后立即部署网站</td></tr><tr><td>-w, –watch</td><td>监视文件变动</td></tr><tr><td>-b, –bail</td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td>-f, –force</td><td>强制重新生成文件</td></tr><tr><td>-c, –concurrency</td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 用于发布草稿</span>hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>hexo p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启动服务</span>hexo serverhexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-p, –port</td><td>重设端口</td></tr><tr><td>-s, –static</td><td>只使用静态文件</td></tr><tr><td>-l, –log</td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 部署站点</span>hexo deployhexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-g, –generate</td><td>部署之前预先生成静态文件</td></tr></tbody></table><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><pre class="line-numbers language-none"><code class="language-none">hexo clean清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 列出网站资料</span>hexo list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># hexo 版本</span>hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客-添加评论系统</title>
      <link href="/2019/11/29/bo-ke/bo-ke-tian-jia-ping-lun-xi-tong/"/>
      <url>/2019/11/29/bo-ke/bo-ke-tian-jia-ping-lun-xi-tong/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">我查看了很多的评论都说这个valine评论系统比较好，查了官网，也确实，所以，，，就你了</blockquote><div style = "text-align:center"></div> <span id="more"></span><hr><h2 id="valine介绍"><a href="#valine介绍" class="headerlink" title="valine介绍"></a>valine介绍</h2><p>根据valine 介绍特性中描述，valine稳定高效，支持表情，无后端，而且支持markdown！！</p><p>那么就开始愉快的记录下这个安装适配的过程吧！</p><h3 id="注册LeanClond"><a href="#注册LeanClond" class="headerlink" title="注册LeanClond"></a>注册LeanClond</h3><p>已经注册过的跳过<br><a href="https://www.leancloud.cn/">LeanClond官网链接</a><br>注意现在注册是需要验证身份的</p><p>注册登录后进入<code>控制台</code>点解<code>创建应用</code><br><img src="https://s2.ax1x.com/2019/11/29/QAgJ54.png" alt="QAgJ54.png"></p><p>创建好后点击进入应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的APP ID和APP Key了：</p><p><img src="https://s2.ax1x.com/2019/11/29/QA2x1A.png" alt="QA2x1A.png"></p><p>拿到了<code>AppID</code> 和<code>AppKey</code>就可以开始设置你的next的主题了,打开<code>_config.yml</code>文件,<code>ctrl + f</code>搜索<code>valine</code><br><img src="https://s2.ax1x.com/2019/11/29/QAWCvR.png" alt="QAWCvR.png"></p><p>把<code>enable</code>的值改成<code>true</code>,在<code>appid</code>和<code>appkey</code>填入你在leancloud中得到的<code>appid</code>和<code>appkey</code>的值，然后保存退出就可以了。</p><p>在终端输入</p><blockquote><p>hexo clean</p></blockquote><p>然后输入</p><blockquote><p>hexo s</p></blockquote><p>就可以看到文章下面的评论框了</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>我用的next主题是v7 如果你版本是v5或以下的可能有莫名奇妙的问题请到相应的主题文件夹下命令</p><blockquote><p>git pull</p></blockquote><p>升级next主题</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 评论系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>renger使用</title>
      <link href="/2019/10/12/linux/renger-shi-yong/"/>
      <url>/2019/10/12/linux/renger-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">无意间看见了renger终端文件管理的工具，高兴惨了，以后再也不用cd过来cd过去了</blockquote><div style = "text-align:center"></div> <span id="more"></span><h1 id="ranger的使用"><a href="#ranger的使用" class="headerlink" title="ranger的使用"></a>ranger的使用</h1><hr><p>下面介绍下ranger终端文件管理的使用，都是网上爬的算是收藏吧！</p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt install ranger<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><ol><li>配置文件<br>首先复制配置文件到主目录:<pre class="line-numbers language-none"><code class="language-none">ranger --copy-config&#x3D;all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>然后自己到~/.config/ranger中配置各种选项即可<br>2. 配置ranger<br>在～/.config/ranger中有ranger的配置文件.<br>找到文件<code>scope.sh</code>中, 在externsions部分注释掉不想预览的文件类型, 在那行上面添加”#”注释掉即可. ranger在预览rar等压缩包时会运行得比较慢.<br><code>rc.conf</code>保存着快捷键的说明<br>3. 自动挂载U盘等外部存储位置,需要安装usbmount:</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install usbmountsudo vim &#x2F;etc&#x2F;usbmount&#x2F;usbmount.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>MOUNTOPTIONS</code>那行添加<code>user</code>即可使普通用户也对挂载的U盘拥有写权限, 如下:<br><code>MOUNTOPTIOS=&quot;rw,user,noatime,nodiratime&quot; </code></p><h2 id="三、-快捷键"><a href="#三、-快捷键" class="headerlink" title="三、 快捷键"></a>三、 快捷键</h2><p>下面列出常用操作的快捷键</p><p>?  查看帮助</p><h3 id="浏览"><a href="#浏览" class="headerlink" title="浏览:"></a>浏览:</h3><p>H   后退<br>L   前进<br>gg  跳到顶端<br>G   跳到底端<br>gh  go home<br>gn  新建标签<br>f   查找<br>/   搜素<br>g   快速进入目录</p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑:"></a>编辑:</h3><p>space   选择<br>uv      取消选择</p><p>yy      复制<br>dd      剪切<br>pp      粘贴<br>delete  删除<br>cw      重命名<br>A       在当前名称基础上重命名<br>I       类似A, 但是光标会跳到起始位置<br>Ctrl-f  向下翻页<br>Ctrl-b  向上翻页</p><h3 id="书签"><a href="#书签" class="headerlink" title="书签:"></a>书签:</h3><p>m       新建书签<br>`       打开书签<br>um      删除书签</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签:"></a>标签:</h3><p>gn / C-n        新建标签<br>TAB / S-TAB     切换标签<br>A-Right, A-Left 切换标签<br>gc / C-w        关闭标签</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序:"></a>排序:</h3><p>on/ob   根据文件名进行排序(natural/basename)<br>oc      根据改变时间进行排序 (Change Time 文件的权限组别和文件自身数据被修改的时间)<br>os      根据文件大小进行排序(Size)<br>ot      根据后缀名进行排序 (Type)</p><p>oa      根据访问时间进行排序 (Access Time 访问文件自身数据的时间)<br>om      根据修改进行排序 (Modify time 文件自身内容被修改的时间)</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h3><p>zh      显示隐藏文件</p><p>zp      打开/关闭文件预览功能<br>zP      打开目录预览功能</p><h3 id="链接-Link"><a href="#链接-Link" class="headerlink" title="链接(Link):"></a>链接(Link):</h3><p>pl      粘贴绝对路径的链接<br>pL      粘贴相对路径的链接<br>phl     硬链接</p><h3 id="批量改名"><a href="#批量改名" class="headerlink" title="批量改名:"></a>批量改名:</h3><p>批量选择文件后, 键入命令:bulkname, 会打开编辑器, 其中的文件名编辑后保存退出, 再次打开操作确认编辑, 然后就批量改名了, 如果想取消批量改名, 在确认时把文件内容删除即可.</p><h3 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理:"></a>任务管理:</h3><p>在执行某些操作(比如复制一个大文件)时不能立即完成, 这在 ranger 中就是一个任务. 你可以停止, 启动某个任务, 也可以对某个任务设置优先级.</p><p>w: 打开/关闭任务视图. 在w打开的任务视图中:<br>    dd: 终止一个任务<br>    J: 降低当前任务的优先级<br>    K: 提升当前任务的优先级</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他:"></a>其他:</h3><dl><dt>zf      过滤器(如过滤pdf文件, zf+pdf,回车)<br>S       在当前目录打开终端<br>z(*)    改变设置, <em>表示在弹出选项中的选择<br>o(</em>)    改变排序方式<br>! / s   使用shell命令(！shell -w ls -hl %s,%s代表当前被选中的文件)</dt><dd>使用ranger命令(3? 查看可用命令)<br>:set colorscheme snow 设置颜色模式</dd></dl><h2 id="四、快速预览"><a href="#四、快速预览" class="headerlink" title="四、快速预览"></a>四、快速预览</h2><p>安装一下程序可以实现快速预览:</p><p>elinks, html<br>highlight,text/code<br>img2txt,image<br>atool,压缩包<br>pdf2text,pdf<br>medinfo,audio/video</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ranger </tag>
            
            <tag> 文件浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端跨域的问题</title>
      <link href="/2019/07/24/qi-ta-za-xiang/hou-duan-kua-yu-de-wen-ti/"/>
      <url>/2019/07/24/qi-ta-za-xiang/hou-duan-kua-yu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">在前端调用api的时候无法获得Flask本地服务器后端返回的json数据,在浏览器控制台爆出了</blockquote><span id="more"></span><blockquote><p>No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘null’ is therefore not allowed access.<br><img src="https://s2.ax1x.com/2019/07/24/eVjrpd.jpg" alt="eVjrpd.jpg"></p></blockquote><p>大致意思好像是访问没被允许</p><h3 id="事情原因"><a href="#事情原因" class="headerlink" title="事情原因"></a>事情原因</h3><p>我参照<a href="https://www.taniarascia.com/how-to-connect-to-an-api-with-javascript/">https://www.taniarascia.com/how-to-connect-to-an-api-with-javascript/</a><br>去学习api的知识<br>在修改了js请求后端发过来的json数据后无法访问，爆出了刚才的错误<br><img src="https://s2.ax1x.com/2019/07/24/eVjBfH.jpg" alt="eVjBfH.jpg"></p><p>先开始不知道是怎么回事，前端一直无法获得json数据，但是请求时对的，<br>找了好久，差点误入歧途，全都是关于前端怎么跨域访问的教程，完全是借助相关的漏洞获取没有被允许的数据资源，</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>后端跨域访问数据是需要后端允许的，官方是通过CORS放权解决<br>它会在你发送下面几种HTTP请求时触发：</p><ul><li>不同的域名 （比如在网站 example.com 请求 api.com)</li><li>不同的子域名 （比如在网站 example.com 请求 api.example.com)</li><li>不同的端口 （比如在网站 example.com 请求 example.com:3001)</li><li>不同协议 （比如在网站 <a href="https://example.com/">https://example.com</a> 请求 <a href="http://example.com/">http://example.com</a>)<br>这个机制阻止攻击者在一些网站上放置js脚本</li></ul><ol><li><p>安装 flask-cors</p><blockquote><p>pip install flask-cors</p></blockquote></li><li><p>导入包</p><blockquote><p>from flask_cors import CORS</p></blockquote></li><li><p>全局数据app应用的数据</p><blockquote><p>app = Flask(<strong>name</strong>)<br>CORS(app)</p></blockquote></li></ol><h3 id="再次请求"><a href="#再次请求" class="headerlink" title="再次请求"></a>再次请求</h3><p>运行index.html文件</p><p><img src="https://s2.ax1x.com/2019/07/24/eVviB6.jpg" alt="eVviB6.jpg"></p><p>OK了</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos服务器配置python3解释器</title>
      <link href="/2019/07/11/qi-ta-za-xiang/centos-fu-wu-qi-pei-zhi-python3-jie-shi-qi/"/>
      <url>/2019/07/11/qi-ta-za-xiang/centos-fu-wu-qi-pei-zhi-python3-jie-shi-qi/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">解决Centos 没有python3解释器的问题</blockquote><span id="more"></span><h2 id="腾讯云上面注册一个账号"><a href="#腾讯云上面注册一个账号" class="headerlink" title="腾讯云上面注册一个账号"></a>腾讯云上面注册一个账号</h2><p>我当时用的centos 7.6<br>反正安装的时候各种问题</p><h3 id="连接ssh"><a href="#连接ssh" class="headerlink" title="连接ssh:"></a>连接ssh:</h3><p>ssh root@公网ip  然后输入密码</p><p>改端口,post 改成56或者其他，，，为了安全</p><blockquote><p>vim /etc/ssh/sshd_config</p></blockquote><p>然后从新启用端口</p><blockquote><p>systemctl restart sshd </p></blockquote><h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><p>先下载python3的linux包，或者直接上传<br>找一个目录解压</p><blockquote><p>tar xf Python-xxx</p></blockquote><p>安装必要的东西，因为安装的时候报错sqlite有问题，没有编译，都一起安装了。</p><blockquote><p>yum install -y zlib zlib-devel sqlite-devel</p></blockquote><p>指定目录安装python3 ，顺便安装pip, &amp;&amp; 为成功则继续执行</p><blockquote><p>./configure –prefix=/usr/local/python-3.6.4 –with-ensurepip &amp;&amp; make &amp;&amp; make install</p></blockquote><p>添加快捷方式，相当于环境变量</p><blockquote><p>ln -s /usr/local/python-3.6.4/bin/python3 /usr/local/bin<br>ln -s /usr/local/python-3.6.4/bin/pip3 /usr/local/bin</p></blockquote><p>这个时候python3，pip3就可以用了，</p><h3 id="安装必要包，解决可能出现的问题"><a href="#安装必要包，解决可能出现的问题" class="headerlink" title="安装必要包，解决可能出现的问题"></a>安装必要包，解决可能出现的问题</h3><blockquote><p>yum install -y postgresql<br>yum install -y gcc<br>yum install -y postgresql-debel</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用Github+Hexo搭建属于自己的个人博客</title>
      <link href="/2019/07/01/bo-ke/yong-github-hexo-da-jian-shu-yu-zi-ji-de-ge-ren-bo-ke/"/>
      <url>/2019/07/01/bo-ke/yong-github-hexo-da-jian-shu-yu-zi-ji-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">搭建博客系统后也不知道写些什么，正好刚刚用Github+Hexo搭建了一个博客系统，就先记录下吧！</blockquote><span id="more"></span><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>git下载<a href="https://git-scm.com/download/win">连接</a><br>安装完成后<br><img src="https://s2.ax1x.com/2019/07/01/ZGFCtA.jpg" alt="安装完成后"><br>关于git的使用可参照这个网站<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰</a></p><h2 id="绑定github"><a href="#绑定github" class="headerlink" title="绑定github"></a>绑定github</h2><p>打开Git Bash 输入</p><blockquote><p>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”</p></blockquote><p>生成ssh密钥文件：</p><blockquote><p>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</p></blockquote><p>在目录C:\Users\Administrator.ssh找到id_rsa.pub文件打开<a href="">公钥目录</a><br>然后打开<a href="https://github.com/settings/keys">https://github.com/settings/keys</a>页面，新建new ssh key,把刚刚生生的你看不懂的长串字段粘贴进去，标题随便取,然后点Add SSH key<br><img src="https://s2.ax1x.com/2019/07/01/ZGk15d.jpg" alt="添加ssh key"><br>显示添加后基本就可以了</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-x64.msi">下载连接</a><br>安装后在cmd窗口输入</p><blockquote><p>node -v</p></blockquote><p>出现版本就表示安装上了<br><a href="https://imgchr.com/i/ZGkvIH"><img src="https://s2.ax1x.com/2019/07/01/ZGkvIH.jpg" alt="ZGkvIH.jpg"></a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>直接可以在cmd窗口输入<br>因为国外的镜像源很慢，所以更换国内的镜像源<br>输入:</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote><p>跟换完成后用cnpm 包管理器<br>然后输入命令安装hexo：</p><blockquote><p>cnpm install -g hexo-cli</p></blockquote><p>验证hexo是否安装完成：</p><blockquote><p>hexo -v</p></blockquote><p><a href="https://imgchr.com/i/ZGEuAe"><img src="https://s2.ax1x.com/2019/07/01/ZGEuAe.jpg" alt="ZGEuAe.jpg"></a></p><p>表示安装完成了，是不是很简单</p><p>新建一个文件夹作为你blog的安装目录，不建议桌面<br>在新建好的文件夹中右击打开 git bash here输入：</p><blockquote><p>hexo init</p></blockquote><p>此后会自动生成必要文件完成后验证运行输入：</p><blockquote><p>hexo g</p></blockquote><p>生成静态文件</p><blockquote><p>hexo s</p></blockquote><p><a href="https://imgchr.com/i/ZGE09s"><img src="https://s2.ax1x.com/2019/07/01/ZGE09s.jpg" alt="ZGE09s.jpg"></a></p><p>运行后在浏览器中打开localhost:4000/就可以看见创建的博客了，具体使用参照hexo官方<a href="https://hexo.io/zh-cn/docs/commands">使用文档</a></p><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p>在github上面新建一个仓库<br><a href="https://imgchr.com/i/ZGEhC9"><img src="https://s2.ax1x.com/2019/07/01/ZGEhC9.jpg" alt="ZGEhC9.jpg"></a><br>仓库名一定是  “你用户名”.github.io</p><p>复制生成的SSH连接，<br>在init 后的目录下找到_config.yml用文本打开添加</p><blockquote><p>deploy:<br>  type: git<br>  repository: “你复制的SSH连接”<br>  branch: master</p></blockquote><p>然后保存</p><p>然后安装一个部署插件</p><blockquote><p>cnpm install –save hexo-deployer-git</p></blockquote><p>安装后<br>输入:</p><blockquote><p>hexo d</p></blockquote><p>就可以部署到远端了，<br>用浏览器打开 “你用户名”.github.io就可以看到你部署后的博客系统了</p><hr><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>换了电脑，移动本地的blog文件后<code>hexo d</code>出现<code>LF will be replaced by CRLF</code>的警告<br>查阅了一番后似乎没有必要<br>直接禁用转化就可以了</p><pre class="line-numbers language-none"><code class="language-none">git config --global core.autocrlf false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此后用hexo d就不会出现这样的问题了,可以正常部署</p><hr><h2 id="注释的彩虹滤镜"><a href="#注释的彩虹滤镜" class="headerlink" title="注释的彩虹滤镜"></a>注释的彩虹滤镜</h2><p>找到这个路径</p><pre class="line-numbers language-none"><code class="language-none">themes\hexo-theme-matery\source\css\matery.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释掉以下信息</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* .bg-cover:after &#123;    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;&#125; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="banner-过渡颜色"><a href="#banner-过渡颜色" class="headerlink" title="banner 过渡颜色"></a>banner 过渡颜色</h2><pre class="line-numbers language-none"><code class="language-none">.bg-color &#123;    &#x2F;* background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); *&#x2F;    background-image: linear-gradient(to right, #FA6C54 0%, #151947 100%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
